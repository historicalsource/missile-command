	.TITLE W3DSUP-WWIII
	.INCLUDE W3COMN		;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	.PAGE
	.SBTTL GLOBAL SYMBOLS
;ENTRY POINTS DEFINED HERE & REFERENCED EXTERNALLY

	.GLOBL DTABEL,INIINI,ARROW,DTABML,ERAMIS
	.GLOBL MAKMAP,DSPMRK,MOVCUR,MOVMIS,ERAMRK
	.GLOBL DTABMS,NUMOUT,DSPNUM,MISUPD,ERACIT
	.GLOBL MISTIP,MISTRA,BLEWIT,ERAABM,ONEMIS
	.GLOBL DACITY,ATRMSG,PRSCRO,NUHICK,DPLANO
	.GLOBL BLNKAR,WSTAMP,CMDRAW,CMERAS,BONCIT
	.GLOBL GETINI,DSPHSC,DSPHI,DTABER,ACTCUR
	.GLOBL DEACUR,INILIT,DSPSCO

	.SBTTL VARIABLES DEFINED EXTERNALLY

	.GLOBL CHKSM7,CHKSM9,CHKSM5
	.GLOBL TBHD,FRAME,ATRACT,NUMPLA,FIRESW
	.GLOBL COL000,ABOPV,ABOPH,NMMISB,OPTIO2
	.GLOBL ABCPVH,ABCPHH,MISIND,CRCPHL,CRCPHH,CRCPVH
	.GLOBL ABTAH,ABTAV,J,CICPV,CICPH,MBCPV,MBCPH
	.GLOBL TRIPLE,PLAYUP,K,COCKTA,WAVENO,ABVEHL
	.GLOBL ABVEVL,ABVEHH,ABVEVH,CILEFT,CIBITS,$$CRDT
	.GLOBL OPTION,SETUPC,LSCORL,LSCORM,LSCORH,TBVD,STATE
	.GLOBL PAUST,BONINL,BONINH,NXTSTA,ICBTOL,COL001,BLINKS,SWSTAT

	.SBTTL VARIABLES DEFINED HERE AND REFERENCED EXTERNALLY

	.GLOBL CMOTAB,PATRN1,SAVEX,BASEMP,BASLOW,OLDPOS
	.GLOBL RA,NWSTMP,QCHKS7,QCHKS9,QCHKS5
	.PAGE
	.SBTTL BASE PAGE
	.BSECT W3DSUP
	
NWSTMP:	.BLKB 2			;STAMP DESTINATION
RA:	.BLKB 1
SCRCH1:	.BLKB 1
SCRCH2:	.BLKB 1
FLAG:	.BLKB 1
OLDPOS:	.BLKB 2			;SCREEN POINTER
NOBKGD:	.BLKB 1			;DON'T ERASE BACKGROUND FLAG
OLDCPH:	.BLKB 1			;OLD CURSOR POSITION
OLDCPV:	.BLKB 1
PATRN1:	.BLKB 1			;COLOR REGISTERS
PATRN0:	.BLKB 1
STMPLO:	.BLKB 2			;STAMP LOOKUP DATA POINTER
UCVTAB:	.BLKB CURLEN		;UNDER CURSOR DATA ARRAYS
UCHTAB:	.BLKB CURLEN
MESAGE:	.BLKB 2
MSPOS:	.BLKB 2			;SCREEN MESSAGE POINTER
MGNFYV:	.BLKB 1			;MAGNIFICATION MULTIPLIERS
MGNFYH:	.BLKB 1
SAVEX:	.BLKB 1			;TEMP STORAGE
SAVEY:	.BLKB 1
SCRTAB:	.BLKB 1			;INDEX INTO SCROLL TABLES MESDAT&MESTYPE
SCRCHA:	.BLKB 1			;# OF CHARACTER IN MESSAGE TO DISPLAY
BETMES:	.BLKB 1			;# OF FRAMES LEFT TO DELAY BETWEEN MSGS.
SPMESA:	.BLKB 1			;BUCKET FOR SPECIAL MSG #
NUMCRE:	.BLKB 1			;# OF CREDIT LAST TIME THRU SCROLL
LITRAL:	.BLKB 2			;POINTER TO LANG TABLE
INITAL:	.BLKB 3*5		;INITIALS ARRAY
HSCORL:	.BLKB 3*5		;HIGH SCORE LSB
HSCORM	=HSCORL+1
HSCORH	=HSCORM+1		;HIGH SCORE MSB
	.PAGE
	.CSECT W3DSUP
	.SBTTL CURSOR ROUTINES
;PARAMETERS INPUT:
;
;CRCPHH & CRCPVH = ADDRESS OF NEW CURSOR POSITION
;OLDPHH & OLDPVH = ADDRESS OF OLD CURSOR POSITION
;OUTPUT PARAMETERS A,X,Y ARE DESTROYED
;SCREEN UPDATED

	.REPT 0
;FUNCTION:	RESTORE DOTS ON SCREEN COVERED BY CURSOR
;INPUTS:	OLPPHH & OLDPVH=POSITION ON SCREEN TO BE RESTORED
;		UCHTAB=LABEL FOR 5 BYTE LOOKUP TABLES THAT CONTAINS DATA
;		COVERED BY HORIZONTAL LINE OF CURSOR.
;		UCVTAB=LABEL FOR 5 BYTE LOOKUP TABLES THAT CONTAINS DATA
;		COVERED BY VERTICAL LINE OF CURSOR.
;OUTPUTS:	X,Y & A DESTROYED
;SCREEN UPDATED
	.ENDR
MOVCUR:
	LDA I,CURCOL
	JMP GENCUR
ERACUR:	LDA I,BCKGND		;ERASE CURSOR
GENCUR:	STA J
	LDA OLDCPV
	CMP I,18
	IFCS
	CLC
	ADC I,CURLEN/2
	EOR I,0FF		;POINT TO TOP OF VERTICAL LINE
	STA OLDPOS+1
	LDA OLDCPH
	STA OLDPOS
	SEC
	SBC I,CURLEN/2
	STA SCRCH1
	LDA OLDCPV
	EOR I,0FF
	STA SCRCH1+1
	LDA CRCPVH
	CMP I,18
	IFCS
	STA OLDCPV
	CLC 
	ADC I,CURLEN/2
	EOR I,0FF
	STA NWSTMP+1
	LDA CRCPHH
	STA OLDCPH
	STA NWSTMP
	SEC
	SBC I,CURLEN/2
	STA STMPLO
	LDA CRCPVH
	EOR I,0FF
	STA STMPLO+1
	LDY I,CURLEN-1
	LDX I,0
	BEGIN
	LDA NX,SCRCH1
	AND I,0E0
	CMP I,CURCOL
	IFEQ
	LDA AY,UCHTAB
	STA NX,SCRCH1
	THEN

	LDA NX,OLDPOS		;DON'T RESTORE OVER NON-CURSOR STUFF.
	AND I,0E0
	CMP I,CURCOL
	IFEQ
	LDA AY,UCVTAB		;GET LOOK-UP DATA
	STA NX,OLDPOS		;STORE IN SCREEN RAM
	THEN
	INC SCRCH1		;POINT TO RIGHTER SCREEN ADDRESS
	INC OLDPOS+1		;POINT TO LOWER SCREEN ADDRESS
	DEY
	MIEND			;DONE
	.REPT 0
;SAVE UNDER CURSOR
;FUNCTION:	SAVE DOTS THAT CURSOR WILL COVER SO THEY CAN BE RESTORED LATER
;INPUTS:	CRCPHH & CRCPVH=ADDRESS OF BYTES TO BE SAVED
;OUTPUTS:	A,X,Y ARE DESTROYED
;		UCVTAB=TABLE OF BYTES UNDER VERTICAL CURSOR LINE
;		UCHTAB=TABLE OF BYTES UNDER HORIZ CURSOR LINE
	.ENDR
	LDY I,CURLEN-1
	LDX I,0
	BEGIN
	LDA NX,NWSTMP
	STA AY,UCVTAB
	LDA J
	STA NX,NWSTMP
	INC NWSTMP+1
	LDA NX,STMPLO
	STA AY,UCHTAB
	LDA J
	STA NX,STMPLO
	INC STMPLO
	DEY
	MIEND
	THEN
	THEN
	RTS
QCHKS5:	.BYTE CHKSM5
	.PAGE
	.SBTTL ACTIVATE CURSOR

ACTCUR:
	LDA I,80
	STA OLDCPH
	STA CRCPHH
	LDA I,50
	STA OLDCPV
	STA CRCPVH		;NEW POSITION
	LDA I,BCKGND		;LOAD IN COLOR
	LDX I,CURLEN*2-1
	BEGIN
	STA ZX,UCVTAB		;STORE INTO UNDER CURSOR ARRAY
	DEX
	MIEND
	RTS

	.SBTTL DEACTIVATE CURSOR

DEACUR:
	JSR ERACUR		;ERASE CURSOR
	LDA I,0
	STA CRCPVH		;DEACTIVATE IT
	STA OLDCPV
	RTS
	.PAGE
	.SBTTL MARKER ROUTINES
;X & Y PRESERVED

DSPMRK:	STX SAVEX		;SAVE REGISTERS
	LDA I,FLASH		;MARKER COLOR
	STA PATRN1
	LDA CRCPVH		;GET CURSOR POSITION
	EOR I,0FF
	SEC
	SBC I,2			;POINT TO TOP OF
	STA OLDPOS+1		;MARKER
	STA NWSTMP+1
	LDA CRCPHH
	JMP GENMRK



	.REPT 0
INPUTS
MISIND = INDEX INTO TARGET ARRAYS
ABTAV  = ABM TARGET ARRAY, VERTICAL
ABTAH  = ABM TARGET ARRAY, HORIZONTAL

OUTPUTS: SCREEN UPDATE
	 X,Y SAVED
	.ENDR

ERAMRK:	STX SAVEX
	LDA I,BCKGND		;COLOR TO ERASE MARKER
	STA PATRN1
	LDX Z,MISIND		;INDEX INTO TARGET ARRAY
	LDA AX,ABTAV		;GET VERT COORD
	EOR I,0FF
	SEC
	SBC I,2			;POINT TO TOP OF MARKER
	STA OLDPOS+1
	STA NWSTMP+1
	LDA AX,ABTAH		;GET HORIZ COORD
GENMRK:	CLC
	ADC I,2			;POINT TO RIGHT EDGE
	STA OLDPOS		;OF MARKER
	SEC
	SBC I,4			;POINT TO LEFT EDGE
	STA NWSTMP		;OF MARKER
	LDX I,0
	LDA I,4			;MARKER HEIGHT
	STA J			;USE AS COUNTER
	LDA PATRN1		;GET COLOR
	BEGIN
	STA NX,OLDPOS
	STA NX,NWSTMP
	INC OLDPOS+1		;POINT DOWN AND
	DEC OLDPOS		;TO THE LEFT
	INC NWSTMP+1		;POINT DOWN AND TO THE RIGHT
	INC NWSTMP
	DEC J			;DONE?
	MIEND
	LDX SAVEX		;RESTORE X AND Y
	RTS
	.PAGE
	.SBTTL PLAYER ARROWS
;FUNCTION ARROW DISPLAY ARROW POINTING TO PLAYER UP
;INPUT3: MUMPLA: POINTS TO WHICH PLAYER
;IS UP 0=PLAYER1, 1=PLAYER2
;OUTPUT: SCREEN UPDATED
SLAROW	=33.			;ARROW STAMP #'S
SRAROW	=34.
ARROW:	LDY I,BLUE
BARROW:	LDA PLAYUP
	JSR OUTARO		;PLAYER UP GETS A BLUE ARROW
	LDY I,BCKGND
	LDA PLAYUP
	EOR I,1			;OTHER PLAYER'S ARROW GETS ERASED
OUTARO:
	STY PATRN1		;ARROW OR BACKGOUND COLOR
	TAX			;PLAYER ARROW INDEX
	LDA AX,SARONO
	PHA
	LDA AX,AROHOR
	TAX			;X COORD
	LDY I,STOPLI		;Y COORD
	PLA			;STAMP #
	JMP WSTAMP		;WRITE ARROW
SARONO:	.BYTE SLAROW,SRAROW	;LEFT & RIGHT ARROWS
AROHOR:	.BYTE 4D,0A8
BLNKAR:			;BLINK ARROW
	LDA BLINKS
	IFEQ
	JSR ARROW		;ARROW ON
	ELSE
	LDY I,BCKGND
	JSR BARROW		;ARROW OFF
	THEN
	RTS
	.PAGE
	.SBTTL WRITE A STAMP
;INPUT:	ACC=STAMP #
;	X=HORIZ LOC FOR STAMP
;	Y=VERT LOC FOR STAMP
;	PATRN1=FOREGROUND PATTERN
;	PATRN0=BACKGROUND PATTERN
;
;OUTPUT:STMPLO(2)=LOC OF STAMP
;	NWSTMP(2)=LOC ON SCREEN (X,^CY)
ISTMPL:	.WORD LETTER-8
ISTMPH	=ISTMPL+1
WSTAMP:
	STA STMPLO
	STX NWSTMP		;X SCREEN COORD
	TYA
	STA NWSTMP+1		;Y SCREEN COORD
	LDA I,0			;(STAMP # X 8) + LOC OF 1ST STAMP
	STA STMPLO+1
	LDA I,-1
	STA NOBKGD		;LEAVE BACKGROUND
	ASL STMPLO
	ROL STMPLO+1
	ASL STMPLO
	ROL STMPLO+1
	ASL STMPLO
	ROL STMPLO+1
	LDA A,ISTMPL
	CLC
	ADC STMPLO
	STA STMPLO
	LDA A,ISTMPH
	ADC STMPLO+1
	STA STMPLO+1		;=LOC OF STAMP TO WRITE
				;FALL INTO STMPX1
	.SBTTL OUTPUT A STAMP
;PARAMETERS NWSTMP & NWSTMP+1 = ADDRESS OF NEW STAMP ON SCREEN
;MGNFH&V=HORIZ & VERT MAGNIFICATION FACTORES FOR STAMP
;PATRN0 & PATRN1 = BIT PATTERNS OF THE COLORS TO BE OUTPUT
;STMPLO	= ADDRESS OF UPPER LEFT CORNER OF STAMP IN LOOK UP TABLE
;NOBKGD=0 IF WRITE OVER BACKGROUND, -1 IF LEAVE IT ALONE
;COCKTA: D6=1 FOR FLIP, 0 FOR REGULAR
;OUTPUT A,X & Y ARE DESTROYED
;OLDPOS & J ARE DESTROYED
;SCREEN UPDATED

STMPX1:	LDA I,1
	STA MGNFYH
	STA MGNFYV
STMPOT:	LDY I,7			;BYTE COUNTER FOR LOOKUP TABLE
	LDA NWSTMP+1
	CLC
	ADC I,4			;POINT TO TOP OF STAMP
	EOR I,0FF
	STA OLDPOS+1
	BEGIN
	LDA MGNFYV
	STA SCRCH2
	BEGIN
	LDA NWSTMP
	SEC
	SBC I,4
	BIT COCKTA
	IFVS			;COCKTAIL FLIP?
	EOR I,0FF		;YES
	THEN
	STA OLDPOS
	LDX I,0
	LDA I,7			;BIT COUNTER
	STA J
	LDA NY,STMPLO		;GET LOOKUP DATA
	BEGIN
	ASL			;SHIFT!
	PHA
	LDA MGNFYH
	STA SCRCH1		;RESET HORIZ MAGNIFICATION FACTOR
	LDA PATRN1
	IFCC
	LDA NOBKGD
	IFMI
	LDA NX,OLDPOS		;DON'T ERASE BACKGROUND
	ELSE
	LDA PATRN0		;DO ERASE
	THEN
	THEN
	BEGIN
	STA NX,OLDPOS
	BIT COCKTA		;COCKTAIL FLIP?
	IFVS
	DEC OLDPOS		;YES
	ELSE
	INC OLDPOS		;NO
	THEN
	DEC SCRCH1
	EQEND
	PLA
	DEC J			;DONE?
	MIEND
	INC OLDPOS+1
	DEC SCRCH2
	EQEND
	DEY			;POINT TO NEXT BYTE IN LOOKUP TABLE
	MIEND
	RTS
	.PAGE
	.SBTTL ERASE A MISSILE TRAIL
;INPUT:		MISIND=INDEX OF MISSILE TRAIL TO ERASE
;		ABOPH(Y) AND ABOPV(Y)=MISSILE TRAIL START POINT
;		ABCPHH(Y) AND ABCPVH(Y)=MISSILE TRAIL CURRENT LOC
;		ABVEHL,HH,VL,VH(Y)=DELTA X AND Y OF MISSILE TRAIL
;OUTPUT:	X,Y PRESERVED
;		ACC,J,K,OLDPVH,OLDPHH,SCRCH1,SCRCH2,RA,NWSTMP(2),
;		SAVEX,SAVEY ARE DESTROYED
;		TRAIL ERASED
;
ERAMIS:
	STX SAVEX
	STY SAVEY
	LDY MISIND
	LDA I,0
	STA J			;LSB ORIGIN=0
	LDA I,0FF
	STA K
	LDA AY,ABOPV
	EOR I,0FF
	STA OLDPOS+1		;VERT START
	LDA AY,ABOPH
	STA OLDPOS		;HORIZ START
	LDA AY,ABVEHL
	STA SCRCH1		;LSB HORIZ DELTA
	LDA AY,ABVEVL
	STA SCRCH2		;LSB VERT DELTA
	LDA AY,ABVEHH
	STA NWSTMP		;MSB HORIZ DELTA
	LDA AY,ABVEVH
	STA NWSTMP+1		;MSB VERT DELTA
	LDA AY,ABCPVH		;VERT ENDPOINT
	EOR I,0FF
	STA RA
	CMP OLDPOS+1
	IFNE			;SOMETHING TO ERASE?
	LDX I,0			;YES. CLEAR FOR STA NX
	BEGIN			;ERASE EACH DOT FROM ORIGIN TO CURRENT POS
	LDA I,BCKGND
	STA NX,OLDPOS		;ERASE NEXT DOT
	LDA J
	CLC
	ADC SCRCH1
	STA J			;NEXT LSB HORIZ
	LDA OLDPOS
	ADC NWSTMP
	STA OLDPOS		;NEXT MSB HORIZ
	LDA K
	SEC
	SBC SCRCH2
	STA K			;NEXT LSB VERT
	LDA OLDPOS+1
	SBC NWSTMP+1
	STA OLDPOS+1		;NEXT MSB VERT
	CMP I,TOPSCV
	BCC ERABY		;DON'T LET IT RUN RAMPANT THRU STACK
	CMP RA
	EQEND			;ENDLOOP IF AT CURRENT POSITION
	LDA I,BCKGND		;ERASE DOT AT CURRENT POSITION
	STA NX,OLDPOS
	THEN
ERABY:	LDX SAVEX
	LDY SAVEY
	RTS
	.PAGE
	.SBTTL MISSILE TIPS & TRAIL
MISTIP:	
	LDY MISIND
	LDA I,FLASH		;TIP OF MISSILE TRAIL IS FLASH
	JMP MOVMIS

MISTRA:	
	LDA I,BLUE		;MAY BE ABM
	LDY MISIND
	CPY I,NABMS
	IFCS
	LDA I,REDMIS		;ITS AN ICBM
	THEN
MOVMIS:	STA PATRN1
	STX J
	LDA Y,ABCPHH		;POINT TO LEADING EDGE OF MISSILE TO BE UPDATED
	STA OLDPOS
	LDA Y,ABCPVH
	EOR I,0FF
	STA OLDPOS+1
	LDA PATRN1
	LDX I,0
	STA NX,OLDPOS		;OUTPUT DOT
	LDX J
	RTS
	.PAGE
	.SBTTL COASTLINE OUTPUT
MAKMAP:	
	LDX I,7			;BLACKEN ENTIRE SCREEN FOR SETUP
	LDA I,CBLACK
	BEGIN
	STA X,COL000
	DEX
	MIEND
	JSR BLEWIT		;STORE BACKGROUND COLOR TO ENTIRE SCREEN
	JSR COAST		;GO DRAW COASTLINE
	JSR ALLCIT		;GO DRAW CITIES
	JSR SETCOL		;SET UP COLOR ARRAY
INILIT:	LDA OPTION		;SET UP LANGUAGE TABLE POINTER
	LSR
	LSR
	LSR
	LSR
	AND I,06
	TAY
	LDA AY,LNGPTL
	STA LITRAL
	LDA AY,LNGPTL+1
	STA LITRAL+1
	LDA I,0
	LDY OPTIO2
	IFMI			;COCKTAIL TABLE?
	ORA I,COCMSK		;YES
	LDY PLAYUP
	IFNE			;2ND PLAYER?
	ORA I,CFLMSK!FLIPHS	;YES
	THEN
	THEN
	STA COCKTA
	RTS
	.PAGE
	.SBTTL ERASE CITY

;INPUT:	X=INDEX OF CITY TO ERASE

ERACIT:	LDX AY,CICPH
	LDA AY,CICPV
	TAY
	LDA I,0			;PATTERNS
	BEQ FLPCIT		;DRAW CITY
;
	.SBTTL DRAW ALL LIVING CITIES

;INPUT:	CILEFT(2)=BIT SET FOR EACH LIVE CITY
;	CICPV&H=CITY LOCS
;	PLAYUP=PLAYER UP

ALLCIT:	LDY I,NCITY-1
	STY K
	BEGIN			;LOOP FOR EACH CITY
	LDY PLAYUP
	LDA AY,CILEFT
	LDY K
	AND AY,CIBITS
	IFNE			;ALIVE?
	LDX AY,CICPH		;YES. HORIZ
	LDA AY,CICPV		;VERT
	TAY
	LDA I,CITCLB+<CITCLT/10>;TOP & BOTTOM PAT
	JSR FLPCIT		;DRAW
	THEN
	DEC K
	MIEND
	RTS
FLPCIT:	PHA
	LDA COCKTA		;INDEX FLIP REQUEST
	AND I,^CFLIPHS
	STA COCKTA
	PLA
	JSR DACITY		;DRAW CITY
	LDA COCKTA
	AND I,CFLMSK
	IFNE
	ORA I,FLIPHS!COCMSK	;RESTORE FLIP REQUEST
	STA COCKTA
	THEN
	RTS
	.PAGE
	.SBTTL DRAW ONE CITY AT REQUESTED LOC

;INPUT:	X=H LOC OF CITY CENTER
;	Y=V LOC OF CITY CENTER
;	ACC(D7-D4)=COLOR OF CITY BOTTOM
;	ACC(D3-D0)=COLOR OF CITY TOP
;OUTPUT:X,Y,ACC,MESAGE(2),MSPOS(2),FLAG DESTROYED

DACITY:	STX MESAGE
	STY MESAGE+1
	STA MSPOS		;CITY BOTTOM COLOR
	ASL
	ASL
	ASL
	ASL
	STA MSPOS+1		;CITY TOP COLOR
	LDX I,3
	STX FLAG
	BEGIN			;LOOP FOR EACH CITY STAMP
	LDX FLAG
	LDY AX,CSTCOL
	LDA AY,MSPOS
	STA PATRN1		;FOREGROUND PATTERN
	LDY MESAGE+1		;VERT
	LDA AX,CSTNUM		;STAMP #
	PHA
	LDA MESAGE
	CLC
	ADC AX,CSTHOF		;HORIZ LOC
	TAX
	PLA
	JSR WSTAMP		;DRAW CITY STAMP
	DEC FLAG
	MIEND
	RTS
;CITY STAMPS= LEFT TOP,LEFT BOTTOM,RIGHT TOP,RIGHT BOTTOM
CSTCOL:	.BYTE 1,0,1,0
CSTNUM:	.BYTE 1E,1D,20,1F
CSTHOF:	.BYTE -4,-4,4,4
	.PAGE
	.SBTTL DRAW MISSILE
;INPUT:	X=# OF MISSILE TO DRAW
;	ACC=COLOR PATTERN FOR MISSLE
;	MISTBH(X)=OFFSET FROM MISSILE POSITION (MBCPH&V)
;	MISTBV(X)=OF TOP MISSILE
;	Y=# OF MISSILE BASE AT WHICH TO DRAW MISSILE
;	MBCPH(Y)=COORDINATES OF TOP CENTER OF MISSLE BASE
;	MBCPV(Y)
;OUTPUT:	X,Y IS PRESERVED
;	MISSILE IS DRAWN (OR ERASED) ON SCREEN
;	SET DISPLAY COORDINATES FOR MISSILE
;	HORIZ=MBCPH(Y)+MISTBH(X)
;	VERT=MBCPV(Y)+MISTBV(X) (INVERT)
;	SET COUNTER FOR 3 DOT HIGH MISSILE
;	LOAD COLOR
;	BEGIN
;	  OUTPUT COLOR
;	  DECREMENT VERTICAL COORDINATE
;	  DECREMENT COUNTER
;	ENDLOOP IF DONE WITH MISSILE
	
ERAABM:	LDX AY,NMMISB		;ERASE AN ABM FROM THE BASE
	INX
	LDA I,YELLOW
DRAMIS:
	CLC
	PHA
	LDA AY,MBCPH
	ADC AX,MISTBH-1
	STA OLDPOS
	CLC
	LDA AY,MBCPV
	ADC AX,MISTBV-1
	EOR I,0FF
	STA OLDPOS+1
	PLA
ONEMIS:	LDX I,0
	STA NX,OLDPOS
	INC OLDPOS+1
	STA NX,OLDPOS
	INC OLDPOS+1
	STA NX,OLDPOS
	INC OLDPOS+1
	STA NX,OLDPOS
	DEC OLDPOS
	STA NX,OLDPOS
	INC OLDPOS+1
	STA NX,OLDPOS
	INC OLDPOS
	INC OLDPOS
	STA NX,OLDPOS
	DEC OLDPOS+1
	STA NX,OLDPOS
	RTS
MISTBV:	.BYTE 2,-1,-1,-4,-4,-4,-7,-7,-7,-7
MISTBH:	.BYTE 0,-3,3,-6,0,6,-3,3,-9,9
	.PAGE
	.SBTTL BASE STATUS MESSAGES
;INPUT:	ACC=BASE INDEX
;OUTPUT:X,Y PRESERVED

BASLOW:
	STX SAVEX
	STY SAVEY
	TAX
	LDA AX,MBALOW
	BIT COCKTA
	IFVS			;FLIP?
	LDA AX,CMBALOW		;YES. USE OPPOSIT BASE'S PTRS
	THEN
	JMP GENBAS

BASEMP:
	STA RA
	STX SAVEX
	STY SAVEY
	TAX
	LDA AX,MBALOW
	BIT COCKTA
	IFVS			;FLIP?
	LDA AX,CMBALOW		;YES. USE OPPOSITE BASE'S PTRS
	THEN
	JSR DTABER
	LDX RA
	LDA AX,MBAEMP
	BIT COCKTA
	IFVS
	LDA AX,CMBAEMP
	THEN
GENBAS:	JSR DTABMS
	LDX SAVEX
	LDY SAVEY
	RTS

MBAEMP:	.BYTE MB1EMP,MB2EMP,MB3EMP
MBALOW:	.BYTE MB1LOW,MB2LOW,MB3LOW
CMBAEMP:.BYTE MB3EMP,MB2EMP,MB1EMP
CMBALOW:.BYTE MB3LOW,MB2LOW,MB1LOW
	.PAGE
	.SBTTL UPDATE MISSILE BASE DISPLAY
;INPUT:	MAXMIS=(CONSTANT) MAXIMUM # OF MISSILES/BASE
;	Y=# OF MISSILE BASE
;	NMMISB(Y)=# OF MISSILES IN BASE
;	NBCPH(Y)=COORDINATES OF MISSILE BASE
;	MBCPV(Y)= (TOP CENTER)
;OUTPUT:	ACC,X DESTROYED Y,PRESERVED
;	SCREEN UPDATED TO SHOW MISSILES AT THE BASE
;	IF # OF MISSILES IN BASE=MAXIMUM
;	SET MISSILE COUNTER TO MAXIMUM #
;	SET COLOR=MISSILE COLOR
;	BEGIN
;	  DRAW MISSILE INICATED BY COUNTER
;	  DECREMENT MISSILE COUNT
;	END OF NO MORE MISSILE
;	ELSE
;	  SET CLOR=BACKGROUND COLOR
;	  DRAW MISSILE INDICATED BY # OF MISSILE IN BASE
;	  (ERASES LAST MISSILE)
;	ENDIF
MISUPD:	LDX AY,NMMISB
	IFNE
	BEGIN
	STX RA
	LDA I,ABMCOL
	JSR DRAMIS
	LDX RA
	DEX
	EQEND
	THEN
	RTS
	.PAGE
	.SBTTL DRAW COAST
;MAKMAP	- MAKE A MAP OF COASTLINE
;INPUTS	- MAPTAB=TABLE FOR DRAWING THE GREEN COASTLINE
;OUTPUTS	- A,X,Y DESTROYED
;		  SCREEN UPDATED
COAST:	LDX I,0
	LDY I,0
	LDA I,0E6
	STA OLDPOS+1
	BEGIN
	LDA AY,MAPTAB
	STA OLDPOS
	INY
	BEGIN
	LDA I,YELLOW
	STA NX,OLDPOS
	LDA OLDPOS
	CMP AY,MAPTAB
	INC OLDPOS
	CSEND
	INY
	LDA AY,MAPTAB
	CMP I,0FF
	IFEQ
	INY
	CPY I,EOMAP-MAPTAB+1
	IFCS			;END OF TABLE?
	LDY I,EOMAP-MAPTAB	;YES. REPEAT LAST ENTRY
	THEN
	INC OLDPOS+1
	THEN
	EQEND
	RTS
	.PAGE
	.SBTTL COAST MAP
MAPTAB:	.BYTE 0C,0D,1D,1E,75,76,81,82,0E9,0EA,0FA,0FB,0FF
	.BYTE 0B,0E,1C,1F,75,77,80,83,0E7,0EA,0F9,0FC,0FF
	.BYTE 0A,20,74,84,0E6,0FD,0FF
	.BYTE 09,21,73,84,0E6,0FE,0FF
	.BYTE 08,22,73,85,0E5,0FE,0FF
	.BYTE 06,23,72,85,0E4,0FE,0FF
	.BYTE 05,23,71,86,0AC,0BB,0E3,0FE,0FF
	.BYTE 04,24,38,39,70,87,0AB,0BC,0E2,0FE,0FF
	.BYTE 03,25,37,3A,6F,87,0AA,0BD,0E1,0FF,0FF
	.BYTE 01,26,32,3B,6B,98,0A8,0BD,0DF,0FF,0FF
	.BYTE 0,3C,49,58,67,0C0,0DE,0FE,0FF
	.BYTE 0,5A,65,0FF,0FF
	.BYTE 0,5C,64,0FF,0FF
EOMAP:	.BYTE 0,0FF,0FF
	.PAGE
	.SBTTL SET UP COLORS FOR NEXT WAVE
;INPUT:		WAVENO=CURRENT WAVE #
;OUTPUT:	COL000 THRU COL111 UPDATED
;		ACC,X,Y DESTROYED
;
SETCOL:	LDA WAVENO
	SEC
	SBC I,1
	LSR
	BEGIN
	CMP I,WAVEND-WAVCOL
	IFCS
	SEC
	SBC I,WAVEND-WAVCOL
	THEN
	CMP I,WAVEND-WAVCOL
	CCEND
	TAX
	LDY AX,WAVCOL
	LDX I,6
	BEGIN
	LDA AY,WAVCOL
	AND I,0F
	STA ZX,COL001
	LDA AY,WAVCOL
	LSR
	LSR
	LSR
	LSR
	STA ZX,COL000
	DEY
	DEX
	DEX
	MIEND
	RTS

WAVCOL:	.BYTE WV1COL-WAVCOL+3
	.BYTE WV5COL-WAVCOL+3
	.BYTE WV6COL-WAVCOL+3
	.BYTE WVDCOL-WAVCOL+3
	.BYTE WV7COL-WAVCOL+3
	.BYTE WV9COL-WAVCOL+3
	.BYTE WVACOL-WAVCOL+3
	.BYTE WVBCOL-WAVCOL+3
	.BYTE WVCCOL-WAVCOL+3
	.BYTE WV8COL-WAVCOL+3
WAVEND:
	.MACRO DBLCOL A,B,C,D,E,F,G,H
	.BYTE A*10+B,C*10+D,E*10+F,G*10+H
	.ENDR
WVBCOL:	DBLCOL CYELLO,CGREEN,CBLACK,CWHITE,CBLACK,CYELLO,CRED,CRED
WVCCOL:	DBLCOL CWHITE,CRED,CPURPL,CYELLO,CPURPL,CWHITE,CGREEN,CGREEN
WVDCOL:	DBLCOL CBLACK,CRED,CYELLO,CYELLO,0,CGREEN,CBLUE,CBLUE
WV1COL:	DBLCOL CBLACK,CYELLO,CRED,CBLUGR,CRED,CBLACK,CBLUE,CBLUE
WV5COL:	DBLCOL CBLACK,CYELLO,CGREEN,CBLUGR,CGREEN,CBLACK,CBLUE,CBLUE
WV6COL:	DBLCOL CBLACK,CBLUE,CRED,CYELLO,CRED,CPURPL,CGREEN,CGREEN
WV7COL:	DBLCOL CBLUE,CYELLO,CRED,CPURPL,CRED,CBLUE,CBLACK,CBLACK
WV8COL:	DBLCOL CRED,CYELLO,CBLACK,CGREEN,CBLACK,CRED,CBLUE,CBLUE
WV9COL:	DBLCOL CBLUGR,CYELLO,CRED,CBLACK,CRED,CBLUGR,CBLUE,CBLUE
WVACOL:	DBLCOL CPURPL,CGREEN,CBLACK,CBLACK,CPURPL,CBLUGR,CYELLO,CYELLO
;
;SKY,GROUND,ICBMS,CITY(BOTTOM),UNUSED,(FLASH),UNUSED(FLASH),ABMS,CITY(TOP)&ABMS
;
	.PAGE
	.SBTTL CLEAR SCREEN
CLRTOP:	LDA I,06
	LDX I,28
	BNE COMCLR
BLEWIT:	LDX I,3D
	LDA I,2
COMCLR:
	STA OLDPOS+1
	LDY I,0
	STY OLDPOS
	LDA I,BCKGND
	BEGIN
	BEGIN
	STA NY,OLDPOS
	INY
	EQEND
	INC OLDPOS+1
	DEX
	MIEND
	RTS
	.PAGE
	.SBTTL CONVERT AN ASCII VALUE TO ITS STAMP ADDRESS
;INPUT:	ACC=ASCII VALUE
;OUTPUT: STMPLO(2)=ADDRESS OF STAMP	;Y PRESERVED, X DESTROYED
ASCSTP:
	AND I,7F
	CMP I,41		;CHECK FOR A NUMBER OR A LETTER
	IFCS
	AND I,3F		;ITS A LETTER
	LDX I,2
	ELSE
	CMP I,3A
	IFCS
	JSR SPECAR		;SPECIAL CHAR 3A-40
	ELSE
	CMP I,30
	IFCC
	JSR SPECAR		;SPECIAL CHAR BELOW 30
	ELSE
	AND I,0F		;NUMBER
	LDX I,0
	THEN
	THEN
	THEN
	ASL			;X8
	ASL
	ASL
	CLC
	ADC AX,ITYPE		;ADD IN TABLE OFFSET
	STA STMPLO
	LDA AX,ITYPE+1
	ADC I,0
	STA STMPLO+1
	RTS
SPECAR:	LDX I,TABCHA-SPECHA-1
	BEGIN
	CMP AX,SPECHA
	IFEQ
	LDA AX,TABCHA		;CHAR FOUND
	LDX I,ISPECI-ITYPE
	RTS
	THEN
	DEX
	MIEND
	LDA I,0			;CHAR NOT FOUND
	LDX I,IBLANK-ITYPE	;DISPLAY BLANK
	RTS
SPECHA:	.BYTE 20,40,3A,3F,23,24,25	;ASCII VALUE
TABCHA:	.BYTE 0,8,9,0A,0B,0C,0D	;TABLE EQUIV
	.SBTTL MESSAGES
;FUNCTION:	DISPLAY A LITERAL ON THE SCREEN
;INPUT:		MESAGE=ADDRESS OF 1ST CHAR OF LITERAL INBA=EPAGE
;		       (LITERAL IS ASCII STRING, END WITH D7=1 ON LAST CHAR)
;		MSPOS =SCREEN COORDINATE AT WHICH TO DISPLAY 1ST CHAR
;		       (CENTER OF 1ST CHAR)
;		MSCOL =COLOR OF MESSAGE
;OUTPUT:	SCREEN UPDATED
;		ACC,X,Y DESTROYED
;		MSPOS POINTS TO NEXT AVAILABLE STAMP LOCATION
MESOUT:	LDY I,0
	BEGIN
	LDA NY,MESAGE		;LOAD IN CHARACTER TO OUTPUT
	STA FLAG		;SAVE IT
	JSR ASCSTP		;CONVERT ASCII TO STAMP LOC
	LDA MSPOS		;LOAD SCREEN ADDRESS OF MESSAGE
	STA NWSTMP
	LDA MSPOS+1
	STA NWSTMP+1
	TYA
	PHA			;SAVE INDEX
	JSR STMPOT		;OUTPUT CHARACTER
	LDA MGNFYH
	ASL
	ASL
	ASL
	CLC			;POINT TO SCREEN ADDRESS OF NEXT CHARACTER
	ADC MSPOS
	STA MSPOS
	PLA
	TAY
	INY			;BUMP TABLE POINTER
	LDA FLAG		;CHECK FOR DONE
	MIEND
	RTS
ITYPE:	.WORD NUMBER,LETTER-8
IBLANK:	.WORD BLKSTP
ISPECI:	.WORD SPECIC
	.PAGE
	.SBTTL SETUP MESSAGE POINTER
;INPUT:		Y=MESSAGE #
;		LITRAL=ADDRESS OF LANGUAGE TABLE
;OUTPUT:	MESAGE(2)=ADDRESS OF 1ST CHAR OF MESSAGE
;		MSPOS=HORIZ SCREEN LOC
LANGAG:
	LDA NY,LITRAL
	CPY I,ENGLISH*3
	IFCS			;MESSAGE ALWAYS ENGLISH?
	LDA AY,EMTBL		;YES
	STA MSPOS		;HORIZ SCREEN LOC
	LDA AY,EMTBL+1
	STA MESAGE		;MESSAGE ADDRESS
	LDA AY,EMTBL+2
	ELSE
	STA MSPOS		;NO. HORIZ SCREEN LOC
	INY
	LDA NY,LITRAL
	STA MESAGE		;MESSAGE ADDRESS
	INY
	LDA NY,LITRAL
	THEN
	STA MESAGE+1
	RTS
	.PAGE
	.SBTTL DISPLAY TABLE MESSAGE
;FUNCTION:	DISPLAYED TABLE MESSAGE
;INPUT:		ACC=MESSAGE CODE # (IF MINUS, ERASE MSG)
;		EMTBL:MESSAGE TABLE
;OUTPUT:	MESSAGE DISPLAYED ON SCREEN
;
DTABEL:	LDY I,0A0		;ERASE LINE
	BMI DTGEN
DTABER:	LDY I,80		;ENTRY TO ERASE MSG
	BMI DTGEN
DTABML:	LDY I,0			;WRITES OVER BKGD.
	BPL DTGEN
DTABMS:
	LDY I,-1		;LEAVES BKGD INTACT
DTGEN:	
	STY NOBKGD
	TAY
	LDA AY,MAGNIF		;HORIZ MAGNIFY
	AND I,0F
	STA MGNFYV		;VERT MAG
	LDA AY,MAGNIF
	LSR
	LSR
	LSR
	LSR
	STA MGNFYH
	LDA AY,VERCOR		;VERT SCREEN LOC
	STA MSPOS+1
	TYA
	STA MSPOS
	ASL
	CLC
	ADC MSPOS
	TAY			;MESSAGE # X 3
	JSR LANGAG		;SET PTR TO MSG.
	LDA I,MSCOL
	STA PATRN1
	LDA I,BCKGND
	STA PATRN0
	LDA NOBKGD
	CMP I,80
	IFEQ			;ERASE MSG?
	JMP ERAMSG
	THEN
	CMP I,0A0
	IFEQ			;ERASE LINE?
	JMP ERALIN		;YES
	THEN
	JMP MESOUT
LNGPTL:
	.WORD EMTBL
	.WORD FMTBL
	.WORD GMTBL
	.WORD SMTBL
	.PAGE
	.SBTTL DISPLAY 2 DIGIT #
;NUMOUT:	DISPLAY # ON SCREEN
;INPUTS:	A=# TO OUTPUT IN HEX
;		PATRN1=PATTERN FOR #
;		X,Y=SCREEN ADDRESS TO OUTPUT # AT
;OUTPUTS:	X,Y SAVED
;		SCREEN UPDATED
NUMOUT:	STX MSPOS
	STY MSPOS+1
NUMBRE:	STX SAVEX
	STY SAVEY
	STA RA
	CMP I,13
	IFCC
	CMP I,0A
	IFCS
	SEC
	SBC I,0A
	STA RA
	LDA I,1
	JSR NUMOT1
	THEN
	LDA RA
	ELSE
	LDA I,0FF
	THEN
	JSR NUMOT1
	LDX SAVEX
	LDY SAVEY
	RTS

NUMOT1:	CLC
	ADC I,1
	ASL
	ASL
	ASL
	CLC
	ADC A,IBLANK
	STA STMPLO
	LDA A,IBLANK+1
	ADC I,0
	STA STMPLO+1
	LDA MSPOS
	STA NWSTMP
	LDA MSPOS+1
	STA NWSTMP+1
	LDA I,BCKGND
	STA PATRN0
	LDA I,0
	STA NOBKGD
	JSR STMPX1
	LDA MSPOS
	CLC
	ADC I,8
	STA MSPOS
	RTS
	.PAGE
	.SBTTL DISPLAY 6 DIGITS
;DSPNUM
;FUNCTION:	DISPLAY 6 DECIMAL DIGITS WITH LEADING ZERO SUPPRESSION
;INPUTS:	TRIPLE - 3 BYTES OF BCD
;		X,Y=SCREEN ADDRESS TO OUTPUT AT
;		ACC=PATTERN FOR #
DSPNUM:	STX MSPOS
	STY MSPOS+1
	STA PATRN1
	LDX I,2
	LDY I,0
	STY FLAG
	BEGIN
	LDA ZX,TRIPLE
	LSR
	LSR
	LSR
	LSR
	JSR BLNKCK
	LDA ZX,TRIPLE
	CPX I,0
	IFEQ
	LDY I,0FF		;FORCE PRINTING OF LSB 0 IF # IS 0
	STY FLAG
	THEN
	AND I,0F
	JSR BLNKCK
	DEX
	MIEND
	RTS

BLNKCK:	IFNE			;NON ZERO
	STA FLAG		;SET FLAG TO OUTPUT 0'S
	ELSE			;ITS A ZERO
	LDA I,0
	LDY FLAG		;SHOULD I SUPPRESS?
	IFEQ
	LDA I,0FF		;YES
	THEN
	THEN
	JMP NUMBRE
	.PAGE
	.SBTTL ERASE A MESSAGE
;FUNCTION:	READ THE TITLE, YOU DIP SHIT!!!!
;INPUTS:	MESSAGE=ADDRESS OF ASCIN CODES FOR THE MESSAGE
;		MSPOS=CARTESIAN COORDS OF MESSAGE
;		BCKGND=BLANK COLOR
;OUTPUTS:	MESSAGE ERASED
;		A,X,Y,K,J ARE NUKED
;
ERALIN:	LDA I,4			;ERASE WHOLE LINE
	STA MSPOS
	LDY I,20
	BNE ERAGEN
ERAMSG:	LDY I,0FF
	BEGIN
	INY			;COUNT # OF CHARS TO BLANK
	LDA NY,MESAGE		;AT THE END OF MESSAGE?
	MIEND
	INY			
ERAGEN:	STY K
	ASL K
	DEC K
	LDA MSPOS
	SEC
	SBC I,4
	BIT COCKTA
	IFVS
	EOR I,0FF
	THEN
	STA MSPOS
	LDA MSPOS+1		;GET VERT COORDINATE
	EOR I,0FF		;CHANGE COORDINATE SYSTEMS
	SEC
	SBC I,4			;POINT TO TOP OF LETTER
	STA MSPOS+1
	LDA I,7			;HEIGHT OF LETTERS
	STA J			;SAVE IT
	LSR MSPOS+1
	ROR MSPOS
	LSR MSPOS+1
	ROR MSPOS
	BIT COCKTA
	IFVS			;FLIP?
	LDA MSPOS		;YES. START AT END
	SEC
	SBC K
	STA MSPOS
	THEN
	BEGIN
	LDY K			;RELOAD WIDTH
	BEGIN
	LDA I,BCKGND		;BLANK COLOR CODE
	STA NY,MSPOS		;WRITE 4 BLANK DOTS
	DEY
	MIEND
	LDA MSPOS
	CLC
	ADC I,40
	STA MSPOS
	IFCS
	INC MSPOS+1
	THEN
	DEC J			;DONE?
	MIEND
	RTS
	.PAGE
	.SBTTL PROCESS NEW CHARS ON SCROLL LINE
PRSCRO:				;1 ST MAKE SURE MSGS ARE UP TO DATE
	LDA I,0			;UNFLIP SCREEN
	STA PLAYUP
	LDA COCKTA
	AND I,COCMSK		;UNFLIP SCREEN
	STA COCKTA
	LDA $$CRDT
	CMP I,MAXCOI
	IFCS			;TOO MANY $?
	LDA I,MAXCOI		;YES. MAX OUT
	STA $$CRDT
	THEN
	SED			;HEX TO BCD
	STA K
	LDA I,0
	STA J
	LDY I,7
	BEGIN
	ASL K
	LDA J
	ADC J
	STA J
	DEY
	MIEND
	CLD
	LDA J
	CMP NUMCRE
	IFNE			;# OF CREDITS CHANGED?
	STA NUMCRE		;YES, REDO SCROLL AREA
	LDA $$CRDT
	IFNE			;ANY CREDITS?
	LDX I,YESCRE-MESDAT	;YES. SET UP LIST POINTER
	ELSE
	LDA OPTION		;NO. SET UP COIN MODE DESC
	AND I,03
	TAX
	LDA AX,CMOTAB
	STA SPMESA
	LDX I,NOCRED-MESDAT	;SET UP LIST POINTER
	THEN
	STX SCRTAB
	JSR SCRERA		;CLEAR OFF SCROLL AREA
	LDA I,0			;SET UP FOR 1ST CHAR IN 1ST MSG
	STA BETMES
	STA SCRCHA
	THEN
	LDA BETMES
	IFNE			;BETWEEN MESSAGES?
	DEC BETMES		;YES. DECREMENT BETWEEN MSG DOT COUNTER
	ELSE
	LDX SCRTAB		;NO.GET CURRENT MESSAGE INDEX
	LDA AX,MESTYP		;AND EXECUTE APPROPRIATE CHARACTER
	CMP I,MESAGN		;OUTPUT ROUTINE 1,2, OR 3
	IFEQ
	LDA AX,MESDAT		;1.GET MESSAGE # FROM TABEL & OUTPUT CHAR
	JSR DSCROM
	ELSE
	LDA AX,MESDAT		;TABLE CONTAINS A POINTER TO A BASE
	STA OLDPOS		;PAGE LOCATION HOLDING DESIRED DATA
	LDY I,0
	STY OLDPOS+1
	LDA NY,OLDPOS
	LDY AX,MESTYP
	CPY I,SPECIAL
	IFEQ
	JSR DSCROM		;2. OUTPUT CHAR. IN A MESSAGE
	ELSE
	JSR DSCRON		;3. OUTPUT CHAR IN A #
	THEN
	THEN
	LDA BETMES
	CMP I,-1		;DONE WITH MESSAGE OR # ?
	IFEQ
	LDX SCRTAB		;YES. BUMP POINTER TO NEXT MSG
	LDA AX,MESPAC		;SET UP # SPACES BETWEEN MSGS.
	STA BETMES
	INX			
	LDA AX,MESTYP
	CMP I,ENTABL
	IFEQ			;END OF LIST?
	LDA AX,MESDAT		;YES. RESET POINTER TO
	TAX			;BEGINNING OF LIST
	THEN
	STX SCRTAB
	THEN
	THEN
	RTS
CMOTAB:	.BYTE MFREEP,M2GP1C,M1GP1C,M1GP2C
ATRMSG:	LDA I,-1		;INITIALIZE # CREDITS TO IMPOSSIBLE
	STA NUMCRE		;VALUE TO INSTIGATE A CHANGE
	RTS
	.PAGE
	.SBTTL SCROLL MESSAGE TABLE
				;MESSAGE
MESDAT:
YESCRE:	.BYTE MPRESS		;"PRESS START"
	.BYTE MCREDI		; "CREDITS"
	.BYTE NUMCRE		;# OF CREDITS
	.BYTE MCOPYR
	.BYTE YESCRE-MESDAT	;INDEX TO TOP OF LIST
NOCRED:
	.BYTE MGAMOV		;"GAME OVER"
	.BYTE MINSER		;"INSERT COINS"
	.BYTE SPMESA		;COIN MODE
	.BYTE MCOPYR
	.BYTE NOCRED-MESDAT	;INDEX TO TOP OF LIST
MESTYP:				;MESSAGE TYPE
	.BYTE MESAGN		;MESSAGE #
	.BYTE MESAGN		;MESSAGE #
	.BYTE NUM2DI		;2 DIGIT # LOC.
	.BYTE MESAGN
	.BYTE ENTABL		;END OF
	
	.BYTE MESAGN		;MESSAGE #
	.BYTE MESAGN		;MESSAGE #
	.BYTE SPECIAL		;SPECIAL MESSAGE # LOC
	.BYTE MESAGN
	.BYTE ENTABL	
MESPAC:	.BYTE 20,8,20,20,20		;SPACE AFTER MSG.
	.BYTE 20,20,20,20,20
	.PAGE
	.SBTTL DISPLAY 1 OF 2 DIGITS IN LOWER RIGHT CORNER OF SCREEN
;INPUT:	ACC=# TO DISPLAY
;	SCRCHA=0 OR 1 INDICATING 1ST OR 2ND DIGIT BE DISPLAY
;OUTPUT:SCRCHA UNPDATED
;	BETMES=-1 IF LAST DIGIT WAS OUTPUT
;	DIGIT OUTPUT
;
DSCRON:
	LDY SCRCHA
	IFNE			;1ST OR 2ND DIGIT?
	LDY I,-1		;2ND DIGIT. SINGLE LAST DIGIT
	STY BETMES
	INY
	STY SCRCHA		;RESET CHAR IN MSG POINTER
	ELSE
	LDY I,7			;SPACES BETWEEN CHARS
	STY BETMES
	INC SCRCHA
	LSR			;1ST DIGIT. MOVE IT DOWN
	LSR
	LSR
	LSR
	IFEQ
	LDA I,-1		;SUPPRESS LEADING ZERO
	THEN
	THEN
	AND I,0F
	CMP I,10.		;DONT DISPLAY IF NOT 0-9
	IFCC
	CLC			;# OK
	ADC I,30		;CONVERT TO ASCII
	JSR SCROST		;DISPLAY IT
	THEN
	RTS
	.PAGE
	.SBTTL DISPLAY NTH CHARACTER IN A MSG ON LOWER SCRREN CORNER
;DSCROM: OUTPUT A CHARACTER IN A MESSAGE AT THE LOWER RIGHT
;	CORNER OF THE SCREEN
;INPUT:	SCRCHA=CHARACTER#
;	ACC=MESSAGE #
;OUTPUT:CHARACTER DISPLAY IN LOWER RIGHT CORNER OF SCREEN
;	BETMES=-1 IF IT WAS LAST CHAR IN MESSAGE
;
DSCROM:
	STA MESAGE
	ASL
	CLC
	ADC MESAGE
	TAY			;CODE X3
	JSR LANGAG		;SETUP PTR TO MSG
	LDY SCRCHA		;CHAR # IN MSG
	INC SCRCHA		;POINT TO NEXT CHAR
	LDA I,7
	STA BETMES
	LDA NY,MESAGE		;GET NTH CHAR
	IFMI			;LAST CHAR?
	LDY I,-1		;YES. SET LAST CHAR FLAG
	STY BETMES
	INY
	STY SCRCHA		;RESET CHAR IN MSG POINTER
	THEN
	.PAGE
	.SBTTL OUTPUT AN ASCII STAMP TO LOWER RIGHT CORNER
;INPUT:ACC=ASCII VALUE TO BE OUTPUT
;
SCROST:			;OUTPUT A STAMP IN LOWER RIGHT CORNER
	JSR ASCSTP		;CONVERT ASCII TO A STAMP ADDRESS
	LDA I,252.		;COORINDATS OF CENTER OF STAMP IN
	STA NWSTMP		;LOWER RIGHT CORNER
	LDA I,3
	STA NWSTMP+1
	LDA I,0			;WIPE OUT OLD BACKGROUND
	STA NOBKGD
	LDA I,BCKGND		;MESSAGE PATTERN
	STA PATRN1
	LDA I,LNDCOL		;LAND IS BACKGROUND
	STA PATRN0
	JMP STMPX1
	.SBTTL CLEAR OFF SCROLL AREA
SCRERA:
	LDY I,0
	LDA I,0FF
	BEGIN	;CLEAR OFF SCROLL AREA
	STA AY,401
	STA AY,501
	INY
	INY
	EQEND
	RTS
	.PAGE
	.SBTTL MAGNIFICATION TABLE
;
;
;D7-D4=HORIZ SIZE ;D3-D0=VERT SIZE
;
MAGNIF:	.BYTE 11
	.BYTE 11
	.BYTE 11
	.BYTE 11
	.BYTE 11
	.BYTE 11
	.BYTE 11
	.BYTE 11
	.BYTE 3A
	.BYTE 21
	.BYTE 11
	.BYTE 11
	.BYTE 11
	.BYTE 11
	.BYTE 11
	.BYTE 11
	.BYTE 11
	.BYTE 11
	.BYTE 11
	.BYTE 11
	.BYTE 11
	.BYTE 11
	.BYTE 11
	.BYTE 11
	.BYTE 11
	.BYTE 11
	.BYTE 11
	.BYTE 11
	.BYTE 44
	.BYTE 44
	.BYTE 11
	.BYTE 11
	.BYTE 11
	.BYTE 11
	.BYTE 11
	.BYTE 11
	.BYTE 11
	.BYTE 11
	.BYTE 11
	.BYTE 11
	.PAGE
	.SBTTL VERTICAL COORDINATES
;
;
;
;
VERCOR:	.BYTE 90
	.BYTE 0C0
	.BYTE 3
	.BYTE 3
	.BYTE 3
	.BYTE 40
	.BYTE 70
	.BYTE 0A0
	.BYTE 0A0
	.BYTE 80
	.BYTE VCMODE
	.BYTE VCMODE
	.BYTE VCMODE
	.BYTE 3
	.BYTE 0A0
	.BYTE 3
	.BYTE 3
	.BYTE 3
	.BYTE 70
	.BYTE 60
	.BYTE 50
	.BYTE 38
	.BYTE 3
	.BYTE 3
	.BYTE 3
	.BYTE VBONIN
	.BYTE VBONIN
	.BYTE VBONIN
	.BYTE 0A0
	.BYTE 70
	.BYTE 3
	.BYTE 70
	.BYTE 90
	.BYTE 70
	.BYTE 90
	.BYTE 80
	.BYTE 80
	.BYTE VCMODE
	.BYTE 30
	.BYTE 80
QCHKS7:	.BYTE CHKSM7
	.PAGE
	.SBTTL FRENCH LITERALS
	.MACRO 	FMAC HORIZ, LOC
	.BYTE HORIZ		;CARTESIAN
	.WORD LOC
	.ENDM
FMTBL:	FMAC 60,FPLAYR
	FMAC 48,FHISCR
	FMAC 6,FGAMOV
	FMAC 90,FPRESS
	FMAC 78,FINSER
	FMAC 5C,FBONUS
	FMAC 68,FICBPTS
	FMAC 50,FABMPTS
	FMAC 60,FTHEEND
	FMAC 10,FYOUR
	FMAC 78,F2GP1C
	FMAC 78,F1GP1C
	FMAC 78,F1GP2C
	FMAC 0B0,FCREDI
	FMAC 54,FGAMOV
	FMAC 4,FEMPTY
	FMAC 70,FEMPTY
	FMAC 0E4,FEMPTY
	FMAC 24,FPLEAS
	FMAC 4,FTOCHG
	FMAC 4,FPRDLT
	FMAC 34,FDEFEN
	FMAC MISB1H-8,FLOW
	FMAC MISB2H-7,FLOW
	FMAC MISB3H-8,FLOW
	FMAC 78,FEVERY
	FMAC 0C8,FPOINTS
	FMAC 18,FBONUS
	.PAGE
	.SBTTL GERMAN LITERALS
	.MACRO GMAC HORIZ, LOC
	.BYTE HORIZ		;CARTESIAN
	.WORD LOC
	.ENDM
GMTBL:	GMAC 54,GPLAYR
	GMAC 44,GHISCR
	GMAC 6,GGAMOV
	GMAC 90,GPRESS
	GMAC 78,GINSER
	GMAC 5C,GBONUS
	GMAC 68,GICBPTS
	GMAC 58,GABMPTS
	GMAC 54,GTHEEND
	GMAC 3C,GYOUR
	GMAC 78,G2GP1C
	GMAC 78,G1GP1C
	GMAC 78,G1GP2C
	GMAC 0B0,GCREDI
	GMAC 58,GGAMOV
	GMAC 4,GEMPTY
	GMAC 70,GEMPTY
	GMAC 0E4,GEMPTY
	GMAC 14,GPLEAS
	GMAC 4,GTOCHG
	GMAC 4,GPRDLT
	GMAC 30,GDEFEN
	GMAC 4,GLOW
	GMAC 6C,GLOW
	GMAC 0DC,GLOW
	GMAC 70,GEVERY
	GMAC 0C8,GPOINTS
	GMAC 18,GBONUS
	.PAGE
	.SBTTL SPANISH LITERALS
	.MACRO SMAC HORIZ, LOC
	.BYTE HORIZ		;CARTESIAN
	.WORD LOC
	.ENDM
SMTBL:	SMAC 5C,SPLAYR
	SMAC 64,SHISCR
	SMAC 6,SGAMOV
	SMAC 90,SPRESS
	SMAC 78,SINSER
	SMAC 5C,SBONUS
	SMAC 68,SICBPTS
	SMAC 30,SABMPTS
	SMAC 60,STHEEND
	SMAC 24,SYOUR
	SMAC 78,S2GP1C
	SMAC 78,S1GP1C
	SMAC 78,S1GP2C
	SMAC 0B0,SCREDI
	SMAC 48,SGAMOV
	SMAC MISB1H-08,SEMPTY
	SMAC MISB2H-07,SEMPTY
	SMAC MISB3H-8,SEMPTY
	SMAC 38,SPLEAS
	SMAC 4,STOCHG
	SMAC 4,SPRDLT
	SMAC 30,SDEFEN
	SMAC 4,SLOW
	SMAC 70,SLOW
	SMAC 0E4,SLOW
	SMAC 70,SEVERY
	SMAC 0C8,SPOINTS
	SMAC 08,SBONUS
	.PAGE
	.SBTTL ENGLISH LITERALS
	.MACRO EMAC HORIZ, LOC
	.BYTE HORIZ		;CARTESIAN
	.WORD LOC
	.ENDM
EMTBL:	EMAC 60,EPLAYR
	EMAC 54,EHISCR
	EMAC 6,EGAMOV
	EMAC 90,EPRESS
	EMAC 78,EINSER
	EMAC 5C,EBONUS
	EMAC 68,EICBPTS
	EMAC 50,EABMPTS
	EMAC 36,ETHEEND
	EMAC 2C,EYOUR
	EMAC 78,E2GP1C
	EMAC 78,E1GP1C
	EMAC 78,E1GP2C
	EMAC 0B0,ECREDI
	EMAC 5C,EGAMOV
	EMAC MISB1H-08,EEMPTY
	EMAC MISB2H-07,EEMPTY
	EMAC MISB3H-8,EEMPTY
	EMAC 38,EPLEAS
	EMAC 4,ETOCHG
	EMAC 4,EPRDLT
	EMAC 38,EDEFEN
	EMAC MISB1H-8,ELOW
	EMAC MISB2H-7,ELOW
	EMAC MISB3H-8,ELOW
	EMAC 68,EEVERY
	EMAC 0C8,EPOINTS
	EMAC 10,EBONUS
	EMAC 20,EMISIL
	EMAC 20,ECOMAN
	EMAC 50,ECOPYR
	EMAC 5C,ERAMOK
	EMAC 5C,EROMOK
	EMAC 5C,EBDRAM
	EMAC 5C,EBDROM
	EMAC 5C,EBADMA
	EMAC 5C,EMAPOK
	EMAC 78,EFREEP
	EMAC 88,ECITIES
	EMAC 10,EBDPOK
	.PAGE
	.SBTTL ENGLISH LITERALS
EPLAYR:	.ASCIN /PLAYER/
EGAMOV:	.ASCIN /GAME OVER/
EPRESS:	.ASCIN /PRESS START/
EINSERT:.ASCIN /INSERT COINS/
EBONUS:	.ASCIN /BONUS CITY/

EABMPTS:.ASCIN /BONUS POINTS/
ETHEEND:.ASCIN /THE END/
E2GP1C:	.ASCIN /1 COIN 2 PLAYS/
E1GP1C:	.ASCIN /1 COIN 1 PLAY/
E1GP2C:	.ASCIN /2 COINS 1 PLAY/
FCREDI:
ECREDI:	.ASCIN	/CREDITS:/
ERAMOK:	.ASCIN	/RAM OK/
EROMOK:	.ASCIN	/ROM OK/
EBDRAM:	.ASCIN	/BAD RAM/
EBDROM:	.ASCIN	/BAD ROM/
EBDPOK:	.ASCIN	/BAD CHIP/
EYOUR:	.ASCIN	/GREAT SCORE/
EPLEAS:	.ASCIN	/ENTER YOUR INITIALS/
ETOCHG:	.ASCIN	/SPIN BALL TO CHANGE LETTERS/
EPRDLT:	.ASCIN	/PRESS ANY FIRE SWITCH TO SELECT/
EHISCR:	.ASCIN	/HIGH SCORES/
EDEFEN:	.ASCII	/DEFEND       /
ECITIES:.ASCIN	/CITIES/
ELOW:	.ASCIN	/LOW/
EMAPOK:	.ASCIN	/MAP OK/
EBADMA:	.ASCIN	/BAD MAP/
EEMPTY:	.ASCIN	/OUT/
ECOPYR:	.ASCIN	/ATARI @? 1980/
EMISIL:	.ASCIN	/MISSILE/
ECOMAN:	.ASCIN	/COMMAND/
EEVERY:	.ASCIN	/EVERY/
EFREEP:	.ASCIN	/FREE PLAY/
	.PAGE
	.SBTTL FRENCH LITERALS

FPLAYR:	.ASCIN	/JOUEUR/
FGAMOV:	.ASCIN	/FIN DE PARTIE/
FPRESS:	.ASCIN	/APPUYER SUR START/
FINSERT:.ASCIN	/INTRODUIRE LES PIECES/
FBONUS:	.ASCIN	/BONUS VILLE/
FABMPTS:.ASCIN	/BONUS POINTS/
EICBPTS:
FICBPTS:.ASCII	/X /
EPOINTS:
FPOINTS:.ASCIN	/POINTS/
STHEEND:
FTHEEND:.ASCIN	/FIN/
F2GP1C:	.ASCIN	/1 PIECE 2 JOUEURS/
F1GP1C:	.ASCIN	/1 PIECE 1 JOUEUR/
F1GP2C:	.ASCIN	/2 PIECES 1 JOUEUR/
FYOUR:	.ASCIN	/SPLENDIDE SCORE/
FPLEAS:	.ASCIN	/SVP ENTREZ VOS INITIALES/
FTOCHG:	.ASCIN	/ROTATIONS POUR CHANGEMENT/
FPRDLT:	.ASCIN	/POUSSEZ FEU QUAND CORRECTE/
FHISCR:	.ASCIN	/MEILLEUR SCORE/
FDEFEN:	.ASCIN	/DEFENSES      VILLE/
FLOW:	.ASCIN	/BAS/
FEMPTY:	.ASCIN	/VIDE/
FEVERY:	.ASCIN	/PAR/
	.PAGE
	.SBTTL GERMAN LITERALS

GPLAYR:	.ASCIN	/SPIELER/
GGAMOV:	.ASCIN	/SPIELENDE/
GPRESS:	.ASCIN	/STARTKN$PFE DR%CKEN/
GINSERT:.ASCIN	/GELD EINWERFEN/
GBONUS:	.ASCIN	/BONUSSTADT/
GABMPTS:.ASCIN	/BONUSPUNKTE/
GICBPTS:.ASCII	/X /
GPOINTS:.ASCIN	/PUNKTE/
GTHEEND:.ASCIN	/ENDE/
G2GP1C:	.ASCIN	/1 M%NZ 2 SPIELE/
G1GP1C:	.ASCIN	/1 M%NZE 1 SPIEL/
G1GP2C:	.ASCIN	/2 M%NZEN 1 SPIEL/
GCREDI:	.ASCIN /KREDITE:/
GYOUR:	.ASCIN	/GROSSARTIGES ERGEBNIS/
GPLEAS:	.ASCIN	/GEBEN SIE IHRE INITIALEN EIN/
GTOCHG:	.ASCIN	/BALL DREHEN F%R ALLE BUCHSTABEN/
GPRDLT:	.ASCIN	/FIRE DR%CKEN WENN RICHTIG/
GHISCR:	.ASCIN	/H$CHSTERGEBNIS/
GDEFEN:	.ASCIN	/ST#DTE     VERTEIDIGEN/
GLOW:	.ASCIN	/WENIG/
GEMPTY:	.ASCIN	/LEER/
GEVERY:	.ASCIN	/JEDE/
	.PAGE
	.SBTTL SPANISH LITERALS

SPLAYR:	.ASCIN	/JUGADOR/
SGAMOV:	.ASCIN	/JUEGO TERMINADO/
SPRESS:	.ASCIN	/PULSAR START/
SINSERT:.ASCIN	/INSERTE FICHAS/
SBONUS:	.ASCIN	/CIUDAD EXTRA/
SABMPTS:.ASCIN	/BONIFICACION DE PUNTOS/
SICBPTS:.ASCII	/X /
SPOINTS:.ASCIN	/PUNTOS/
S2GP1C:	.ASCIN	/1 MONEDA 2 JUEGOS/
S1GP1C:	.ASCIN	/1 MONEDA 1 JUEGO/
S1GP2C:	.ASCIN	/2 MONEDAS 1 JUEGO/
SCREDI:	.ASCIN /CREDITOS:/
SYOUR:	.ASCIN	/GRAN PUNTAJE/
SPLEAS:	.ASCIN	/ENTRE SUS INICIALES/
STOCHG:	.ASCIN	/GIRE LA BOLA PARA CAMBIAR LETRAS/
SPRDLT:	.ASCIN	/OPRIMA FIRE POR LA LETRA/
SHISCR:	.ASCIN	/RECORDS/
SDEFEN:	.ASCIN	/DEFIENDA     CIUDADES/
SLOW:	.ASCIN	/POCO/
SEMPTY:	.ASCIN	/SIN/
SEVERY:.ASCIN	/CADA/
	.MACRO BUMP A,B,C,D,E,F,G,H
	.BYTE H,G,F,E,D,C,B,A
	.ENDM
BLKSTP:	BUMP 0,0,0,0,0,0,0,0	;BLANK
NUMBER:
	BUMP 000,038,044,0C6,0C6,0C6,044,038	;"0" (ZERO)
	BUMP 000,030,070,030,030,030,030,0FC	; 1
	BUMP 000,07C,0C6,00E,03C,078,0E0,0FE	; 2
	BUMP 000,07E,00C,018,03C,006,0C6,07C	; 3
	BUMP 000,01C,03C,06C,0CC,0FE,00C,00C	; 4
	BUMP 000,0FC,0C0,0FC,006,006,0C6,07C	; 5
	BUMP 000,03C,060,0C0,0FC,0C6,0C6,07C	; 6
	BUMP 000,0FE,0C6,00C,018,030,030,030	; 7
	BUMP 000,078,0C4,0E4,078,09E,086,07C	; 8
	BUMP 000,07C,0C6,0C6,07E,006,00C,078	; 9 (NINE) 
LETTER:	BUMP 000,038,06C,0C6,0C6,0FE,0C6,0C6	; "A"
	BUMP 000,0FC,0C6,0C6,0FC,0C6,0C6,0FC	; B
	BUMP 000,03C,066,0C0,0C0,0C0,066,03C	; C
	BUMP 000,0F8,0CC,0C6,0C6,0C6,0CC,0F8	; D
	BUMP 000,0FC,0C0,0C0,0F8,0C0,0C0,0FC	; E
	BUMP 000,0FE,0C0,0C0,0FC,0C0,0C0,0C0	; F
	BUMP 000,03E,060,0C0,0CE,0C6,066,03E	; G
	BUMP 000,0C6,0C6,0C6,0FE,0C6,0C6,0C6	; H
	BUMP 000,0FC,030,030,030,030,030,0FC	; I
	BUMP 000,006,006,006,006,006,0C6,07C	; J
	BUMP 000,0C6,0CC,0D8,0F0,0F8,0DC,0CE	; K
	BUMP 000,0C0,0C0,0C0,0C0,0C0,0C0,0FC	; L
	BUMP 000,0C6,0EE,0FE,0FE,0D6,0C6,0C6	; M
	BUMP 000,0C6,0E6,0F6,0FE,0DE,0CE,0C6	; N
	BUMP 000,07C,0C6,0C6,0C6,0C6,0C6,07C	; O
	BUMP 000,0FC,0C6,0C6,0C6,0FC,0C0,0C0	; P
	BUMP 000,07C,0C6,0C6,0C6,0DE,0CC,07A	; Q
	BUMP 000,0FC,0C6,0C6,0CE,0F8,0DC,0CE	; R
	BUMP 000,07C,0C6,0C0,07C,006,0C6,07C	; S
	BUMP 000,0FC,030,030,030,030,030,030	; T
	BUMP 000,0C6,0C6,0C6,0C6,0C6,0C6,07C	; U
	BUMP 000,0C6,0C6,0C6,0EE,06C,038,010	; V
	BUMP 000,0C6,0C6,0D6,0FE,0FE,0EE,0C6	; W
	BUMP 00,0C6,0EE,7C,38,7C,0EE,0C6	; X
	BUMP 000,0CC,0CC,0CC,078,030,030,030	; Y
	BUMP 000,0FE,00E,01C,038,070,0E0,0FE	; Z
SPECIC:
	BUMP 0,0,0,0,0,0,0,0			;ANOTHER BLANK
	BUMP 3C,3C,0BD,0FF,0FF,7E,3C,18	;DOWN ARROW
	.BYTE 7F,0FF,7F,7E,34,30,20,0	;CITY
	.BYTE 7C,37,25,0,0,0,0,0
	.BYTE 0FE,0FF,0FE,0FE,0FA,50,10,10
	.BYTE 3E,6C,0C8,0C0,80,0,0,0
	.BYTE 1C,38,7F,0FF,0FF,7F,38,1C	;LEFT ARROW
	.BYTE 38,1C,0FE,0FF,0FF,0FE,1C,38	;RIGHT ARROW
	BUMP 0,3C,42,99,91,99,42,3C	;COPYRIGHT SYMBOL=C
	BUMP 0,0,0,30,30,0,30,30	;COLON
	BUMP 0,3C,42,9D,95,9D,52,3C	;CIRCLE P=?
	BUMP 0,44,10,38,6C,0C6,0FE,0C6	;UMLAUT A=#
	BUMP 0,28,0,7C,0C6,0C6,0C6,7C	;UMLAUT O=$
	BUMP 0,28,0,0C6,0C6,0C6,0C6,7C	;UMLAUT U=%
	.PAGE
	.SBTTL BONUS CITY INTERVAL MESSAGE

BONCIT:
	LDA OPTIO2
	AND I,BONMSK
	CMP I,BONMSK
	IFNE			;BONUS CITIES?
	LDA I,MBONIN		;YES. "BONUS CITY"
	JSR DTABML
	LDA I,MEVERY		;"EVERY"
	JSR DTABML
	LDA I,MPOINTS		;"POINTS"
	JSR DTABML
	LDA I,0
	STA TRIPLE
	LDA OPTIO2
	AND I,BONMSK
	LSR
	LSR
	LSR
	TAX
	LDA AX,BONINL
	STA TRIPLE+1
	LDA AX,BONINH
	STA TRIPLE+2		;SET UP INTERVAL
	LDX I,90		;HORIZ
	LDY I,VBONIN		;VERT
	LDA I,REDMIS		;COLOR
	JSR DSPNUM		;DISPLAY #
	THEN
	RTS
	.PAGE
	.PAGE
	.SBTTL INITIALIZE HIGH SCORE TABLE
INIINI:
	LDX I,14.
	BEGIN
	LDA AX,STRINI
	STA ZX,INITAL
	LDA AX,SCOINI
	STA ZX,HSCORL
	DEX
	MIEND
	RTS
STRINI:	.ASCIN /MJPRDASRCDLSDFT /
SCOINI:	.BYTE 50,69,0,05,70,0,30,73,0,95,74,0,0,75,0
	.SBTTL DISPLAY TOP SCORE AT TOP OF SCREEN

DSPHI:	LDA HSCORL+<3*4>	;MOVE BEST TO DISPLAY BUCKET
	STA TRIPLE
	LDA HSCORM+<3*4>
	STA TRIPLE+1
	LDA HSCORH+<3*4>
	STA TRIPLE+2
	LDX I,064		;COORDINATES
	LDY I,STOPLI
	LDA I,REDMIS		;COLOR
	JSR DSPNUM
	JMP DSPSCO		;DISPLAY SCORES (L&R)
QCHKS9:	.BYTE CHKSM9
	.PAGE
	.SBTTL UPDATE HIGH SCORE LADDER
NUHICK:
	JSR CLEARI		;CLEAR OUT OLD FLAGS
	LDA ATRACT
	IFEQ			;ATTRACT?
	LDY I,CDLADR		;YES. DISP LADDER
	STY SETUPC
	ELSE
	LDX I,1			;NO START WITH PLAYER 2
	STX ICBTOL		;INTIALIZE HI SCORE FLAG TO "NOT HI"
	BEGIN			;LOOP FOR EACH PLAYER
	LDY I,3*4		;START AT BOTTOM OF LADDER-LO SCORES
	BEGIN
	LDA AY,HSCORH
	CMP AX,LSCORH		;COMPARE HI 2 DIGITS
	IFEQ			;THEY'RE EQUAL CHECK NEXT BYTES
	LDA AY,HSCORM
	CMP AX,LSCORM
	IFEQ			;THIS GUY IS RELENTLESS
	LDA AY,HSCORL
	CMP AX,LSCORL
	THEN
	THEN
	IFCC
	JSR NEWHI		;HE DIDN'T MAKE IT BY MUCH
	THEN
	DEY
	DEY
	DEY			;POINT TO NEXT HI SCORE
	MIEND			;DONE WITH THIS GUY
	DEX
	MIEND			;DONE WITH BOTH
	JSR ATRMSG		;PREPARE SCROLLER
	LDA ICBTOL		;NEW HI SCORE FOUND?
	IFMI
	JSR SETCOL		;DISPLAY COLORS
	JSR INTLDR		;YES TELL SETUP STATE TO
	ELSE			;SEARCH FOR NEW INITALS SLOT
	LDY I,CENDG1		;NO END BANG.
	STY SETUPC
	THEN
	THEN
	RTS
	.PAGE
	.SBTTL INSERT SCORES + INITIALS ON LADDER
;INPUT: Y=INDEX INTO HSCORE OF BEATEN SCORE
;	X=PLAYER ID (0 OR 1)
NEWHI:				;SAVE HEIGHT OF NEW HI SCORE
	STY J			;ON LADDER
	LDY I,0			;START SEARCHING AT BOTTOM OF LADDER
	BEGIN
	CPY J			;THERE YET?
	IFEQ			;YES
	LDA AX,LSCORH		;MOVE HIM ONTO IT THEN
	STA AY,HSCORH
	LDA AX,LSCORM
	STA AY,HSCORM
	LDA AX,LSCORL
	STA AY,HSCORL
	INX			;MAKE INDEX=TO PLAYER #
	TXA
	DEX
	STA AY,INITAL		;MARK INITIAL SLOT TO NEW ENTRY
	LDA I,26.+41		;STORE BLANKS IN OTHER  2 SLOTS
	STA AY,INITAL+1
	STA AY,INITAL+2
	LDY I,0			;TELL NUHICK DONE WITH THIS PLAYER
	LDA I,0FF
	STA ICBTOL		;FLAG FOR FOUND NEW HIGH
	RTS
	THEN
	LDA AY,HSCORH+3		;MOVE THIS SCORE DOWN ONE
	STA AY,HSCORH		;RUNG ON LADDER
	LDA AY,HSCORM+3
	STA AY,HSCORM
	LDA AY,HSCORL+3
	STA AY,HSCORL
	LDA AY,INITAL+5		;MOVE INITIALS DOWN 1 RUNG
	STA AY,INITAL+2
	LDA AY,INITAL+4
	STA AY,INITAL+1
	LDA AY,INITAL+3
	STA AY,INITAL
	INY
	INY
	INY
	MIEND			;ALWAYS BRANCH
	RTS
	.PAGE
	.SBTTL SEARCH FOR NEW ENTRY ON LADDER
	
INTLDR:	LDY I,3*4
	BEGIN
	LDA AY,INITAL		;GET INITIAL
	IFNE			;IS IT A NEW ENTRY?
	CMP I,3
	IFCC			;YES
	STA PLAYUP		;MAKE A PLAYER # OUT OF IT
	DEC PLAYUP
	STY UCHTAB		;SAVE POINTER
	JSR CLRTOP		;CLEAR TOP OF SCREEN
	LDA I,CGETIN		;DISPLAY INSTRUCTIONS
	STA SETUPC
	JSR INILIT		;FLIP SCREEN FOR PLAYER
	JSR DPLANO		;"PLAYER X"
	JSR ARROW		;PLAYER ARROW
	JSR DSPHI		;DISPLAY SCORES (L,R & HI)
	LDA I,MYOUR
	JSR DTABML
	LDA I,MPLEAS
	JSR DTABML
	LDA I,MTOCHG
	JSR DTABML
	LDA I,MPRDLT
	JSR DTABML
	LDA I,0FF		;GIVE EM 60 SECONDS
	STA UCVTAB
	LDX I,0			;INITIAL CODE STARTSAT "A"
	STX CRCPHH
	STX FIRESW		;CLEAR INITIAL SWITCHES
	LDA I,2			;INITIAL COUNTER
	STA OLDCPV
	LDA I,CGETIN		;TELL SETUP TO GET INITIALS
	STA SETUPC
	RTS
	THEN
	THEN
	DEY
	DEY
	DEY
	MIEND
ABORT:	JSR CLRTOP		;CLEAR TOP OF SCREEN
	LDA I,0
	STA PLAYUP
	LDA COCKTA
	AND I,COCMSK		;UNFLIP SCREEN
	STA COCKTA
	LDA I,CDLADR
	STA SETUPC
	RTS
INTLHS:	.BYTE 82,78,6E		;HORIZ COORD OF 3 INITIALS BEING ENTERED
	.PAGE
	.SBTTL TAKE INITIALS FOR NEW HIGH SCORE
;INPUT:ATRACB=INDEX INTO INITIAL ARRAY
GETINI:
	LDA SWSTAT
	EOR I,0FF
	AND I,MSTRT1!MSTRT2
	BNE ABORT		;ABORT IF EITHER START SWITCH PRESS
	LDA FRAME
	AND I,0F
	IFEQ
	DEC UCVTAB
	IFEQ			;TOO MUCH TIME?
	JMP ABORT		;YES. ABORT INITIALS
	THEN
	THEN
	LDX I,0			;NO X=0 FORCES ADCURS TO WORK ON HORIZ
	LDA TBHD		;GET HORIZ DISPLACEMENT
	STX TBHD		;0	"	"
	CLC
	ADC TBVD
	STX TBVD
	ASL
	ASL
	IFMI
	DEC CRCPHH
	THEN
	CLC
	ADC CRCPHL
	STA CRCPHL
	LDA I,0
	ADC CRCPHH
	IFMI
	LDA I,26.
	ELSE
	CMP I,27.
	IFCS
	LDA I,0
	THEN
	THEN
	STA CRCPHH		;SAVE INITIAL CODE
	LDY OLDCPV		;LOAD INITIAL # (0 -> 2)
	LDA AY,INTLHS		;HORIZ DISPLAY LOC
	STA MESAGE
	LDA I,INTLV		;VERT. LOC
	STA MESAGE+1
	LDA CRCPHH
	CLC
	ADC I,41
	JSR LETOUT
	LDA FIRESW
	AND I,ALLFIR		;LOOK AT ANY FIRE SWITCH
	IFNE
	LDA CRCPHH
	CLC
	ADC I,41		;ADD IN ASCII OFFSET
	LDY UCHTAB
	STA AY,INITAL
	INC UCHTAB		;POINT TO NEXT INITAL SLOT ON LADDER
	LDA I,84		;RESET TIMEOUT TO 30 SEC
	STA UCVTAB
	LDX I,0
	STX FIRESW		;SET SWITCH TO READ AGAIN
	STX CRCPHH
	DEC OLDCPV		;ONE LESS LETTER TO GO
	IFMI
	JSR INTLDR
	THEN
	THEN
	RTS
	.PAGE
	.SBTTL DISPLAY A LETTER
;INPUT:ACC=ASCII VALUE OF LETTER TO DISPLAY
;      MESAGE(2) POS OF CHAR TO DISPLAY
LETOUT:	STY SAVEY		;SAVE REGISTERS
	STX SAVEX
	JSR ASCSTP		;GET ADDRESS OF LOOK UP DATA
	LDA MESAGE		;SET UP SCREEN COORDINATES
	STA NWSTMP
	LDA MESAGE+1
	STA NWSTMP+1
	LDA I,0			;ERASE BACKGROUND
	STA NOBKGD
	LDA I,REDMIS		;SET UP COLORS
	STA PATRN1
	LDA I,BCKGND
	STA PATRN0
	JSR STMPX1		;OUTPUT LETTER
	LDA MESAGE		;POINT TO COORDINATE OF
	CLC			;NEXT INITIAL
	ADC I,0A
	STA MESAGE
	LDX SAVEX		;RESTORE REGS+RETURN
	LDY SAVEY
	RTS
	.SBTTL CLEAR OUT FLAGS
CLEARI:	LDY I,3*4
	BEGIN			;LOOP FOR 5 SETS OF TRI-INITIALS
	LDA AY,INITAL
	IFNE
	CMP I,3			;IS IT INITIALS OR PLAYER #?
	IFCC			
	LDA I,26.+41		;PLAYER # STORE 3 BLANKS THERE
	STA AY,INITAL
	STA AY,INITAL+1
	STA AY,INITAL+2
	THEN
	THEN
	DEY
	DEY
	DEY
	MIEND
	RTS
	.PAGE
	.SBTTL DISPLAY HIGH SCORES TABLE
DSPHSC:
	JSR CLRTOP		;CLEAR TOP OF SCREEN
	LDA I,0			;MAKE SURE SCREEN IS UNFLIPPED
	STA PLAYUP		;AND DISPLAY IS FOR 1ST PLAYER
	STA ATRACT
	STA NUMPLA
	LDA COCKTA
	AND I,COCMSK
	STA COCKTA
	JSR DSPHI		;DISPLAY HIGH SCORE
	LDA I,MHISCR
	JSR DTABML		;DISPLAY "HIGH SCORES"
	LDA I,SCLDRV		;SCREEN ADDRESS OF TOP OF LIST
	STA MSPOS+1
	JSR SETCOL		;SET UP COLORS
	JSR CLEARI		;CLEAR OUT FLAGS
	LDY I,3*4
	BEGIN
	LDA AY,HSCORL+2		;LOOK AT HIGH SCORE
	ORA AY,HSCORL+1
	ORA AY,HSCORL
	IFEQ			;ALL 0'S ?
	TAY
	ELSE
	LDA AY,HSCORH
	STA TRIPLE+2
	LDA AY,HSCORM
	STA TRIPLE+1
	LDA AY,HSCORL		;PUT SCORE INTO TRIPLE
	STA TRIPLE
	TYA
	PHA
	LDA I,REDMIS		;SET UP CLOR & SCREEN COORDINATES
	LDX I,SCLDRH		;FOR DSPNUM
	LDY MSPOS+1
	JSR DSPNUM		;DISPLAY THE SCORE
	PLA
	TAY
	LDA I,INTLH		;SCREEN COORDINATES FOR INITIALS
	STA MESAGE
	LDA MSPOS+1
	STA MESAGE+1
	LDA AY,INITAL		;GET FIRST INITIAL
	JSR LETOUT		;OUTPUT HIM
	LDA AY,INITAL+1		;2ND
	JSR LETOUT
	LDA AY,INITAL+2		;3RD
	JSR LETOUT
	LDA MSPOS+1		;NEXT LINE TO PUT INITIALSON
	SEC
	SBC I,0A
	STA MSPOS+1
	THEN
	DEY
	DEY
	DEY			;POINT TO NEXT RUNG ON LADDER
	MIEND
	JSR BONCIT		;DISPLAY BONUS CITY INTERVAL MSG
	LDA I,CPRGM1		;PRE GAME
	STA SETUPC		;FOR SETUP STATE
	LDA I,S.PAUS		;HOLD IT UP THERE
	STA STATE
	LDA I,255.
	STA PAUST
	LDA I,S.SETU
	STA NXTSTA
	RTS
	.PAGE
	.SBTTL DRAW/ERASE CRUISE MISSILE
;INPUT:	MISIND=MISSILE ARRAY INDEX FOR CM (AB=0)
CMDRAW:	LDA I,0FF		;DRAW CM
	BNE GENDRA
CMERAS:	LDA I,0			;ERASE CM
GENDRA:	STA J
	LDY I,PEND-PDOT-1
	BEGIN			;LOOP FOR EACH DOT
	LDX MISIND
	LDA AX,ABCPVH		;VERT POS.
	CLC
	ADC AY,VDOT
	EOR I,0FF
	STA OLDPOS+1
	LDA AX,ABCPHH		;HORZ POS
	CLC
	ADC AY,HDOT
	STA OLDPOS
	LDA AY,PDOT		;PATTERN
	LDX I,0
	AND J			;DRAW/ERASE?
	STA NX,OLDPOS
	DEY
	MIEND			;NEXT DOT
	RTS
HDOT:	.BYTE 0,-1,0,1,-2,-1,0,1,2,-1,0,1,0
VDOT:	.BYTE 2,1,1,1,0,0,0,0,0,-1,-1,-1,-2
PDOT:	.BYTE REDMIS,REDMIS,FLASH,REDMIS,REDMIS,FLASH,BCKGND
	.BYTE FLASH,REDMIS,REDMIS,FLASH,REDMIS,REDMIS
PEND:
	.END

                                                                                                                                                                  