	.TITLE W3INT
	.SBTTL ******************************
	.SBTTL *                            *
	.SBTTL * MODULE: W3INT              *
	.SBTTL * PROGRAMMER: DFT            *
	.SBTTL * FUNCTION: WW3 I/O          *
	.SBTTL *                            *
	.SBTTL ******************************
	.INCLUDE W3COMN		;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	.PAGE
	.SBTTL SYMBOL DEFINITIONS
;
;GLOBAL ENTRY POINTS DEFINED ELSEWHERE
;
	.GLOBL START,MODSND,MOOLAH,UPCURS,ACTCUR,INILIT,BONCIT,BLEWIT
	.GLOBL DTABML,NUMOUT,DTABEL
;
;GLOBAL ENTRY POINTS DEFINED HERE
;
	.GLOBL IRQ,RESET,QCHKSB
;
;GLOBL SYMBOLS
;
	.GLOBL SYNC,INTCNT,TBHD,TBVD,SWSTAT,NUMPLA
	.GLOBL COL000,COL001,COL010,COL011,COL100,COL101,COL110,COL111
	.GLOBL FIRESW,$$CRDT,TBVD,TBHD,J
	.GLOBL $INTCT,$CMODE,OPTION,K,INPUT,OLDPOS,OPTIO2
	.GLOBL FLSHCO,$CCTIM,ATRACT,NWSTMP,PATRN1
	.GLOBL CILEFT,ICBTOL,$COINA,BLINKT,$LAM,COCKTA
	.GLOBL SMAHOL
	.GLOBL CHKSM1,CHKSM3,CHKSM5
	.GLOBL CHKSM7,CHKSM9,CHKSMB,$LMBIT,CIBITS,PLAYUP,CMOTAB,STCITY
	.PAGE
	.SBTTL CHECKSUMS
;
;CHECKSUMS (1/2K)
;
CHKSM1	=0D2			;5000-57FF
CHKSM3	=01D			;5800-5FFF
CHKSM5	=06F			;6000-6FFF
CHKSM7	=0B1			;6800-6FFF
CHKSM9	=0E8			;7000-77FF
CHKSMB	=0E7			;7800-7FFF
	.PAGE
	.BSECT BIO
	.SBTTL BASE PAGE STORAGE
COL000:	.BLKB 1			;8 COLORS
COL001:	.BLKB 1
COL010:	.BLKB 1
COL011:	.BLKB 1
COL100:	.BLKB 1
COL101:	.BLKB 1
COL110:	.BLKB 1
COL111:	.BLKB 1
FLSHCO:	.BLKB 1			;DX=1 IF COLOR TO BE FLASHED
$COINA:				;
INPUT:	.BLKB 1			;1ST STORAGE FOR INPUT BYTE READING (IN0-IN2)
$TEST:
$LAM:
	.BLKB 1
DBSW:	.BLKB 2			;USED FOR DEBOUNCING INPUTS
SWSTAT:	.BLKB 2			;DEBOUNCED INPUTS
$CMODE:
OPTION:	.BLKB 1
OPTIO2:	.BLKB 1
TOUT0:	.BLKB 1			;SETUP OUTPUT FOR OUT0
TBCTR:	.BLKB 1			;T BALL END REDING
OTB:	.BLKB 1			;OLD T BALL STARTUP READING
NEWTB:	.BLKB 1			;NEW T BALL STARTUP READING
INFIRE	=SWSTAT+1		;DEBOUNCED FIRE SWITCHES BYTE (LEVEL DEB)
COFIRE	=SWSTAT			;FIRE SWITCHES FOR COCKTAIL PLAYER 2
OLDFIR:	.BLKB 1			;USED TO SAVE OLD FIRE SWITCH READINGS
FIRESW:	.BLKB 1			;EDGE DEBOUNCED FIRE SWITCH READINGS
INTCNT:	.BLKB 1
$INTCT	=INTCNT
COCKTA:	.BLKB 1			;COCTAIL TABLE FLIP BYTE
COCMSK	=80			;=1 IF COCKTAIL VERSION
FLIPHS	=40			;=1 IF STAMP IS TO BE H FLIPPED(USUALLY=CFLMSK)
CFLMSK	=3E			;=1 IF COCKTAIL PLAYER 2

OLDOP1:	.BYTE 1			;USED IN SELF TEST
OLDOP2:	.BYTE 1
NOPDIS:	.BYTE 1
	.PAGE
	.SBTTL PROCESS INTERRUPT
	.CSECT W3INT
	
IRQ:	PHA			;SAVE ACC X,Y
	TXA
	PHA
	TYA
	PHA
	CLD			;SET HEX
	TSX
	CPX I,0E0		;STACK TOO DEEP?
	IFCS
	LDA AX,104		;NO. GET OLD PSW
	AND I,10		;BREAK?
	IFEQ
	LDA AX,106		;IS PROGRAM COUNTER TOO LOW?
	CMP I,PROG/100
	IFCS
	CMP I,<PROG+3000>/100	;NO. TOO HIGH?
	IFCC
	LDA SYNC		;OVERRUN TIME LIMIT?
	BPL SOFTOK		;NO ALL OK
	THEN
	THEN
	THEN
	THEN
	.PAGE
	.SBTTL POWER ON AND ERR RESET
RESET:
	LDX I,0FF
	TXS			;SET UP STACK
	CLD
	LDX I,0
	TXA
	SEI
	BEGIN
	STA ZX,0		;ZERO BASE PAGE
	STA AX,100 		;ZERO PAGE 1
	DEX
	EQEND
	LDA I,MFLIP0
	STA A,OUT0
	LDA A,INTEST
	AND I,MTEST
	IFNE			;SELF TEST SWITCH ON?
	CLI
	JMP START		;NO GAME
	THEN
	JMP STEST		;YES. SELF TEST
	.PAGE
	.SBTTL HANDLE VBLANK
SOFTOK:			;SP & PC OKAY IF YOU GET HERE
	STA A,WTCHDG		;MUZZLE DOG
	INC INTCNT		;COUNT INTERRUPTS
	LDA A,VENDSC
	IFMI			;IS THIS BLANK TIME?
	INC SYNC
	LDA BLINKT
	IFNE
	DEC BLINKT		;UPDATE BLINK TIMER
	THEN
	LDA FLSHCO
	STA OPTION
	LDX I,7
	BEGIN
	ASL OPTION
	IFCS			;FLASH COLOR?
	INC ZX,COL000		;YES
	THEN
	LDA ZX,COL000
	STA AX,COLORS		;UPDATE HARDWARE COLOR
	DEX
	MIEND
	LDA A,DIPSW		;READ OPTION SWITCHES
	EOR I,2			;FLIP D1 SO BEST SETTING=ALL 0
	STA OPTION
	LDA TOUT0
	AND I,^CMFLIP0
	TAY			;SET FLIP BIT
	LDA COCKTA
	AND I,CFLMSK
	IFEQ			;FLIP?
	TYA			;NO. CLEAR FLIP BIT
	ORA I,MFLIP0
	TAY
	THEN
	STY TOUT0
	THEN
	.PAGE
	.SBTTL READ TBALL AND SWITCHES
	LDX A,IN1		;READ FIRE SWITCHES
	STX INPUT+1
	.SBTTL TBALL DISTANCE CALCULATION
	LDA TOUT0		;SET CONTROL BIT TO READ SWITCHES
	AND I,<^CMCTRLD>
	TAY
	LDX A,IN0		;READ TBALL
	STX TBCTR
	STY A,OUT0		;STORE CONTROL BIT TO READ SWITCHES
	LDX A,IN0		;READ SWITCHES (COINS,SLAM,ETC)
	STX INPUT
	ORA I,MCTRLD		;RESTART TBALLS
	STA A,OUT0
	LDX A,IN0		;GET INITIAL T BALL READING
	STX NEWTB
	LDA TBCTR		;NO. HORIZ
	SEC
	SBC OTB
	AND I,0F
	CMP I,8
	IFCS
	ORA I,0F0
	THEN
	CLC
	ADC TBHD
	STA TBHD
	LDA TBCTR		;VERT
	SEC
	ORA I,0F
	SBC OTB
	LSR
	LSR
	LSR
	LSR
	CMP I,8
	IFCS
	ORA I,0F0
	THEN
	CLC
	ADC TBVD
	STA TBVD
	LDA NEWTB
	STA OTB
	LDA I,7
	STA A,POKEY+0F
	STA A,POTGO
	LDA A,POKEY+8
	EOR I,07F
	STA OPTIO2		;SECOND OPTION SWITCH
	BIT SWSTAT+1
	IFVS			;SELF TEST?
	JSR MODSND		;NO. PROCESS SOUNDS
	JSR MOOLAH		;CHECK COINS
	THEN
	.PAGE
	.SBTTL DEBOUNCE SWITCHES
;LEVEL SENSITVE
	LDX I,1			;2 INPUT BYTES TO DEBOUNCE
	BEGIN
	LDY ZX,INPUT		;READ SWITCHES
	LDA ZX,DBSW		;SAVE OLF SWITCHES
	STY ZX,DBSW		;REPLACE WITH NEW
	TAY			;COPY OLD
	AND ZX,DBSW		;MAKE ONES WHERE BOTH OFF
	ORA ZX,SWSTAT
	STA ZX,SWSTAT		;TURN OFF IN STATUS
	TYA			;GET BACK OLD
	ORA ZX,DBSW		;MAKE ZEROS WHERE BOTH ON
	AND ZX,SWSTAT		;TURN ON IN STATUS
	STA ZX,SWSTAT		;SAVE NEW STATUS
	DEX
	MIEND
	.PAGE
	.SBTTL FIRE SWITCHES
	LDY INFIRE		;DEFAULT TO 1ST PLAYER
	
	LDA COCKTA		;RECOGNIZE FIRE SWITCHES ONLY ON
	AND I,CFLMSK
	IFNE			;2ND COCKTAIL PLAYER?
	LDY COFIRE		;YES. LOOK AT OTHER FIRE SWITCHES
	THEN
	TYA
	EOR I,0FF		;0 TO 1 TRANSITION
	AND OLDFIR
	EOR FIRESW
	STA FIRESW
	STY OLDFIR
	.PAGE
	.SBTTL LEDS & COUNTERS
	LDA TOUT0
	AND I,MFLIP0		;PRESERVER FLIP BIT ONLY
	ORA I,<MLED2!MLED1>	;LIGHTS OFF
	LDX NUMPLA		;INDEX FOR LIGHTS ON BIT IF IN GAME
	INX
	LDY ATRACT
	IFEQ			;ATTRACT MODE?
	LDX I,0			;YES. OFF
	LDY INTCNT		;YES
	CPY I,40
	IFCS			;BLINK ON TIME?
	LDX $$CRDT		;YES. INDEX FOR START LIGHTS
	CPX I,2
	IFCS
	LDX I,3			;MAX INDEX=3
	THEN
	THEN
	THEN
	AND AX,LITSON		;TURN ON REQUESTED START LIGHTS
	LDY $CCTIM
	IFMI			;HIT COIN COUNTER IF NEC.
	ORA I,MLCCNT		;LEFT
	THEN
	LDY $CCTIM+1
	IFMI
	ORA I,MMCCNT		;MIDDLE
	THEN
	LDY $CCTIM+2
	IFMI
	ORA I,MRCCNT		;RIGHT
	THEN
	STA TOUT0
	.PAGE
	.SBTTL EXIT I/O
	
	BEGIN
	BIT A,VENDSC		;WAIT UNTIL ENDSCREEN IS OVER
	PLEND
	STA A,INTACK		;ACKNOWLEDGE INTERUPT
	PLA			;RESTORE Y,X,AND ACCUM.
	TAY
	PLA
	TAX
	PLA
	RTI
LITSON:	.BYTE 0FF,^CMLED1,^CMLED2,^C<MLED1!MLED2>	;NO LIGHTS, START 1, START 2
	.PAGE
	.SBTTL SELF TEST PREP
STEST:	
	LDA I,0
	STA A,AUDF1+0F		;SOUNDS OFF (CH 3,4)
	STA A,AUDC1+4
	STA A,AUDC1+6
	STA A,AUDF1+8
	LDA I,3
	STA A,AUDF1+0F		;INITIALIZE POKEY
	LDA I,08
	STA A,AUDC1+2		;SET LOW DRONE FOR RAM TEST
	LDA I,0C0
	STA A,AUDF1+2
	LDA I,MLED2!MFLIP0
	STA A,OUT0		;START 1 LIGHT ON

	.SBTTL VBLANK TEST
	LDY I,60
	BEGIN
	BEGIN			;LOOP UNTIL VBLANK IS OFF
	BIT A,VENDSC
	PLEND
	BEGIN			;LOOP UNTIL VBLANK IS ON
	BIT A,VENDSC
	MIEND
	STA A,WTCHDG
	DEY
	MIEND
	LDA I,0A2
	STA A,AUDC1+2		;CHANGE SOUND TO INDICATE SUCCESS
	.PAGE
	.SBTTL PAGES 0 & 1 RAM TEST
	
RAMTEST:
	LDY I,0			;EACH LOC WILL BE TESTED WITH VALUES 0->FF
	BEGIN			;LOOP FOR 4=0->FF
	LDX I,0
	BEGIN			;LOOP FOR X=0->FF STORING
	TYA			;Y THRU Y+FF INTO 0 THRU FF
	STA ZX,0
	INY
	TYA			;Y+1 THRU Y+100 INTO THRU 1FF
	STA AX,100
	INX
	EQEND
	STA A,WTCHDG
	BEGIN			;LOOP FOR X=0->FF
	TYA
	EOR ZX,0		;VERIFY THAT EACH LOC IS UNCHANGED
	STA ZX,0
	BNE RAMERR
	INY
	TYA
	EOR AX,100
	STA AX,100
	BNE RAMERR
	INX
	EQEND
	INY
	EQEND
	LDA I,040		;RAM OK. SET HI DRONE FOR ROM TEST
	STA A,AUDF1+2
	LDA I,MLED1!MFLIP0	;START 2 LIGHT ON
	STA A,OUT0
	JMP ROMTST
	.PAGE
	.SBTTL REPORT RAM ERROR
;INPUT:	ACC=BAD BITS
;OUTPUT:	X+1 BEEPS FOR EACH DX NOT=0

RAMERR:	LDX I,7
	LDY I,0
	STY A,AUDC1+2		;TURN OFF DRONE
	TXS
	BEGIN			;LOOP FOR EACH BIT, FROM D7 -> D0
	TSX
	ROL
	LDY I,0A0		;CLEAN SOUND
	IFCS			;BIT SET?
	LDY I,10		;YES. DIRTY SOUND
	THEN
	STY A,AUDF1
	LDY I,0A8
	STY A,AUDC1
	LDY I,20
	BEGIN
	BEGIN			;DELAY: WAIT FOR
	BIT A,VENDSC		;VBLANK OFF, THEN ON
	PLEND
	BEGIN
	BIT A,VENDSC
	MIEND
	STA A,WTCHDG
	DEY
	MIEND
	LDY I,0
	STY A,AUDC1		;SOUND OFF
	LDY I,14
	BEGIN
	BEGIN			;DELAY
	BIT A,VENDSC
	PLEND
	BEGIN
	BIT A,VENDSC
	MIEND
	STA A,WTCHDG
	DEY
	MIEND
	TSX
	DEX
	TXS
	MIEND
	JMP RESET
	.PAGE
	.SBTTL ROM TEST
ROMTST:
	LDX I,0			;LO BYTE OF ADDRESS
	STX OLDPOS
	STX ICBTOL		;ERROR TRACKER
	TXS			;SET STACK TO 0
	LDA I,PROG/100		;HI BYTE ADDRESS
	STA OLDPOS+1
	LDX I,<4*12.>-1		;PAGE COUNTER-12K
	LDA I,12		;THIS SEED CAN BE CHANGE
	STA K
	BEGIN			;TEST LOOP
	LDY I,0
	STX A,WTCHDG
	BEGIN			;1 PAGE LOOP
	EOR NY,OLDPOS		;LONGITUDINAL PARITY
	INY
	EQEND
	TAY			;SAVE EOR FIGURE
	TXA
	AND I,7			;WHICH PAGE?
	CMP I,1			;CLEAR CARRY 1 FIRST PAGE
	TYA			;IN 2K HUNK
	IFCC			;DONE WITH 2K?
	IFNE			;YES. BAD?
	PHA			;YES. PUT IT ON STACK
	TXA
	PHA
	LSR
	LSR
	LSR
	TAX
	LDA AX,CIBITS+2		;SET BAD BIT
	ORA ICBTOL
	STA ICBTOL
	PLA
	TAX
	THEN
	LDA K			;UPDATE SEED
	ADC I,22
	STA K
	THEN
	INC OLDPOS+1		;NEXT PAGE
	DEX
	MIEND			;DONE?
	CLI
	JSR BLEWIT
	JSR INILIT		;INITIALIZE LANGUAGE
	LDA I,CWHITE
	STA COL110
	LDA I,CBLACK		;BACKGROUND
	STA COL000
	STA ATRACT		;FAKE PLAY MODE FOR CURSOR
	LDA I,MBDROM		;CODE FOR BAD ROM
	TSX
	IFEQ			;BAD ROM?
	LDA I,MROMOK		;CODE FOR GOOD ROM
	THEN
	LDX I,0FF		;RESET STACK
	TXS
				;ALWAYS GO REPORT
	JSR REPERR
	.PAGE
	.SBTTL MAP TEST
	LDA I,80		;BIT TO BYTE MODE COMPATABILITY IN CHECK
	STA NWSTMP		;TEST CELL IS 8080
	STA NWSTMP+1		;BIT MODE
	LDX I,0
	LDA I,0C0
	STA NX,NWSTMP
	LDY I,MMAPOK		;MAP OK DEFAULT
	LDA A,2020		;GET COLOR BACK IN BYTE MODE
	AND I,11
	CMP I,11		;SAME?
	IFNE
	LDY I,MBADMA
	THEN
	TYA
	JSR DTABML
;
	.SBTTL POKEY RANDOM # TEST
	LDA A,RANDOM
	STA OLDOP1
	LDY I,10
	BEGIN			;LOOP 16 TIMES
	LDA A,RANDOM
	CMP OLDOP1
	BNE POKOK		;EXIT IF 2 CONSECUTIVE #'S ARE DIFFERENT
	STA OLDOP1
	DEY
	MIEND
	LDA I,MBDPOK		;"BAD CHIP"
	JSR DTABML
POKOK:
	LDA I,MRAMOK		;"RAM OK"
	JSR DTABML
	.PAGE
	.SBTTL SELF TEST CONTROL LOOP
	LDA I,2
	STA NUMPLA		;FOR BOTH LEDS ON
	LDA I,0
	STA PLAYUP		;FOR CURSO CONTROL
	JSR ACTCUR		;ACTIVATE CURSOR
	LDA OPTION		;FAKE OPTION CHANGE FOR DISPLAY
	EOR I,0FF
	STA OLDOP1
	LDA I,01
	STA NOPDIS		;DISPLAY OPTIONS FLAG
	STA A,POKEY+8		;LOW FREQ
	BEGIN
	BEGIN
	LSR SYNC
	CSEND
	LDA Z,SWSTAT+1
	AND I,MFIREL!$LMBIT	
	IFEQ			;SLAM & LEFT FIRE FOR CONVERGENCE
	STA NOPDIS		;DON'T DISPLAY OPTIONS
	JSR CNVRGE		;DISPLAY PATTERN TO CONVERGE
	THEN
	LDA Z,SWSTAT+1		
	AND I,MFIRER!$LMBIT
	IFEQ			;SLAM + RIGHT FIRE FOR RAINBOW
	STA NOPDIS		;DON'T DISPLAY OPTIONS
	JSR TESCOL		;DISPLAY A RAINBOW
	THEN
	LDA I,0			;MAKE SOUNDS FOR SWITCHES
	STA A,AUDC1		;TURN SOUNDS OFF
	STA A,AUDC1+2
	LDA Z,SWSTAT+1		
	AND I,MFIREC!$LMBIT
	IFEQ			;SLAM + CENTER FIRE FOR SCREEN RAM TEST
	STA NOPDIS		;DON'T DISPLAY OPTIONS
	JSR SCRAM		;TEST SCREEN RAM
	THEN
	JSR UPCURS
	LDA SWSTAT
	EOR I,0FF
	STA A,AUDF1
	IFNE
	LDA I,0A8
	STA A,AUDC1
	INC COL000
	THEN
	LDA SWSTAT+1
	EOR I,0FF
	AND I,$LMBIT!MFIREL!MFIREC!MFIRER
	STA A,AUDF1+2
	IFNE
	LDA I,0A8
	STA A,AUDC1+2
	INC COL000
	THEN
	LDA FIRESW
	AND I,ALLFIR
	IFNE			;ANY FIRE SWITCHES PRESSED?
	LDA PLAYUP		;YES. CHANGE PLAYER #
	EOR I,01		;(FOR TESTING COCKTAIL BALLS)
	STA PLAYUP
	LDA I,0
	STA FIRESW
	JSR BLEWIT		;CLEAR SCREEN
	LDA OLDOP1		;FORCE OPTION DISPLAY TO FLIP SCREEN
	EOR I,0FF
	STA OLDOP1
	LDA I,1
	STA NOPDIS
	THEN
	JSR DSPLOP		;DISPLAY OPTIONS
	LDA Z,SWSTAT+1		;WAIT FOR TEST SWITCH
	AND I,MTEST		;TO GO TO GAME MODE
	NEEND
	JMP RESET
	.PAGE
	.SBTTL DISPLAY OPTIONS

RTMULT:	.BYTE 1,4,5,6
CNMULT:	.BYTE 1,2

DSPLOP:
	LDA NOPDIS
	IFNE			;DISPLAY OPTIONS?
	LDA OPTION		;POSSIBLY
	CMP OLDOP1
	STA OLDOP1
	IFEQ			;OPTION 1 CHANGED?
	LDA OPTIO2		;NO. OPTION 2 CHANGED?
	CMP OLDOP2
	STA OLDOP2
	THEN
	IFNE			;OPTION 1 OR 2 CHANGED?
	LDA I,MFREEP
	JSR DTABEL		;ERASE COIN MODE TIME
	LDA I,MBONIN
	JSR DTABEL		;ERASE BONUS LINE
	JSR INILIT		;INITIALIZE LANGUAGE
	LDA OPTION		;DISPLAY OPTIONS
	AND I,03
	TAX
	LDA AX,CMOTAB
	JSR DTABML		;COIN MODE
	LDA OPTION
	AND I,0C
	LSR
	LSR
	TAX
	LDA AX,RTMULT
	LDX I,88
	LDY I,20
	JSR NUMOUT		;RIGHT MULTIPLIER (1,4,5,6)
	LDA OPTION
	AND I,10
	LSR
	LSR
	LSR
	LSR
	TAX
	LDA AX,CNMULT
	LDX I,78
	LDY I,20
	JSR NUMOUT		;CENTER MULTIPLIER (1,2)
	LDA OPTIO2
	AND I,SCITYM
	TAX
	LDA AX,STCITY
	LDX I,78
	LDY I,30
	JSR NUMOUT		;# CITIES TO START WITH
	LDA I,MCITIES
	JSR DTABML
	JSR BONCIT		;BONUS CITY INTERVAL
	THEN
	THEN
	RTS
	.PAGE
	.SBTTL SCREEN RAM TEST

TSTMSK	=0AA
SCRAM:	JSR TESCOL		;SETUP COLORS FOR TEST
	JSR BLEWIT		;CLEAR SCREEN
	SEI
	LDA I,0
	STA ICBTOL		;INITIALIZE ERROR BUCKET
	LDA I,MRAMOK		;DEFAULT "RAM OK"
	STA K
	LDA I,2
	STA OLDPOS+1		;POINT BACK TO TOP OF RAM
	BEGIN
	BEGIN
	LDA I,TSTMSK		;BIT PATTERN
	STA NY,OLDPOS		;STORE PATTERN INTO TEST CELL
	INY
	BEGIN
	LDA NY,OLDPOS		;IS EVERYTHING ELSE 0
	IFNE
	JSR ERROR1		;NO, REPORT ERROR
	THEN
	INY
	EQEND
	LDA NY,OLDPOS
	CMP I,TSTMSK		;PATTERN STILL THERE?
	IFNE
	JSR ERROR0		;NO, REPORT ERROR
	THEN
	LDA I,0
	STA NY,OLDPOS		;0 OLD TEST CELL
	STA SYNC
	STA A,WTCHDG
	INC OLDPOS		;POINT TO NEXT TEST CELL
	EQEND
	INC OLDPOS+1		;POINT TO NEXT PAGE
	LDA OLDPOS+1
	CMP I,3F
	EQEND
	LDA K
	JMP REPERR		;TELL'EM WHICH BITS ARE BAD (IF ANY)
	.PAGE

ERROR0:	EOR I,TSTMSK		;ISOLATE BIT IN ERROR
ERROR1:	ORA ICBTOL		;SAVE BAD BIT
	STA ICBTOL
	LDA I,MBDRAM
	STA K
	RTS
REPERR:	CLI			;ACC=MSG #
	JSR DTABML
	LDA ICBTOL		;HOLDS BITS WITH KNOWN ERRORS
	LDX I,8			;BIT COUNTER
	BEGIN
	ASL			;THIS BIT BAD?
	IFCS			;YEP, REPORT HIM
	PHA			;SAVE NECESSARY REGS
	STX CILEFT
	LDA I,BLUE		;SET UP COLOR FOR NUMOUT
	STA PATRN1
	TXA			;BIT WERE WORKING ON
	ASL			;X 8 TO SEPARATE
	ASL			;NUMBERS DISPLAYED ON SCREEN
	ASL
	CLC
	ADC I,88		;ADD IN BASE SCREEN ADDRESS
	TAY			;VERTICAL ADDRESS IN Y FOR NUMOUT
	TXA			;# IN A FOR NUMOUT
	LDX I,0A0		;HORIZ ADDRESS IN X FOR NUMOUT
	JSR NUMOUT
	LDX CILEFT		;RESTORE REGS
	PLA
	THEN
	DEX			;NEXT BIT
	EQEND
	RTS
	.PAGE
	.SBTTL DISPLAY COLORS
;FUNCTION:	TO DISPLAY COLOR BARS TO TEST THE MONITOR

TESCOL:	LDX I,7
	BEGIN
	TXA
	ASL
	STA ZX,COL000
	DEX
	MIEND
	INX			;START AT HORIZ=40
	STX OLDPOS		;0 X IN BIT MODE
	BEGIN
	LDY I,18			;TOP OF SCREEN
	STY OLDPOS+1
	BEGIN
	STA NX,OLDPOS		;A DOT AT A TIME
	INC OLDPOS+1		;ONE LINE LOWER
	EQEND			;BOTTOM OF SCREEN?
	TAY			;SAVE COLOR CODE
	LDA I,1F
	AND OLDPOS		;EACH COLOR 32 DOTS WIDE
	IFEQ
	TYA			;GET COLOR
	CLC			;NEW COLOR
	ADC I,20
	TAY
	THEN
	TYA
	INC OLDPOS		;POINT TO NEXT VERT LINE
	EQEND			;DONE?
	RTS			;YES
	.PAGE
	.SBTTL CONVERGENCE PATTERN
WHITE	=40
CNVRGE:	LDA I,CBLACK
	LDX I,7
	BEGIN
	STA ZX,COL000
	DEX
	MIEND
	LDA I,CWHITE
	STA COL010
	JSR BLEWIT
	LDX I,0
	LDY I,ENDVER-VERTCL-1		;INDEX POINTER INTO TABLE
	BEGIN
	LDA I,19		;VERTICAL COORDINATE
	STA OLDPOS+1
	LDA AY,VERTCL		;HORIZ COORDINATE
	STA OLDPOS
	LDA I,WHITE		;GET COLOR
	BEGIN
	STA NX,OLDPOS		;WRITE VERT LINE
	INC OLDPOS+1
	EQEND
	DEY			;NEXT STARTING POINT
	MIEND			;DONE
	LDY I,ENDHOR-HRZNTL-1
	BEGIN
	LDA AY,HRZNTL		;VERTICAL COORDINATE
	STA OLDPOS+1
	STX OLDPOS
	LDA I,WHITE
	BEGIN
	STA NX,OLDPOS		;WRITE HORIZ LINE
	INC OLDPOS
	EQEND
	DEY			;POINT TO NEXT LINE TO WRITE
	MIEND
	LDY I,ENDVER-VERTCL-2
	BEGIN			;LOOP FOR PTS 1/2 WAY BETWEEN VERT LINE
	LDA AY,VERTCL
	CLC
	ADC AY,VERTCL+1
	ROR
	STA OLDPOS
	STY J
	LDY I,ENDHOR-HRZNTL-2
	BEGIN			;LOOP FOR PTS 1/2 WAY BETWEEN HORIZ LINES
	LDA AY,HRZNTL
	CLC
	ADC AY,HRZNTL+1
	ROR
	STA OLDPOS+1
	LDA I,WHITE
	STA NX,OLDPOS		;WRITE DOT
	DEY
	MIEND
	LDY J
	DEY
	MIEND
	RTS

VERTCL:	.BYTE 00,33,66,99,0CC,0FF
ENDVER:
HRZNTL:	.BYTE 19,46,74,0A2,0D0,0FF
ENDHOR:
QCHKSB:	.BYTE CHKSMB
	.VCTRS 7FFA,RESET,RESET,IRQ
	.END
                                                                                                                                                                                                                                                                                                                                                                                                                                       