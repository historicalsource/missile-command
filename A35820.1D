	.TITLE W3MAIN
	.SBTTL ******************************
	.SBTTL *                            *
	.SBTTL * MODULE: W3MAIN             *
	.SBTTL * PROGRAMMER: DFT            *
	.SBTTL * FUNCTION: WW3 MAIN PROGRAM *
	.SBTTL *                            *
	.SBTTL ******************************
	.REPT 0
	
DATE:	20-JULY-79
	
PROJ #:	23603
	
DISK #: 83 & B15

	.ENDR
	.INCLUDE W3COMN		;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	.PAGE
	.SBTTL GLOBAL SYMBOLS
;
;ENTRY POINTS DEFINED HERE
;
	.GLOBL START,DPLANO,UPCURS,DSPSCO,DIVIDE,BONINL,BONINH
	.GLOBL QCHKS1,QCHKS3,SMAHOL,STCITY
;
;EXTERNALLY DEFINED ENTRY POINTS
;
	.GLOBL IRQ,RESET,INIINI
	.GLOBL MAKMAP,ERAMIS,MISTIP,MISTRA,MOVCUR,ARROW,DTABML,ERAABM
	.GLOBL DSPMRK,ERAMRK,DTABMS,DSPNUM,NUMOUT,MISUPD,BASLOW,BASEMP
	.GLOBL INISOU,BLEWIT,PRSCRO,ATRMSG,BLNKAR,WSTAMP,ERACIT
	.GLOBL NUHICK,GETINI,DSPHSC,DSPHI,DTABEL,ACTCUR,DEACUR
	.GLOBL EXSNON,CMSNON,CMSNOF,STSNON,STSNOF
	.GLOBL CMDRAW,CMERAS,INILIT,ONEMIS,DACITY,SNDON
;
;EXTERNALLY DEFINED VARIABLES
;
	.GLOBL FIRESW
	.GLOBL INTCNT,OPTION,OPTIO2,$$CRDT
	.GLOBL COL000,COL001,COL010,COL011,COL100
	.GLOBL COL101,COL110,COL111
	.GLOBL FLSHCO,PATRN1,COCKTA,OLDPOS
	.GLOBL SABLAU,SEXPLO,SNEWAV,SENDGA,SBONUS,SOHNO
	.GLOBL SUNABM,SLOABM,SNSHOT,$LMTIM
	.GLOBL CHKSM1,CHKSM3
;
;VARIABLES USED EXTERNALLY AND DEFINED HERE
;
	.GLOBL ABOPH,ABOPV,TRIPLE,PLAYUP,WAVENO,CRMONS,PLCPV,SLAMSN
	.GLOBL ABCPVH,ABCPVL,ABCPHH,ABCPHL,MISIND,MBCPH,MBCPV,CICPH,CICPV
	.GLOBL CRCPVH,CRCPHH,CRCPHL,QUOTH,QUOTL,CRMONS
	.GLOBL SWSTAT,ABTAV,ABTAH,TBVD,TBHD,SYNC,J,INTCNT,NMMISB,K
	.GLOBL ABVEHL,ABVEHH,ABVEVL,ABVEVH,CILEFT,CIBITS,LOICBV,ICBTOL,NUMPLA
	.GLOBL SETUPC,LSCORH,LSCORL,LSCORM,STATE,PAUST,NXTSTA,ATRACT,HADR,FRAME,BLINKS,BLINKT
	.PAGE
	.SBTTL VARIABLES DEFINITIONS
	.BSECT BMAIN
	
ICBONS:	.BLKB 1			;# OF ACTIVE ICBMS ON SCREEN
ICBTOL:	.BLKB 1			;# OF ICBMS TO LAUNCH
EXPLCT:	.BLKB 1			;NUMBER OF ACTIVE EXPLOSIONS
DEFEXP:	.BLKB 1			;DEFENSE BANG COUNT
OFFEXP:	.BLKB 1			;OFFENSE BANG COUNT
SETUPC:	.BLKB 1			;SETUP STATE TASK
STATE:	.BLKB 1			;GAME STATE (PLAY,PAUSE,OR SETUP)
NXTSTA:	.BLKB 1			;NEXT STATE
ATRACT:	.BLKB 1			;ATTRACT (0)/GAME (-1) FLAG
TBHD:	.BLKB 1			;TRACKBALL HORIZONTAL DISPLACMENT
TBVD:	.BLKB 1			;TRACKBALL VERTICAL DISPLACEMENT
EXPLOP:	.BLKB 1			;CURRENT LOC IN ICBM ARRAY
MISIND:	.BLKB 1			;MISSILE ARRAY INDEX
J:	.BLKB 1			;TEMP CELL
K:	.BLKB 1			;TEMP CELL
RANGE:	.BLKB 1			;EXPLOSION RANGE
H2:	.BLKB 1			;H & V COORD. OF 2 OBJECTS FOR
V2:	.BLKB 1			;WHICH DELTA IS TO BE CALCULATED
H1:	.BLKB 1	
V1:	.BLKB 1
SYNC:	.BLKB 1			;I/O AND MAINLINE SYNC
NMMISB:	.BLKB 3			;# MISSILES LEFT IN MISSILE BASE
CRCPHL:	.BLKB 1			;CURSOR POSITION (FRACTION)
CRCPVL:	.BLKB 1
CRCPHH:	.BLKB 1			;CURSOR POSITION (INTEGER)
CRCPVH:	.BLKB 1
WAVENO:	.BLKB 1			;WAVE #
MQ:	.BLKB 1			;DIVIDE ROUTINE: TEMP CELL
QUOTH:	.BLKB 1			;	QUOTIENT MSB
QUOTL:	.BLKB 1			;	QUOTIENT LSB
SAVEX:	.BLKB 1			;	PRESERVES X
SAVEXX:	.BLKB 1
DIVSOR:	.BLKB 1			;	DIVSOR STORAGE
NUMPLA:	.BLKB 1			;# OF PLAYERS
PAUST:	.BLKB 1			;PAUSE TIMER (IN FRAMES)
HADR:	.BLKB 1
VADR:	.BLKB 1
ICBFRL:	.BLKB 1			;ICBMS NEED 2 SPEED COUNTERS
ICBFRH:	.BLKB 1
EXPFRA:	.BLKB 1			;FRAMES LEFT BEFORE UPDATING EXPLOSIONS
RADIUS:	.BLKB 1			;EXPLOSION RADIUS
PATERN:	.BLKB 1			;PATTERN STORAGE
HDISP	=H1			;H AND V COORDINATES OF POINT ON CIRCLE
VDISP	=V1
ICSPDL:	.BLKB 1			;ICBM SPEED (FRAMES BEFORE UPDATE)(FRACTION)
ICSPDH:	.BLKB 1			;(INTEGER PORTION)
PLAYUP:	.BLKB 1			;# OF PLAYER WHO'S PLAYING (0 OR 1)
ICBPTL:	.BLKB 1
ICBPTM:	.BLKB 1
ABMONS:	.BLKB 1			;ABM ON SCREEN COUNT
LOICBV:	.BLKB 1			;LOWEST ICBM'S HEIGHT
HIICBV:	.BLKB 1			;HIGHEST ICBM'S HEIGHT
ALIVE:	.BLKB 1			;ALIVE (NOT 0) A DEAD (0) FLAG FOR PLAYER
PLIVES:	.BLKB 2			;# OF LIVES LEFT FOR EACH PLAYER
MIRVIX:	.BLKB 1			;ICBM TO MIRV (INDEX)
BONLVL:	.BLKB 2			;BONUS LEVELS (FOR EACH PLAYER)
CILEFT:	.BLKB 2			;CITIES LEFT/PLAYER
PLATIM:	.BLKB 1			;PLANE UPDATE TIMER
PLAVEL:	.BLKB 1			;PLANE HORIZ INCREMENT (+ OR -1)
HORFIR:	.BLKB 1			;HORIZ LOC AT WHICH PLANE WILL FIRE
FRAME:	.BLKB 1			;FRAME COUNTER (1-60)
CITARG:	.BLKB 1			;TARGET CITIES F7-D2 (MUST PRECEDE MBTARG BY 1)
MBTARG:	.BLKB 1			;TARGET MISSILE BASES D7,D6,D5=LEFT,MID,RIGHT 1=TARGET
MBLEFT:	.BLKB 1			;BASES LEFT D7-D5 1=ALIVE
SCOCOL:	.BLKB 1			;SCORE COLOR
CIDOWN:	.BLKB 1			;CITIES WIPED OUT THIS WAVE
CMANGL:				;USED INSIDE UPICBM
TARGET:	.BLKB 1			;ATTRCT MODE - CURSOR'S ICBM TARGET
TRIPLE:	.BLKB 3			;TRIPLE PRECISION STORAGE LOC FOR OUTPUT ROUTINE
RQSCOR:	.BLKB 1			;REQUEST FOR SCORE DISPLAY (NOT 0)
DANGER:				;USED INSIDE UPICBM
FASABM:	.BLKB 1			;USED INSIDE UPABMS
SOBJID:	.BLKB 1			;SPECIAL OBJECT ID (SPITNIK,BOMBER...)
BLINKS:	.BLKB 1			;BLINK STATUS (0=WRITE, 1=ERASE)
BLINKT:	.BLKB 1			;BLINK TIMER (0=TIME TO BLINK)
ICBTYP:	.BLKB 1			;ICBM TYPE:0=ICBM,1=CM,D7=INDEX 0
CRMONS:	.BLKB 1			;# OF CMS ON SCREEN
CRMTOL:	.BLKB 1			;# CRUISE MISSILES TO LAUNCH
XLOOP:	.BLKB 1			;LOOP COUNTER & INDEX
SMULTI:	.BLKB 1			;SCORE MULTIPLIER
POTENT:	.BLKB 1			;USED BY ICBLAU INTERNALLY
NEWPLA:	.BLKB 1			;# OF NEXT PLAYER (FROM END WAVE TO NEW WAVE)
SLAMSN:	.BLKB 1			;SLAM SOUND FLAG (NOT 0)
SPUTDS:	.BLKB 1			;DISTANCE SPUTNIK MUST GO BETWEEN FIRES
SPUTAC:	.BLKB 1			;SPUTNIK ACTIVATION DELAY
SPUTIM:	.BLKB 1			;SPUTNIK DELAY TIMER
	.PAGE
	.SBTTL ARRAY DEFINITION
	.ASECT
	.=100
;AB=ABM;IC=ICBM;CR=CURSOR;EX=EXPLOSION;CI=CITY
				;CURRENT POSITION
				;	LOW BYTE HORIZ
ABCPHL:	.BLKB NABMS	
ICCPHL:	.BLKB NICBMS
				;	HIGH BYTE HORIZ
ABCPHH:	.BLKB NABMS
ICCPHH:	.BLKB NICBMS
PLCPH:	.BLKB 1
EXCPH:	.BLKB NEXPLO
				;	LOW BYTE VERTICAL
ABCPVL:	.BLKB NABMS
ICCPVL:	.BLKB NICBMS
				;	HIGH BYTE VERTICAL
ABCPVH:	.BLKB NABMS
ICCPVH:	.BLKB NICBMS
PLCPV:	.BLKB 1
EXCPV:	.BLKB NEXPLO
				;ORIGINAL POSITION (ORIGIN)
				;	HIGH BYTE HORZ
ABOPH:	.BLKB NABMS
ICOPH:	.BLKB NICBMS
				;	HIGH BYTE VERTICAL
ABOPV:	.BLKB NABMS
ICOPV:	.BLKB NICBMS
				;TARGET
ABTAH:	.BLKB NABMS		;	HORIZONTAL
ICTAH:	.BLKB NICBMS
				;	VERTICAL
ABTAV:	.BLKB NABMS
ICTAV:	.BLKB NICBMS
				;MISCELLANEOUS
EXTIME:	.BLKB NEXPLO		;EXPLOSION ELAPSED TIME
NEWEND	=EXTIME			;FINAL EXPLOSION NEW RADIUS
OLDEND	=EXTIME+1		;		 OLD RADIUS
LSCORL:	.BLKB 2			;SCORE ARRAY (0=LEFT, 1=RIGHT) TRIPLE PRECISION BCD
LSCORM:	.BLKB 2
LSCORH:	.BLKB 2
	.ASECT
	.=600
				;VELOCITY (# DOTS/CYCLE)(SIGNED)
ABVEHL:	.BLKB NABMS		;	FRACTIONAL HORIZ
ICVEHL:	.BLKB NICBMS
				;	INTEGER HORIZ
ABVEHH:	.BLKB NABMS
ICVEHH:	.BLKB NICBMS
				;	FRACTIONAL VERTICAL
ABVEVL:	.BLKB NABMS
ICVEVL:	.BLKB NICBMS
				;	INTEGER VERTICAL
ABVEVH:	.BLKB NABMS
ICVEVH:	.BLKB NICBMS
	.PAGE
	.SBTTL NEGATE DOUBLE PRECISION NUMBER
	.MACRO DPNEGA LO,HI
	LDA LO
	EOR I,0FF
	CLC
	ADC I,1
	STA LO
	LDA HI
	EOR I,0FF
	ADC I,0
	STA HI
	.ENDM
	.MACRO NEGACC		;NEGATE ACCUMULATOR
	EOR I,0FF
	CLC
	ADC I,1
	.ENDM
	.MACRO ABSACC,?B	;ABSOLUTE VALUE OF ACC
	BPL B
	NEGACC
B:
	.ENDM
	.PAGE
	.SBTTL AIM ENTRY
	.ASECT
	.=PROG
	SEI
	LDA A,IIRQ
	STA A,0F7C8
	LDA A,IIRQ+1
	STA A,0F7C9
	JMP RESET
IIRQ:	.WORD IRQ
QCHKS1:	.BYTE CHKSM1
	.PAGE
	.SBTTL MAINLINE
START:	
	CLI
	JSR INIINI
	JSR INILIT		;INITIALIZE LANGUAGE
	JSR INISOU		;INITIALIZE SOUNDS
	LDA I,CPRGM1		;COLD START
	STA SETUPC
	LDA I,S.SETU
	STA STATE
	BEGIN			;MAIN LOOP
	BEGIN			;SYNC UP WITH I/O
	LSR SYNC
	CSEND
	LDA I,0
	STA SYNC
	LDA STATE
	IFEQ			;BRANCH TO APPROPRIATE STATE HANDLER
	JSR PLAY
	ELSE
	IFMI
	JSR PAUSE
	ELSE
	JSR SETUP
	THEN
	THEN
	JSR ALWAYS		;NON-STATE DEPENDENT PROCESSING
	LDA SWSTAT+1
	AND I,MTEST
	EQEND			;LOOP UNLESS SELF TEST
	JMP RESET		;SELF TEST
	.PAGE
	.SBTTL PLAY
PLAY:
	JSR ICBLAU		;LAUNCH ICBMS
	JSR ABMLAU		;LAUNCH ABMS
	JSR PROPLA		;PROCESS SUBMARINE (IF ANY)
	JSR UPABMS		;UPDATE ABMS
	JSR UPICBM		;UPDATE ICBMS
	JSR PREXPL		;PROCESS EXPLOSIONS
	JSR UPCURS		;UPDATE CURSOR
	JMP TALIVE		;IS PLAYER STILL ALIVE?
	.PAGE
	.SBTTL SETUP STATE
SETUP:
	LDX SETUPC
	LDA AX,SETUP1+1
	PHA
	LDA AX,SETUP1
	PHA
	RTS
;
;SETUP ROUTINES
;
SETUP1:	.WORD NEWGAM-1		;NEW GAME
	.WORD NEWWV1-1		;NEW WAVE
	.WORD 0			;NOT USED
	.WORD ENDGM1-1		;END OF GAME(PAHSE 1)
	.WORD ENDWV1-1		;END OF WAVE (PHASE 1)
	.WORD ENDWV2-1		;END OF WAVE (PHASE 2)
	.WORD ENDWV3-1		;END OF WAVE (PHASE 3)
	.WORD ENDWV4-1		;END OF WAVE (PHASE 4)
	.WORD ENDWV5-1		;END OF WAVE (PHASE 5)
	.WORD ENDGM2-1		;END OF GAME (PHASE 2)
	.WORD PREGM1-1		;PRE GAME PART 1
	.WORD PREGM2-1		;PRE GAME PART 2
	.WORD NUHICK-1		;CHECK FOR 5 HI SCORES
	.WORD GETINI-1		;GET HI SCORE INITIALS
	.WORD DSPHSC-1		;DISPLAY HIGH SCORE TABLE
	.PAGE
	.SBTTL PAUSE STATE
PAUSE:
	LDA FRAME
	AND I,03
	IFEQ			;UPDATE EVERY 4/60 SEC
	LDY PAUST
	IFNE			;RUN TIMER
	DEC PAUST
	THEN
	IFEQ			;TIME UP?
	LDA NXTSTA		;YES. GO TO NEXT STATE
	STA STATE
	CMP I,S.PLAY
	IFEQ			;NEXT STATE THE PLAY STATE?
	LDA ATRACT		;YES
	IFNE			;ATTRACT MODE?
	LDA I,MPLAYR		;NO ERASE MESSAGES
	JSR DTABEL
	LDA I,MICBPTS
	JSR DTABEL
	LDA I,MCOPYR
	JSR DTABEL
	LDA I,MDEFEN
	JSR DTABEL
	LDA I,0		
	STA FIRESW		;CLEAR FIRE SWITCHES
	STA TBVD		;STOP TBALL
	STA TBHD
	THEN
	THEN
	THEN
	THEN
	JMP UPCURS		;UPDATE CURSOR
	.PAGE
	.SBTTL ALWAYS DO IT
;WARNING: DON'T DO ANYTHING HERE THAT COULD WIPEOUT BACKGROUND!!
ALWAYS:	
	LDA ATRACT
	IFEQ			;ATTRACT MODE?
	JSR REFRESH		;REFRESH ATTRACT MODE MESSAGE
	LDA $$CRDT		;NO. CREDITS?
	IFNE
	LDY I,0			;YES. SAY NO BUTTONS PRESSED.
	CMP I,2			;CS=2+ CREDITS,;CC=1 CREDIT
	LDA SWSTAT		;ANY START BUTTONS PRESSED?
	EOR I,0FF
	AND I,MSTRT2!MSTRT1
	IFNE
	IFCC			;YES. & ONLY 1 CREDIT
	AND I,MSTRT1		;1 PLAYER BUTTON PRESSED?
	IFNE
	DEC $$CRDT		;YES. TAKE A CREDIT
	INY			;AND SET # PLAYERS TO 1
	THEN
	ELSE
	INY
	DEC $$CRDT		;TAKE AT LEAST 1 CREDIT
	AND I,MSTRT2
	IFNE			;2 PLAYER BUTTON PRESSED?
	DEC $$CRDT		;YES. TAKE ANOTHER CREDIT
	INY			;& SET # PLAYERS =2
	THEN
	THEN
	TYA
	STA NUMPLA		;SAVE # OF PLAYERS (0,1,2)
	IFNE
	LDA I,-1		;START GAME. SET GAME MODE
	STA ATRACT
	LDA I,CNEWGA		;REQUEST NEW GAME SETUP
	STA SETUPC
	LDA I,S.SETU
	STA STATE
	DEC NUMPLA		;0=1 PLAYER; 1=2 PLAYERS
	THEN
	THEN
	THEN
	LDA OPTION
	AND I,03
	IFEQ			;FREE PLAY?
	LDA I,2
	STA $$CRDT		;YES. GIVE 2 CREDITS
	THEN
	THEN
	INC FRAME
	.PAGE
	.SBTTL SPARE TIME JOBS
	LDA SYNC
	IFEQ			;SPARE TIME & NOT BACKGROUND?
	LDA RQSCOR		;YES
	IFNE			;DISPLAY SCORE REQUEST?
	LDY PLAYUP		;YES
	JSR DSPNUP
	THEN
	LDA BLINKT
	IFEQ			;TIME TO UPDATE BLINKING GRAPHICS?
	JSR ADVICE		;YES
	LDA BLINKS		;REVERSE BLINK JOB(WRITE <-> ERASE)
	EOR I,1
	STA BLINKS
	TAX
	LDA AX,BLKTIM		;SET UP BLINK TIMER
	STA BLINKT
	THEN
	THEN
	LDA $LMTIM
	IFNE			;SLAM SWITCH TRIPPED?
	LDA I,4*60.
	STA SLAMSN		;YES
	THEN
	LDA SLAMSN
	IFNE
	DEC SLAMSN
	THEN
	RTS
BLKTIM:	.BYTE 10.,50.		;ERASE WRITE, TIME IN 1/60 SEC.
	.PAGE
	.SBTTL PROCESS CURSOR MOTION
UPCURS:
	LDA CRCPVH
	IFNE
	LDA ATRACT		;ATTRACT MODE?
	IFEQ
	JSR AUTCUR		;YES. AUTOMATIC CURSOR
	ELSE
	LDY I,0			;TBALL CONTROLLED
	LDA TBVD		;CURSOR
	STY TBVD
	STA VADR
	LDA TBHD
	STY TBHD
	STA HADR
	THEN
	JSR UPDCUR		;UPDATE CURSOR COORD.
	JSR MOVCUR		;MOVE CURSOR ON SCREEN
	THEN
	RTS
	.PAGE
	.PAGE
	.SBTTL SMART CURSOR MOVER (ATTRACT)

AUTCUR:
	LDA I,0
	STA VADR
	STA HADR
	LDX TARGET
	LDA AX,ICCPVH
	IFEQ			;IS POTENTIAL TARGET ACTIVE?
	JSR NEWTAR		;NO. GET A NEW ONE.
	THEN
	LDX TARGET
	LDA AX,ICCPVH		;YES. GO AFTER THEM
	CMP CRCPVH
	IFCC			;IS ICBM HIGHER THAN CURSOR?
	LDA I,-AUTSPD		;NO. MOVE CURSOR DOWN TOWARD IT
	ELSE
	SEC			;YES
	SBC CRCPVH
	CMP I,0E		;IS CURSOR X DOTS BELOW ICBM?
	IFEQ
	LDA I,0			;YES. DON'T MOVE V THEN
	ELSE
	LDA I,AUTSPD		;NO. MOVE IT DOWN UNLESS:
	IFCC			;IS IT < X DOTS BELOW ICBM?
	LDA I,-AUTSPD		;YES. MOVE IT UP
	THEN
	THEN
	THEN
	STA VADR
	LDA AX,ICVEHH	;CALCULATE FUTURE H POSITION
	STA J
	LDA AX,ICVEHL
	LSR J
	ROR
	LSR J
	ROR
	LSR J
	ROR
	LSR J
	ROR
	CLC
	ADC AX,ICCPHH
	CMP CRCPHH
	IFCC			;IS ICBM TO LEFT OF CURSOR?
	LDA I,-AUTSPD		;YES. MOVE CURSOR TO THE LEFT
	ELSE
	IFEQ			;NO. TO THE RIGHT OF CURSOR?
	LDA I,0			;NO. AT SAME H POSITION
	ELSE
	LDA I,AUTSPD		;YES. MOVE CURSOR TO THE RIGHT
	THEN
	THEN
	STA HADR
	ORA VADR
	IFEQ			;CURSOR AT TARGET?
	LDA ABMONS		;YES
	CMP I,2
	IFCC			;< 2 ABMS ON SCREEN?
	LDX I,2			;YES
	LDA CRCPHH
	CMP I,60
	IFCC			;FIND BEST BASE TO SHOOT FROM
	LDX I,0
	ELSE
	CMP I,0A0
	IFCC
	LDX I,1
	THEN
	THEN
	LDA ABMONS
	CLC
	ADC EXPLCT
	CMP ICBONS
	IFCC
	JSR LAUABM		;FIRE AN ABM
	LDY I,0		;SEND CURSOR DOWN
	STY HADR
	DEY
	STY VADR
	JSR NEWTAR		;GET A NEW TARGET
	THEN
	THEN
	THEN
	RTS
NEWTAR:	LDX TARGET
	BEGIN			;LOOP FOR EACH ICBM
	DEX
	IFMI
	LDX I,NICBMS-1
	THEN
	CPX TARGET		;BACK TO ORIGINAL ARRAY SPOT?
	IFEQ
	RTS			;YES
	THEN
	LDA AX,ICCPVH
	NEEND			;EXIT LOOP IF ICBM IS ACTIVE
	STX TARGET
	RTS
	.PAGE
	.SBTTL ADD TBALL TO CURSOR POSITION
ADCURS:
	LDY I,0			;HADR VADR HAS 1 BYTE H&V TBALL INCREMENTS
	LDA ZX,HADR		;EXTEND SIGN INTO UPPER BYTES (H1 V1)
	IFMI
	DEY
	THEN
	TYA
	STA ZX,H1
	LDY I,6			;SHIFT INCREMENT (MULT IT)
	LDA COCKTA
	AND ATRACT
	IFMI			;COCKTAIL & NOT ATTRACT MODE?
	LDY I,7			;YES.
	THEN
	BEGIN
	ASL ZX,HADR
	ROL ZX,H1
	DEY
	MIEND
	LDA ZX,CRCPHL		;CALCULATE NEW CURSOR POSITION
	CLC
	ADC ZX,HADR
	STA ZX,CRCPHL
	LDA ZX,CRCPHH
	ADC ZX,H1
	CMP ZX,CRCPHH
	IFNE
	LDY ZX,H1
	IFMI			;PROTECT AGAINST WRAP-AROUND
	IFCS
	LDA I,0
	THEN
	ELSE
	IFCC
	LDA I,0FF
	THEN
	THEN
	THEN
	RTS
	.PAGE
	.SBTTL UPDATE CURSOR POSITION
UPDCUR:	LDX I,0			;HORIZ
	JSR DOCURS	
	LDX I,1			;THEN VERTICAL (VERT LOC=H+1)
DOCURS:
	JSR ADCURS		;ADD TBALL INC TO POSITION
	CMP AX,HMIN		;KEEP CURSOR ON SCREEN
	IFCC
	LDA AX,HMIN
	THEN
	CMP AX,HMAX
	IFCS
	LDA AX,HMAX
	THEN
	STA ZX,CRCPHH
	RTS
HMIN:	.BYTE IHMIN,IVMIN,IHMAX,IVMAX	;H & V MIN & MAX VALUES
HMAX	=HMIN+2
	.PAGE
	.SBTTL LAUNCH ABMS
ABMLAU:
	LDA ATRACT
	IFNE			;ATTRACT MODE?
	LDA ICBTOL		;NO
	ORA ICBONS
	ORA CRMTOL
	ORA CRMONS
	ORA A,PLCPV
	IFNE			;ANYTHING TO SHOOT AT?
	LDA DEFEXP		;YES
	CLC
	ADC ABMONS
	CMP I,MAXDEX
	IFCC			;ROOM ON SCREEN FOR DEFENSE?
	ADC ICBONS
	CLC
	ADC CRMONS
	CLC
	LDX A,PLCPV
	IFNE			;PLANE ACTIVE?
	SEC			;YES. COUNTS AS POTENT BANG
	THEN
	ADC OFFEXP
	CMP I,NEXPLO.
	THEN
	IFCC			;BUT TOO MANY POTENTIAL BANGS?
	LDX I,2			;NO. CHECK 3 FIRE SWITCHES
	BEGIN
	LDA FIRESW
	AND AX,FIREMA
	IFNE			;SWITCH PRESSED?
	LDA ZX,NMMISB		;YES
	IFNE			;ANY MISSILES LEFT AT BASE?
	JSR LAUABM		;LAUNCH MISSILE
	ELSE
	LDA I,SNSHOT		;NO. "NO FIRE" NOISE
	JSR SNDON
	THEN
	THEN
	DEX
	MIEND
	ELSE
	LDA FIRESW
	AND I,ALLFIR
	IFNE
	LDA I,SNSHOT		;NO FIRE SOUND
	JSR SNDON
	THEN
	THEN
	ELSE
	JSR DEACUR		;NO. DEACTIVATE CURSOR
	THEN
	THEN
	LDA I,0			;CLEAR SWITCHES
	STA FIRESW
	RTS
FIREMA:	.BYTE MFIREL,MFIREC,MFIRER	;FIRE SWITCH MASKS
	.PAGE
	.SBTTL LAUNCH 1 ABM
;OUTPUT:	EQ: CAN'T FIRE IT
;		NE: MISSILE FIRED
;		X PRESERVED
;		ACC,Y DESTROYED
LAUABM:				;INPUT:X=MISSILE BASE #
	LDY I,ABLOOP
	BEGIN			;FIND AN OPEN SLOT IN ABM ARRAY
	LDA AY,ABCPVH
	IFEQ			;OPEN SLOT?
	STY MISIND
	LDA I,0
	STA AY,ABCPVL
	STA AY,ABCPHL		;YES. CLEAR IT OUT
	LDA AX,MBCPH		;SAVE ORIGN POSITION
	STA AY,ABOPH		;(MISSILE BASE LOC.)
	STA AY,ABCPHH		;CURRENT POSITION IS SAME
	LDA AX,MBCPVA		;AS ORIGIN POSITION
	STA AY,ABOPV
	STA AY,ABCPVH
	LDA CRCPHH		;SET TARGET AS CURSOR
	STA AY,ABTAH		;POSITION
	LDA CRCPVH
	STA AY,ABTAV		;DISPLAY MARKER AT TARGET
	JSR DSPMRK		
	JSR ABMVEL		;CALCULATE H & V MISSILE VELO
	LDA ATRACT
	IFNE			;ATTRACT?
	LDA ZX,NMMISB		;NO.
	CMP I,4
	IFEQ
	TXA
	JSR BASLOW		;"LOW"
	LDA I,SLOABM		;LOW SOUND
	ELSE
	LDA I,SABLAU		;LAUNCH SOUND
	THEN
	JSR SNDON
	THEN
	DEC ZX,NMMISB		;YES. DECREMENT # MISSILES
	IFEQ
	LDA ATRACT
	IFNE
	TXA
	JSR BASEMP		;"EMPTY"
	THEN
	THEN
	TXA
	TAY
	JSR ERAABM		;ERASE MISSILE
	TYA
	TAX
	LDY I,0			;FORCE EXIT
	THEN
	DEY			;NOT AN OPEN SLOT DECREMENT ABM
	MIEND
	RTS
	.SBTTL UPDATE ICBM POSITIONS
UPICBM:	LDA Z,ICBFRH		;TIME TO UPDATE ICBMS
	IFNE			;AT THIS SPEED?
	DEC Z,ICBFRH		;NO
	ELSE
	LDA Z,ICBFRL		;YES. RESTART TIMER
	CLC
	ADC Z,ICSPDL
	STA Z,ICBFRL
	LDA Z,ICBFRH
	ADC Z,ICSPDH
	STA Z,ICBFRH
	LDX I,IBLOOP
	STX XLOOP
	LDA I,-1		;MAX FOR LOWEST ICBM
	STA LOICBV
	STA MIRVIX		;ICBM TO MIRV (NONE)
	LDA I,0
	STA ICBONS
	STA CRMONS
	STA HIICBV
	BEGIN			;LOOP FOR ICBMS
	LDX XLOOP
	LDA AX,ICCPVH		;ACTIVE ICBM?
	IFNE
	TXA			;YES. UPDATE ITS POSITION
	CLC
	ADC I,NABMS		;CALCULATE MISSILE INDEX
	STA MISIND
	LDA AX,ICCPVH
	CMP LOICBV
	IFCC			;THIS ICBM LOWEST?
	STA LOICBV		;YES. SAVE ITS HEIGHT
	THEN
	CMP HIICBV		;HIGHEST?
	IFCS
	STA HIICBV		;YES
	THEN
	AND ATRACT		;NO MIRVS IF ATTRACT
	JSR ICPOSI		;UPDATE POSITION OF CM OR ICBM
	THEN
	DEC XLOOP
	MIEND
	LDY EXPLCT
	CPY I,12.
	IFCS			;NO MIRVS IF TOO MANY EXPLOSIONS
	LDA I,-1
	STA MIRVIX
	THEN
	THEN
	RTS
	.PAGE
	.SBTTL UPDATE ICBM OR CM POSITION
;INPUT:	ACC=HEIGHT OF CURRENT ICBM
;	X,XLOOP=INDEX INTO IC ARRAYS
;OUTPUT:XLOOP PRESERVED
;
ICPOSI:	
	TAY
	LDA ICBTYP
	AND AX,CIBITS
	IFEQ			;ICBM OR CM?
	CPY I,MIRVLO		;ICBM. IN MIRV RANGE?
	IFCS
	CPY I,MIRVHI
	IFCC
	STX MIRVIX		;YES. SAVE # FOR LATER
	THEN
	THEN
	JSR MISTRA		;WRITE TRAIL OVER TIP
	JSR UPDPOS		;UPDATE POSITION
	ELSE
	JSR CMERAS		;CM. ERASE OLD PIC
	JSR CMNEWP		;DERIVE NEW POSITION
	THEN
	LDX XLOOP
	IFCS			;AT TARGET?
	LDA ICBTYP	;YES
	AND AX,CIBITS
	IFNE	;CM?
	JSR CMSNOF	;YES.SHUT UP.
	ELSE
	LDX MISIND		;NO. ICBM
	JSR ERAMIS		;ERASE TRAIL
	LDX XLOOP
	THEN
	JSR DETONA		;YES. DETONATE IT
	JSR DESTROY		;YES. DESTROY CITY OR BASE
	ELSE
	LDA ICBTYP		;NO
	AND AX,CIBITS
	IFEQ			;CM OR ICBM?
	JSR MISTIP		;ICBM. DRAW TIPS
	INC ICBONS
	ELSE
	JSR CMDRAW		;CM. DRAW CM
	INC CRMONS
	THEN
	THEN
	RTS
	.PAGE
	.SBTTL UPDATE ABM POSITIONS
UPABMS:	LDA I,0
	STA ABMONS
	LDX I,ABLOOP		;LOOP FOR ALL ABMS
	BEGIN
	LDA AX,ABCPVH		;ACTIVE ABM?
	IFNE
	STX MISIND		;YES
	LDY I,2			;DEFAULT IS SLOW (MOVE 2 DOTS)
	LDA AX,ABOPH
	CMP I,MISB2H	
	IFEQ			;CENTER BASE?
	LDY I,6			;YES. MOVE FAST
	THEN
	STY FASABM
	BEGIN
	JSR MISTRA		;CHANGE TIPS TO TRAIL
	JSR UPDPOS		;UPDATE ITS POSITION
	IFCS			;AT TARGET
	JSR ERAMRK		;ERASE MARKER
	JSR ERAMIS		;ERASE TRAIL
	JSR DETONA		;YES. DETONATE
	LDA I,0
	STA FASABM
	THEN
	DEC FASABM
	MIEND			;EXIT LOOP
	LDA AX,ABCPVH		;DID IT BLOW UP?
	IFNE
	JSR MISTIP		;NO. DRAW TIP
	INC ABMONS		;UPDATE ABM ON SCREEN COUNTER
	THEN
	THEN
	DEX
	MIEND
	RTS
	.PAGE
	.SBTTL UPDATE MISSILE POSITION
;INPUT:MISIND=MISSILE INDEX
;	ABTAV&ABTAH=TARGET ARRAY
;	ABVELH&L AND AVEHH&L =POSITION INCREMENT ARRAY
;	ABCPVH&L AND ABCPHH&L=OLD POSTION ARRAY
;OUTPUT:
;CS:AT TARGET;CC NOT THERE YET
;	ABCPVH&L AND ABCPHH&L ARE UPDATED TO=NEW POSTION
UPDPOS:
	LDY MISIND
	LDA AY,ABCPHL		;SAVE OLD MISSILE POSITION
	CLC			;AND CALCULATE AND SAVE
	ADC AY,ABVEHL		;NEW POSITION FOR BOTH
	STA AY,ABCPHL		;V & H COORDINATES
	LDA AY,ABCPHH
	ADC AY,ABVEHH
	STA AY,ABCPHH
	LDA AY,ABCPVL
	CLC
	ADC AY,ABVEVL
	STA AY,ABCPVL
	LDA AY,ABCPVH
	ADC AY,ABVEVH
	STA AY,ABCPVH
	CMP AY,ABTAV
	IFNE
	ROR
	EOR AY,ABVEVH
	IFMI
	SEC
	RTS
	THEN
	THEN
	LDA AY,ABCPHH
	CMP AY,ABTAH
	IFNE
	ROR
	EOR AY,ABVEHH
	IFMI
	SEC
	RTS
	THEN
	THEN
	CLC
	RTS			;RETURN WITH CC A CS INFO
	.PAGE
	.SBTTL PROCESS EXPLOSIONS
PREXPL:
	LDY EXPFRA		;TIME TO UPDATE EXPLOSIONS?
	DEY			;NO. DECREMENT EXPLOSION UPDATE TIMER
	IFMI
	LDY I,EXPEND-EXPFIX-2	;YES RESET TIMER
	THEN
	STY EXPFRA
	LDA EXPLCT
	IFNE			;ANY EXPLOSIONS?
				;YES. LOOP FOR NEXT BATCH OF BANGS
	LDX AY,EXPSIX
	BEGIN
	LDA AX,EXCPV		;EXPLOSIONS DONE YET?
	IFNE			;NO. UPDATE ITS TIMER.
	STA V2
	INC AX,EXTIME
	LDA AX,EXTIME
	AND I,7F		;REMOVE TYPE FLAG
	TAY
	CMP I,EXDONE
	IFCS			;EXPLOSION JUST FINISHED?
	LDA AX,EXTIME
	IFPL
	DEC DEFEXP
	ELSE
	DEC OFFEXP
	THEN
	DEC EXPLCT		;YES. DECREMENT COUNTER
	LDA I,0			;DEACTIVATE IT
	STA AX,EXCPV
	ELSE
	LDA AX,EXCPH		;NO. SET UP EXPLOSION
	STA H2			;COORDINATES
				;SET UP OLD & NEW RADII AS A FUNCTION
	LDA AY,OLDRAD		;OF TIME.
	STA RADIUS
	LDA AY,NEWRAD
	STA RANGE
	JSR DSPEXP		;DISPLAY EXPLOSION
	JSR DAMAGE		;DETECT & PROCESS EXPLOSION DAMAGE.
	THEN
	THEN
	DEX			;NEXT EXPLOSION
	LDY EXPFRA
	TXA
	CMP AY,EXPFIX	
	EQEND			;END LOOP IF DONE WITH LAST BANG IN BATCH
	THEN
	RTS
EXPFIX:	.BYTE -1,3,7,11.,15.,19.
EXPEND:
EXPSIX	=EXPFIX+1
OLDRAD:	.BYTE 0,0,2,3,4,5,6,7,8,9,10.,11.,12.,13.
	.BYTE 13.,12.,11.,10.,9,8,7,6,5,4,3,2,1,0,0
NEWRAD	=OLDRAD+1		;OLD & NEW EXPLOSION RADIUS VALUES.
	.PAGE
	.SBTTL MISSILE DAMAGE DETECTION & PROCESS
;INPUT:	X=EXPLOSION ID
;	V2 AND H2: EXPLOSION COORDINATES
;	RANGE: EXPLOSION RANGE
;OUTPUT:X PRESERVED
;
DAMAGE:	TXA
	PHA
	LDA RANGE		;ADJUST RANGE FOR SPUTNIK (1ST MISSILE CHECKED)
	STA DANGER
	LDY I,IBLOOP+1		;+1 FOR SPUTNIK
	LDA V2
	CMP I,LOWEST
	IFCS			;EXPLOSION LOWER THAN THIS DO NO DAMAGE
	BEGIN			;LOOP FOR ALL ICBMS & SPUTNIK
	LDA AY,ICCPVH
	IFNE			;ACTIVE ICBM?
	STA V1
	LDA AY,ICCPHH
	STA H1			;YES
	CPY I,NICBMS	;ADD OBJECT SIZE TO EXPLOSION RANGE
	IFEQ
	LDA I,6		;SPUTNIK/BOMBER.
	ELSE
	LDA ICBTYP
	AND AY,CIBITS
	IFEQ
	LDA I,1		;ICBM
	ELSE
	LDA I,3		;CM
	THEN
	THEN
	CLC
	ADC DANGER
	STA RANGE
	JSR DELTA		;CALCULATE EXPLOSION-ICBM
				;DELTA WITHIN RANGE?
	IFCC
	TYA
	PHA
	CLC
	ADC I,NABMS		;YES
	STA MISIND
	CPY MIRVIX
	IFEQ			;WAS ICBM TO BE MIRVED?
	LDA I,-1		;YES. CLEAR IT
	STA MIRVIX
	THEN
	CPY I,NICBMS
	IFCS			;SPUTNIK OR ICBM?
	JSR SPUTKI		;SPUTNIK
	ELSE
	LDA ICBTYP
	AND AY,CIBITS
	IFEQ			;CM OR ICBM?
	JSR ICKILL		;ICBM KILL
	ELSE
	JSR CMKILL		;CM KILL
	THEN
	THEN
	JSR DETONA		;DETONATE ICBM
	PLA
	TAY
	THEN
	THEN
	DEY
	MIEND
	THEN
	PLA
	TAX
	RTS
	.PAGE
	.SBTTL SPUTNIK KILL
SPUTKI:
	JSR STSNOF		;SOUND OFF
	LDA I,0			;DEACTIVATE SPUTNIK
	STA HORFIR
	STA SPUTIM
	LDX I,3			;SUB. GIVE MULTIPLE SCORE (4X ICBM)
	BNE GEKILL		;ALWAYS
ICKILL:	DEC ICBONS		;ICBM
	JSR DETARG		;CLEAR TARGET BIT
	LDX MISIND
	JSR ERAMIS		;ERASE TRAIL
	LDX I,0			;GIVE MULTIPLE SCORE (IX ICBM)
	LDY MISIND
	LDA AY,ABCPVH		;GET ICBM HEIGHT
	CMP I,LOWEST		;DON'T GIVE POINTS FOR REAL LOW ICBM
	BCS GEKILL		;BRANCH IF KILL OK
	RTS
CMKILL:
	DEC CRMONS		;DECREASE CM ON SCREEN COUNT
	JSR DETARG		;DETARGET CITY OR BASE
	JSR CMSNOF		;CM SOUND OFF
	LDX I,4			;5X ICBM
GEKILL:	JSR ICMULT
	LDY PLAYUP
	JSR UPSCOR		;UPDATE SCORE (2 ICBMS)
	JMP EXSNON		;BANG ON
DETARG:	LDY MISIND		;DETARGET CITY OR BASE
	LDA AY,ABTAH
	PHA
	LDA I,0
	STA AY,ABTAH		;CLEAR H TARGET
	PLA
	LDY I,IBLOOP
	BEGIN			;ANY OTHERS AIMED AT THIS TARGET?
	CMP AY,ICTAH
	IFEQ
	RTS			;YES. DON'T DETARGET IT
	THEN
	DEY
	MIEND
	LDY I,NCITY+NMISBA
	BEGIN			;FIND CITY OR BASE TARGETED
	DEY
	CMP AY,HTARGS
	EQEND
	LDA I,0
	JMP SETARG		;DETARGET IT
	.PAGE
	.SBTTL DESTROY A CITY OR BASE
;INPUT:		MISIND=ICBM THAT GOT THRU
;OUTPUT:	X PRESERVED, ACC, Y DESTROYED
;
DESTROY:
	LDY MISIND
	LDA AY,ABTAH
	LDY I,9
	BEGIN			;FIND INDEX OF CITY OR BASE TARGETED
	DEY
	CMP AY,HTARGS
	EQEND
	LDA I,0
	JSR SETARG		;DETARGET
	CPY I,NCITY
	IFCS			;CITY OR BASE?
	LDA I,0			;BASE
	STA AY,NMMISB-NCITY	;DESTROY ALL REMAINING ABMS
	LDA AY,CIBITS-NCITY	;AT BASE
	EOR I,0E0
	AND MBLEFT
	CMP MBLEFT
	IFNE			;BASE ALREADY DESTROYED?
	STA MBLEFT		;NO. DESTROY IT & MAKE SOUND
	LDA I,SOHNO
	JSR SNDON
	TYA
	SEC
	SBC I,NCITY
	JSR BASEMP		;"EMPTY"
	THEN
	ELSE
	LDA AY,CIBITS		;CITY. REMOVE CITY FROM ALIVE
	EOR I,0FC		;STATUS
	LDY PLAYUP
	AND AY,CILEFT
	CMP AY,CILEFT
	IFNE
	STA AY,CILEFT
	LDA AY,PLIVES
	IFNE			;DECREMENT # OF CITIES
	SEC
	SBC I,1
	STA AY,PLIVES
	THEN
	INC CIDOWN		;INCREMENT # CITIES DESTROYED
	LDA I,SOHNO
	JSR SNDON		;MAKE DESTROY SOUND
	THEN
	THEN
	RTS
	.PAGE
	.PAGE
	.SBTTL LAUNCH ICBMS
ICBLAU:	
	LDA ICBTOL
	ORA CRMTOL
	IFNE			;IS OFFENSE STILL ALIVE?
	LDA WAVENO		;YES.
	ASL
	EOR I,0FF		;LAUNCH IF LAUGHT - (WAVENO*2)>=HEIGHT OF HIGHEST ICBM
	SEC
	ADC I,LAUHGT
	CMP I,LAULOW
	IFCC			;<MINIMUM?
	LDA I,LAULOW		;YES. USE MIN
	THEN
	CMP HIICBV
	IFCS
				;CALCULATE # OF OFFENSIVE LAUNCHINGS POSSIBLE
	LDA I,MXICON
	SEC
	LDX A,PLCPV
	IFNE			;PLANE COUNTS AS A POTENTIAL BANG
	CLC
	THEN
	SBC OFFEXP
	SEC
	SBC ICBONS
	SEC
	SBC CRMONS
	IFPL			;OFFENSIVE MISSILES + BANGS MUST BE <8
	STA POTENT
	CLC
	ADC I,NEXPLO-MXICON-1

	SEC
	SBC DEFEXP
	SEC
	SBC ABMONS		;MISSILES + BANGS MUST BE <20
	THEN
	IFPL
	CMP POTENT
	IFCC
	STA POTENT		;TAKE LOWEST POSSIBLE # OF LAUNCHES
	THEN
	JSR ACTPLA		;ACTIVATE PLANE IF POSSIBLE
	LDA POTENT
	IFPL			;ANY POTENTIAL LAUNCHES LEFT?
	LDA CRMTOL		;YES.
	IFEQ			;ANY CM'S TO LAUNCH?
	JSR ICNORM		;NO NORMAL LAUNCH
	ELSE
	LDA CRMONS		;YES
	CMP I,3
	IFCC			;< 3 CMS ON SCREEN?
	CLC			;YES
	ADC ICBONS
	CMP I,5
	IFCC			;ICBMS +CMS ON SCREEN <5 ?
	LDA ICBTOL		;YES
	IFEQ			;ANY ICBMS TO LAUNCH?
	JSR CMLAUN		;NO. LAUNCH CM
	ELSE
	LDA A,RANDOM		;YES
	AND I,03
	IFEQ
	JSR CMLAUN		;1/4 CM LAUNCHES
	ELSE
	JSR ICNORM		;3/4 NORMAL ICBM LAUNCHES
	THEN
	THEN
	THEN
	ELSE
	JSR ICNORM		;NO.
	THEN
	THEN
	THEN
	THEN
	THEN
	THEN
	RTS
	.PAGE
	.SBTTL FIRE ICBMS FROM SPUTNIK, MIRV OR TOP OF SCREEN

;INPUT:		POTENT=# -1 OF POTENTIAL LAUNCHES
ICNORM:
	LDX I,-1
	LDA ICBTOL
	IFNE			;ANY LEFT TO LAUNCH?
	SEC
	LDA A,PLCPV
	IFNE
	CLC
	THEN
	LDA I,MXICON		;YES.
	SBC CRMONS
	SEC
	SBC CRMONS
	SEC
	SBC ICBONS
	IFPL
	TAX			;X=7-(2*CMS ON SCREEN)-ICBMS-SPUT
	INX			;ON SCREEN
	CPX I,4
	IFCS			;MAX AT 4
	LDX I,4
	THEN
	CPX ICBTOL
	IFCS			;MAX AT ICBTOL
	LDX ICBTOL
	THEN
	INC POTENT
	CPX POTENT
	IFCS			;MAX AT POTENT
	LDX POTENT
	THEN
	DEX
	THEN
	THEN
	STX POTENT		;# OF POTENTIAL LAUNCHINGS -1
	LDX POTENT
	IFPL			;ANY TO LAUNCH?
	LDA WAVENO
	CMP I,SPUTWV
	IFCS			;OK TO FIRE FROM SPUTNIK?
	LDA A,PLCPV		;YES
	IFNE			;SPUTNIK?
	LDA HORFIR		;YES
	CMP SPUTDS		;SPUTNIK GONE FAR ENOUGH?
	IFCS
	LDA A,PLCPH
	CMP I,30
	IFCS			;SPUTNIK IN BOUNDS?
	CMP I,-30
	IFCC
	LDA I,0
	STA HORFIR
	JMP SPUTFIR		;YES
	THEN
	THEN
	THEN
	THEN
	THEN
	LDA WAVENO		;CAN'T FIRE FROM SPUTNIK
	CMP I,MIRVWV
	IFCS			;MIRVS ALLOWED?
	LDY MIRVIX		;YES
	IFPL			;ANY MIRV ABLES?
	JMP MIRVER		;YES. MIRV LAUNCH
	THEN
	THEN
	JMP FROMTOP		;LAST RESORT - FIRE FROM TOP OF SCREEN
	THEN
	RTS
	.PAGE
	.SBTTL LAUNCH AN ICBM FROM TOP OF SCREEN
LAUICB:	STX SAVEXX
	JSR ICOPEN		;FIND A SLOT
	LDX MISIND
	IFPL			;SUCCESSFUL?
	LDA I,TOPSCR		;X=ICBM TO BE LAUNCHED.
	STA AX,ICCPVH
	STA AX,ICOPV		;SET UP ICBM ORIGIN
	LDA A,RANDOM
	LDX I,IBLOOP		;VERIFY THAT THIS IS A UNIQUE LAUNCH SITE
	BEGIN
	CMP AX,ICOPH
	IFEQ
	LDA A,RANDOM		;ALREADY USED. GET A NEW ONE
	LDX I,IBLOOP+1		;AND START OVER
	THEN
	DEX
	MIEND			;EXIT LOOP WHEN NO MATCH IS FOUND
	LDX MISIND
	STA AX,ICOPH
	STA AX,ICCPHH
	JSR GUICBM		;SET UP ICBM TARGET
	LDA I,0FF
	STA HIICBV
	THEN
	LDX SAVEXX
	RTS
	.PAGE
	.SBTTL CRUISE MISSILE LAUNCH
CMLAUN:
	JSR LAUICB		;NORMAL LAUNCH
	LDX MISIND
	IFPL
	JSR CMSNON		;START SOUND
	INC CRMONS		;UPDATE CM COUNTER
	DEC CRMTOL
	INC ICBTOL		;UNDO LAUICB'S ICBM COUNTER UPDATES
	DEC ICBONS
	LDA ICBTYP		;SET MISSILE TYPE TO CM
	ORA AX,CIBITS-NABMS
	STA ICBTYP
	THEN
	RTS

	.SBTTL LAUNCH ICBMS FROM TOP
FROMTOP:
	BEGIN
	JSR LAUICB
	DEC POTENT
	MIEND
	RTS
	.PAGE
	.SBTTL MIRV AN ICBM
;FUNCTION:	LAUNCH ICBMS FROM AN ICBM'S CURRENT POSITION
;INPUT:		Y=# OF ICBM BEING MIRVED
;		ICCPHL,HH,VL,VH(MISIND)=THIS ICBM'S CURRENT POSITION
;		ICTAH,V(MISIND)=THIS ICBM'S TARGET
;		ICBONS=#OF ICBMS ON SCREEN
;OUTPUT:	ICTAH,V(X) AND ICCPHL,HH,VL,VH(X) AND ICTYPE(X)
;		NEW ICBM'S LAUNCHED FROM INPUT ICBM
;		Y,ACC,X,J,K,PATERN,SAVEXX,MISIND DESTROYED
;		AND ICVEHL,HH,VL,VH(X) SET UP FOR ICBONS UPDATED
SPUTFIR:LDY I,NICBMS		;FIRE FROM SPOT
MIRVER:
	LDA POTENT
	CMP I,2
	IFCS
	LDA I,2
	THEN
	STA POTENT		;NO MORE THAN 3 SHOTS FROM A MIRV
	STY SAVEXX
	BEGIN			;LOOP FOR EACH ICBM TO LAUNCH
	JSR ICOPEN		;ANY MORE OPENINGS?
	LDX MISIND
	IFPL
	LDY SAVEXX
	LDA I,0
	CPY I,NICBMS+1		;IS THIS THE SPUTNIK?
	IFEQ
	LDA PLAVEL		;YES. ADJUST ICBM ORIGIN ACCORDING TO
	IFMI			;SPUTNIK'S DIRECTION
	LDA I,-4
	ELSE
	LDA I,4
	THEN
	THEN
	BIT COCKTA
	IFVS
	EOR I,0FF
	THEN
	CLC
	ADC AY,ICCPHH		;YES. SET NEW ICBM'S CURRENT
	STA AX,ICCPHH		;POSITION AND ORIGIN=ORIGINAL
	STA AX,ICOPH		;ICBM
	LDA AY,ICCPVH
	STA AX,ICCPVH
	STA AX,ICOPV
	JSR GUICBM		;SET NEW ICBM TARGET
	DEC POTENT
	THEN
	MIEND			;EXIT LOOP IF ALL ICBM'S LAUNCHED OR NO OPEN SLOTS
	RTS
	.SBTTL FIND OPEN ICBM SLOT
;INPUT:		ICBONS=# OF ICBM'S ON SCREEN
;		ICTAV(X)=ICBM VERTICAL POSITION ARRAY, 0 INDICATES OPEN SLOT
;OUTPUT:	ACC,X DESTROYED
;		J,K,Y PRESERVED
;		MISIND=IC ARRAY SLOT INDEX (-1 IF NONE FOUND)
;
ICOPEN:				;FIND AN OPEN ICBM SLOT
	LDX I,IBLOOP		;YES, FIND A SLOT
	BEGIN
	LDA AX,ICCPVH
	IFEQ			;OPEN SLOT?
	STX MISIND		;YES
	LDX I,0
	THEN
	DEX			;NOT YET
	MIEND			
	RTS			;EXIT
	.PAGE
	.PAGE
	.SBTTL SET UP ICBM TARGET,UPDATE COUNTERS
GUICBM:	
	LDX PLAYUP
	LDA ZX,CILEFT		;CITIES LEFT
	EOR CITARG		;CITIES TARGETED
	AND ZX,CILEFT
	STA J			;J=1'S=UNTARGETED LIVING CITIES
	LDA MBLEFT
	EOR MBTARG
	AND MBLEFT
	STA K			;1'S=UNTARG LIVE BASES
	LDY CIDOWN
	LDA CITARG
	AND ZX,CILEFT
	BEGIN			;COUNT # OF LIVE TARG CITIES & CITIES DOWNED
	IFMI
	INY
	THEN
	ASL
	EQEND
	CPY I,3
	IFCC			;3 TARG &/OR DEAD CITIES?
	LDY I,0			;NO
	LDA J			;ANY LIVING UNTARG CITIES?
	IFNE
	JSR RANBIT		;YES. AIM RANDOMLY AT A LIVING, UNTARG CITY
	ELSE
	LDY I,6			;NO
	LDA K
	IFNE			;ANY LIVING UNTARG BASES?
	JSR RANBIT		;YES. AIM RANDOMLY AT A LIVING, UNTARG BASE
	ELSE
	JSR ANYTHG		;NO. AIM AT ANYTHING
	THEN
	THEN
	ELSE
	LDY I,6			;YES.
	LDA K
	IFNE			;ANY LIVING UNTARG BASES?
	JSR RANBIT		;YES. AIM RANDOMLY AT A LIVING UNTARG BASE
	ELSE
	JSR NOTLCI		;NO, AIM AT ANYTHING BUT A LIVING TARGETED CITY
	THEN
	THEN			;AT THIS POINT, Y=0-8 & =TARGETED CITY (0-5) OR BASE (6-8)
	LDA I,0FF
	JSR SETARG		;SET OBJECT AS TARGETED
	LDX MISIND		;ASSIGN TARGET COORDINATES TO ICBM
	LDA AY,HTARGS
	STA AX,ICTAH
	LDA AY,VTARGS
	STA AX,ICTAV
	LDA I,0			;FRACTIONAL POSITION STARTED AT 0
	STA AX,ICCPHL
	STA AX,ICCPVL
	LDA AX,CIBITS		;SET ICBM TYPE
	EOR I,0FF
	AND ICBTYP
	STA ICBTYP
	JSR ICBVEL		;SET UP ICBM SLOPE
	DEC ICBTOL		;DECREMENT # OF ICBMS TO LAUNCH
	INC ICBONS		;INCREMENT # ON SCREEN
	RTS
	.PAGE
	.SBTTL TARGETING BIT ROUTINES
ANYTHG:	LDA A,RANDOM		;RETURNS RANDOM # FROM 0-8 IN Y
	LSR
	AND I,07
	TAY
	IFCS
	INY
	THEN
	RTS
NOTLCI:
	LDY I,0
	LDA J
	EOR I,0FF		;BITS ON IF NOT A LIVE UNTARGETED CITY
				;PICK ANY NON LIVE UNTARGETED CITY
;INPUT:	ACC=BITS INDICATING POSSIBLE RANDOM #'S IF 1: D7=0+Y, D6=1+Y...
;	Y=VALUE OF D7 (0 OR 6)
;OUTPUT:Y=RANDOM # INDICATING POS. OF AN ON BIT + Y

RANBIT:	PHA
	LDX I,0
	BEGIN			;COUNT # OF 1'S
	AND I,0FF
	IFMI
	INX
	THEN
	ASL
	EQEND
	STX J			;X=# OF 1'S
	BEGIN
	LDA A,RANDOM
	AND AX,ANDBIT-1
	CMP J
	CCEND
	TAX			;ACC=RANDOM # FROM 0 -> X-1 (WHICH 1 TO USE)
	PLA
	DEY
	BEGIN			;LOOP UP TO THE XTH 1 IN ACC
	BEGIN			;LOOP UP TO NEXT 1
	ASL
	INY
	CSEND
	DEX
	MIEND
	RTS
ANDBIT:	.BYTE 0,1,3,3,7,7,7,7

	.PAGE
	.SBTTL CLEAR/SET TARGET BIT
;INPUT:	0 OR FF IF BIT IS TO BE CLEARED OR SET
;	Y=INDEX INTO TARGET ARRAY (0-8)
;OUTPUT:BIT SET OR CLEARED IN CITARG (D7-D2=INDEX 0-5)
;	OR MBTARG (D7-D5=INDEX 6-8)
;	Y PRESERVED; ACC,J,K DESTROYED
;
SETARG:	STA J			;SAVE CLEAR/SET FLAG
	STY K
	LDX I,0
	TYA
	CMP I,6
	IFCS			;BASE INDEX?
	SEC			;YES. ADJUST BIT INDEX
	SBC I,6
	TAY
	LDX I,1
	THEN
	LDA AY,CIBITS		;CLEAR BITS
	EOR I,0FF
	AND ZX,CITARG
	BIT J
	IFMI			;SET BIT?
	ORA AY,CIBITS		;YES
	THEN
	STA ZX,CITARG
	LDY K
	RTS
	.PAGE
	.SBTTL PROCESS MISSILE DETONATION
;INPUT:
;	MISIND:	MISSILE INDEX (ABM=0)
;OUTPUT:	PATERN=FF IF AN EXPLOSION HAPPENED, 0 IF NO ROOM
;		X PRESERVED; ACC,Y DESTROYED
;
DETONA:	STX SAVEX		;SAVE X
	LDX MISIND
	LDA AX,ABCPVH
	CMP I,TOPSCR-<EXDONE/2>+1	;WAS EXPLOSION TOO CLOSE TO TOP OF SCREEN?
	IFCC
	LDY EXPLOP		;GET NEXT BANG SLOT
	DEC EXPLOP		;PT TO NEXT SLOT
	IFMI
	LDA I,EXLOOP
	STA EXPLOP
	THEN
	INC EXPLCT		;YES. BUMP UP EXPLOSION COUNTER
	LDA AX,ABCPHH
	STA AY,EXCPH		;SET UP EXPLOSION COORDINATES
	LDA AX,ABCPVH
	STA AY,EXCPV
	CPX I,8			;SET EXPLOSION TYPE AND
	IFCS			;INCREMENT OFFENSE OR DEFENSE BANG COUNT
	INC OFFEXP		;OFFENSE (ICBM)
	LDA I,80		;OFFENSE CODE FOR EXTIME
	ELSE
	INC DEFEXP		;DEFENSE CABM
	LDA I,0			;DEFENSE CODE
	THEN
	STA AY,EXTIME
	THEN
	LDA I,0			;OPEN THE MISSILE SLOT
	STA AX,ABCPVH
	STA AX,ABCPHH		;(FOR TARGETING)
	LDX SAVEX
	RTS
	.PAGE
	.SBTTL CALCULATE DELTA FROM OBJECT 1 TO 2
;INPUT:	V1 & H1: OBJECT 1 COORDINATES
;	V2 & H2: OBJECT 2 COORDINATES
;OUTPUT:CC (IN RANGE) OR CS (OUT OF RANGE)
;
DELTA:	LDA V1
	CMP V2
	IFCS
	SBC V2
	ELSE
	LDA V2
	SEC
	SBC V1
	THEN
	CMP RANGE		;VERTICAL IN RANGE?
	IFCC
	STA VADR		;YES
	LDA H1
	CMP H2
	IFCS
	SBC H2
	ELSE
	LDA H2
	SEC
	SBC H1
	THEN
	CMP RANGE		;HORIZ DELTA IN RANGE?
	IFCC
	CMP VADR		;YES. SET J=SMALLEST DELTA,
	IFCC			;K=LARGEST DELTA
	STA J
	LDA VADR
	STA K
	ELSE
	STA K
	LDA VADR
	STA J
	THEN
	LDA J			;MAX DELTA + 3/8 MINIMUM DELTA
	LSR			;WHICH APPROXIMATES THE ACTUAL
	CLC			;VALUE VERY CLOSELY
	ADC J
	LSR
	LSR
	CLC
	ADC K
	CMP RANGE
	THEN
	THEN
	RTS
	.PAGE
	.SBTTL CALCULATE MISSILE VELOCITY & DISPLAY INCREMENT
;X AND Y PRESERVED
	
ABMVEL:	STY MISIND
	BPL GENVEL
ICBVEL:	TXA
	CLC
	ADC I,NABMS
	STA MISIND
GENVEL:
	TXA			;SAVE X AND Y
	PHA
	TYA
	PHA
	LDX MISIND
	LDA AX,ABTAV
	CMP AX,ABCPVH		;CALCULATE ABSOLUTE VALUES FOR
	IFCS			;H & V DELTAS FROM ORIGIN TO TARGET
	SBC AX,ABCPVH
	ELSE
	LDA AX,ABCPVH
	SEC
	SBC AX,ABTAV
	THEN
	STA VADR
	LDA AX,ABTAH
	CMP AX,ABCPHH
	IFCS
	SBC AX,ABCPHH
	ELSE
	LDA AX,ABCPHH
	SEC
	SBC AX,ABTAH
	THEN
	STA HADR
				;CALCULATE # FRAMES TO TAKE TO
				;REACH TARGET
				;CALCULATE # DOTS FROM ORIGIN TO GOAL.
	LDA HADR		;SET J=MINIMUM DELTA AND
	CMP VADR		;K=MAXIMUM DELTA
	IFCC
	STA J
	LDA VADR
	STA K
	ELSE
	STA K
	LDA VADR
	STA J
	THEN
				;DELTA = MAX DELTA + 3/8 MIN. DELTA
	LDA J
	LSR
	CLC 
	ADC J
	LSR
	LSR
	CLC
	ADC K
	IFCS			;IF DELTA >255
	LDA I,0FF		;THEN SET TO MAX
	THEN
	STA J
				;CALCULATE H & V VELOCITIES
				;
				;VERTICAL VELOCITY CALCULATION=
	LDY J			;VERTICAL DELTA/TOTAL DELTA
	LDA VADR
	JSR DIVIDE
	LDA QUOTH
	STA AX,ABVEVH
	LDA QUOTL
	STA AX,ABVEVL
				;HORIZ VELOCITY CALCULATION
	LDY J			;HORIZ DELTA/TOTAL DELTA
	LDA HADR
	JSR DIVIDE
	LDA QUOTH
	STA AX,ABVEHH
	LDA QUOTL
	STA AX,ABVEHL
	LDA AX,ABTAV		;SET SIGN ON VELOCITIES
	CMP AX,ABCPVH
	IFCC
	DPNEGA <AX,ABVEVL>,<AX,ABVEVH>
	THEN
	LDA AX,ABTAH
	CMP AX,ABCPHH
	IFCC
	DPNEGA <AX,ABVEHL>,<AX,ABVEHH>
	THEN
	PLA			;RESTORE X AND Y
	TAY
	PLA
	TAX
	RTS
	.PAGE
	.SBTTL DIVIDE
;INPUT:	ACC=DIVIDEND
;	Y=DIVISOR
;OUTPUT:QUOTH=MSB OF QUOTIENT(INTEGER)
;	QUOTL=LSB OF QUOTIENT(FRACTION)
;	J PRESERVED
;
DIVIDE:
	STY DIVSOR
	STX SAVEX
	JSR DIVIT
	STX QUOTH
	LDX I,0
	STX MQ
	JSR DIVIT1
	STX QUOTL
	LDX SAVEX
	RTS
;
DIVIT:	STA MQ
	LDA I,0
DIVIT1:	LDY I,7
	BEGIN
	ROL MQ
	ROL
	IFCS
	SBC DIVSOR
	SEC
	BCS 20$
	THEN
	CMP DIVSOR
	IFCS
	SBC DIVSOR
	THEN
20$:	DEY
	MIEND
	ROL MQ
	LDX MQ
	RTS
	.PAGE
	.SBTTL PLAYER HEALTH ANALYSIS
TALIVE:
	LDY PLAYUP
	LDA NMMISB
	ORA NMMISB+1
	ORA NMMISB+2
	STA K
	IFEQ			;ANY BASES LEFT?
	LDA AY,CILEFT		;NO
	IFNE
	LDA CIDOWN
	CMP I,3
	IFCS
	LDA I,0
	THEN
	THEN			;ALL ABM BASES EMPTY AND MAX
	IFEQ			;# CITIES DESTROYED?
	LDA I,0			;YES. STOP OFFENSE
	STA HORFIR
	STA ICBTOL
	STA CRMTOL
	LDA A,PLCPV		;NO
	ORA ABMONS
	ORA EXPLCT
	IFEQ			;SPUTNIK TO CLEAR OFF?
	LDA I,S.SETU		;NO. END WAVE
	STA STATE
	LDA I,CENDW1
	STA SETUPC
	THEN
	THEN
	THEN
	LDA ABMONS
	ORA EXPLCT
	ORA K
	IFEQ			;ANY ABMS OR BANGS ON SCREEN?
	LDA I,-1		;NO. REQUEST CLEAN SCREEN
	STA ALIVE
	THEN
	LDA ALIVE
	IFNE			;CLEAN SCREEN?
	LDA I,0			;YES. SPEED OFF SPUTNIK
	STA PLATIM
	STA ICBFRH
	STA ICSPDH
	STA ICSPDL
	JSR DEACUR		;ERASE CURSOR
	THEN
	LDA ICBTOL
	ORA ABMONS
	ORA CRMTOL
	ORA ICBONS
	ORA CRMONS
	ORA A,PLCPV
	ORA EXPLCT
	IFEQ			;OFFENSE DEAD & NO BANGS?
	LDA I,S.SETU		;YES. END WAVE
	STA STATE
	LDA I,CENDW1
	STA SETUPC
	THEN
	RTS
QCHKS3:	.BYTE CHKSM3
	.PAGE
	.SBTTL PLAY STATE MESSAGE
ADVICE:
	LDA ATRACT
	IFNE			;ATTRACT?
	JMP BLNKAR		;NO. BLINK PLAYER ARROW
	THEN
	LDA STATE		;ATTRACT
	CMP I,S.PLAY
	IFEQ
	LDY I,BCKGND		;ATTRACT: OUTPUT CITY ARROWS
	LDA BLINKS
	IFEQ
	LDY I,PLACOL
	THEN
	STY PATERN		;OUTPUT A BLANK OR AN ARROW?
	LDX I,NCITY-1		;YES
	BEGIN			;LOOP FOR EACH CITY
	STX SAVEX
	LDA PATERN		;COLOR OF ARROWS
	STA PATRN1
	LDY I,AROHIT
	LDA AX,CICPH
	TAX
	LDA I,SARROW		;GET STAMP # OF COORDINATES
	JSR WSTAMP		;WRITE STAMP
	LDX SAVEX
	DEX
	MIEND
	THEN
	RTS
AROHIT	=24
SARROW	=28.			;ARROW STAMP #
	.PAGE
	.SBTTL PRE-GAME SHOW PART 1

PREGM1:
	LDA I,10		;TIMER FOR "GROUND ZERO"
	STA ICBFRH
	LDA I,40		;TIMER FOR "ATARI..."
	STA ICBFRL
	LDA I,0
	STA ATRACT		;ATTRACT MODE
	STA FLSHCO
	LDX I,7
	LDA I,CBLACK
	BEGIN
	STA X,COL000
	DEX
	MIEND
	JSR BLEWIT
	LDA I,MGROUND
	JSR DTABML
	LDA I,MZERO
	JSR DTABML
	LDA I,CRED
	STA COL110
	LDA I,CPRGM2
	STA SETUPC
	RTS
	.PAGE
	.SBTTL PRE-GAME SHOW PART 2
PREGM2:
	LDA ICBFRL
	IFNE			;MISSILE COMMAND ALIVE?
	DEC ICBFRL		;YES
	ELSE
	DEC ICBFRH		;NO POPS DONE?
	IFEQ
	LDA I,CNEWGA		;YES, NEW GAME
	STA SETUPC
	ELSE
	JSR POPS
	THEN
	THEN
	RTS
	.PAGE
	.SBTTL NEW GAME SETUP
	
NEWGAM:
	JSR INILIT		;CHECK LANGUAGE & COCKTAIL
	LDA I,REDPAT
	STA SCOCOL		;SCORE IS RED
	LDA ATRACT	
	IFNE			;ATTRACT MODE?
	JSR CLRSCO		;NO. CLEAR SCORE
	THEN
	LDA I,0			;SET EACH PLAYER'S SKILL LEVEL TO NOVICE
	STA NEWPLA		;START WITH 1ST PLAYER
	STA PLIVES+1		;MAKE SURE NO PHANTOM PLAYER #2
	STA CILEFT+1
	STA BONLVL		;BONUS LEVELS START AT 10000
	STA BONLVL+1
	LDA I,1			;START WITH WAVE 1
	STA WAVENO
	LDX NUMPLA
	LDA OPTIO2
	AND I,SCITYM
	TAY
	BEGIN			;GIVE EACH ACTIVE PLAYER LIFE
	LDA AY,STCITY		;# OF CITIES
	STA X,PLIVES
	LDA AY,STCIMA
	STA ZX,CILEFT		;MASK FOR REMAINING CITIES
	DEX
	MIEND
	LDA I,CNEWAV		;REQUEST NEW WAVE 1ST PHASE
	STA SETUPC
	RTS
STCITY:	.BYTE 6,4,5,7
STCIMA:	.BYTE 0FC,0E8,0F8,0FC
	.PAGE
	.SBTTL	1ST PHASE OF NEW WAVE SETUP
NEWWV1:
	LDA NEWPLA
	STA PLAYUP
	JSR INISOU		;SOUNDS OFF
	LDA I,SNEWAV		;NEW WAVE SOUND
	JSR SNDON
	LDA ATRACT
	IFEQ
	LDA I,1
	STA WAVENO
	LDA I,18.
	ELSE
	LDY WAVENO
	CPY I,ICBWEN-ICBWAV		;DON'T GO PAST END OF TABLE
	IFCS
	LDY I,ICBWEN-ICBWAV
	THEN
	LDA AY,ICBWAV-1
	THEN
	STA ICBTOL
	LDX AY,CRMWAV-1
	STX CRMTOL
	LDA I,GAMEFL		;SET UP FLASH COLOR FOR GAME
	STA FLSHCO
	JSR MAKMAP
	JSR SETICS		;SET UP ICBM SPEED & SCORING
	LDA I,-1
	STA MIRVIX		;NO MIRVS
	LDA I,0			;CLEAR OUT ALL ABMS, EXPLOSIONS
	STA ALIVE
	STA EXPLOP
	STA EXPLCT
	STA OFFEXP
	STA DEFEXP
	STA CRMONS
	STA HORFIR
	STA ICBTYP
	STA ICBONS
	STA TARGET		;START ATTRACT CURSOR AT THIS ICBM.
	STA FIRESW
	STA EXPFRA		;CLEAR OUT EXPLOSION & ABM UPDATE COUNTERS.
	STA MBTARG		;NO BASSES OR CITIES TARGETED YET
	STA CITARG
	STA ICBFRH
	STA CIDOWN		;CITIES WIPED OUT
	LDX I,EXTIME-ABCPHL
	BEGIN			;CLEAR OUT MOVING OBJECT ARRAYS
	STA AX,ABCPHL-1
	DEX
	EQEND
	LDA I,0E0
	STA MBLEFT		;ALL 3 BASES ALIVE
	LDA ATRACT
	IFNE
	JSR ARROW		;POINT TO ACTIVE PLAYER'S SCORE
	THEN
	JSR WARMSG		;ISSUE WARNING MESSAGE
	LDY I,NMISBA-1
	BEGIN			;FOR EACH BASE:
	LDA I,MAXMIS		;GIVE BASE MISSILES
	STA AY,NMMISB
	JSR MISUPD		;DRAW BASE
	DEY
	MIEND
	JSR ACTCUR		;ACTIVATE CURSOR
	LDA I,S.PLAY
	STA NXTSTA
	LDA I,S.PAUS		;NOW WAIT X SECONDS BEFORE PLAY STATE
	STA STATE
	LDA I,2*PSECNS
	STA PAUST
	RTS
	.PAGE
	.SBTTL SET UP ICBM SPEED & SCORING
;INPUT:	PLAYUP:  PLAYER UP

SETICS:
	LDA I,0
	STA ICBPTL
	STA ICBPTM
	LDA WAVENO
	CLC
	ADC I,1
	LSR
	CMP I,MAXMUL
	IFCS
	LDA I,MAXMUL
	THEN
	STA SMULTI
	TAX
	BEGIN			;ICBM PTS X WAVE NUMBER
	SED
	LDA ICBPTL		;INCREASE POINTS FOR DOWNING ICBMS
	CLC
	ADC I,25
	STA ICBPTL
	LDA ICBPTM
	ADC I,0
	STA ICBPTM
	CLD
	DEX
	EQEND
	LDY WAVENO		;SET UP ICBM FRAME UPDATE RATE
	CPY I,WICEND-WICSPH	;AS A FUNC OF WAVE #.
	IFCS
	LDY I,WICEND-WICSPH
	THEN
	LDA AY,WICSPL-1
	STA ICSPDL
	LDA AY,WICSPH-1
	STA ICSPDH
	CPY I,WSPEND-WSPFIR+SPUTWV-1
	IFCS
	LDY I,WSPEND-WSPFIR+SPUTWV-1
	THEN
	LDA AY,WSPFIR-SPUTWV	;DISTANCE BETWEEN SPUTNIK FIRES
	STA SPUTDS
	LDA AY,WSPLAU-SPUTWV	;SPUTNIK ACTIVATION SEPARATION
	STA SPUTAC
	STA SPUTIM
	RTS
	.PAGE
	.SBTTL END OF WAVE, PHASE 1
ENDWV1:	JSR CLEANU		;CLEAN UP ANY ICBMS
	JSR DEACUR		;DEACTIVATE CURSOR
	JSR CLRTRI		;CLEAR BONUS ACCUMULATOR
	LDA I,0
	STA MISIND		;CLEAR ABM COUNTER
	LDX I,CENDW5
	LDA ATRACT
	IFNE
	LDA NMMISB
	ORA NMMISB+1
	ORA NMMISB+2
	IFNE			;ANY UNUSED ABM'S?
	LDA I,MABMPTS		;YES. "BONUS PTS"
	JSR DTABMS
	LDX I,CENDW2		;GO TALLY ABMS
	ELSE
	LDY PLAYUP
	LDA AY,CILEFT		;NO. ANY CITIES LEFT?
	IFNE
	LDA I,MABMPTS
	JSR DTABMS		;YES. "BONUS PTS"
	LDX I,CENDW3		;ANALYZE CITY STATUS
	THEN
	THEN
	THEN
	STX SETUPC

	RTS
	.PAGE
	.SBTTL END OF WAVE, PHASE 2
ENDWV2:
	DEC EXPFRA		;TALLY UP BONUS PTS FOR UNUSED ABMS HERE.
	IFMI		;TIME FOR NEXT ABM?
	LDY I,NMISBA-1	;YES.
	BEGIN		;LOOP THRU EACH BASE STARTING AT END UNTIL ABM FOUND.
	LDA AY,NMMISB
	IFNE		;ANY ABMS AT THIS BASE?
	SEC		;YES. TAKE 1 AWAY.
	SBC I,1
	STA AY,NMMISB
	JSR ERAABM	;ERASE 1 ABM PIC.
	JSR ABMADD		;ADD PTS FOR 1 UNUSED ABM TO SCORE
	LDX I,HBONPT
	LDY I,VABMBO
	LDA I,REDPAT
	JSR DSPNUM
	LDA I,VABMBO+2		;DRAW ONE ABM ON BONUS LINE
	EOR I,0FF
	STA OLDPOS+1		;(VERTICAL)
	LDA MISIND		;(# OF ABMS COUNTED)
	ASL
	ASL
	CLC
	ADC I,7A
	BIT COCKTA
	IFVS
	EOR I,0FF		;(HORIZ COCKTAIL FLIP)
	THEN
	STA OLDPOS		;(HORIZ)
	LDA I,BLUE		;(COLOR)
	JSR ONEMIS		;(DRAW)
	INC MISIND
	LDA I,5		;RESET TIMER FOR NEXT 1.
	STA EXPFRA
	LDA I,SUNABM
	JSR SNDON	;MAKE BONUS NOISE.
	RTS		;EXIT
	THEN
	DEY		;NEXT BASE.
	MIEND		;ENDLOOP AFTER LAST BASE.
	LDA I,CENDW3	;REQUEST END OF WAVE PHASE 3.
	STA SETUPC
	LDX I,1*PSECNS		;PAUSE
	LDY PLAYUP
	LDA AY,CILEFT
	IFNE			;ANY CITIES LEFT?
	LDX I,0			;YES. NO PAUSE
	THEN
	STX PAUST
	JSR UPSCOR
	LDA I,S.SETU
	STA NXTSTA
	LDA I,S.PAUS
	STA STATE
	THEN
	RTS
	.PAGE
	.SBTTL CITY BONUS
ENDWV3:	
	LDA I,CENDW5
	STA SETUPC
	LDY PLAYUP
	LDA AY,CILEFT
	AND ATRACT
	IFNE			;ANY CITIES LEFT?
	LDX I,0			;YES. COUNT THEM
	BEGIN
	ASL
	IFCS
	INX
	THEN
	CMP I,0
	EQEND
	TXA
	THEN
	IFNE			;ANY CITIES LEFT?
	STX MISIND		;YES. # OF CITIES LEFT 
	LDA I,0
	STA ICBTOL
	LDA I,CENDW4
	STA SETUPC		;CITY TALLY WAVE
	JSR CLRTRI		;CLEAR TRIPLE
	THEN
	RTS
	.PAGE
	.SBTTL	END OF WAVE PART 4-TALLY CITIES
;INPUT:	MISIND:#OF CITIES LEFT TO TALLY
;	EXPFRA:UPDATE TIMER
;
ENDWV4:	
	DEC EXPFRA
	IFMI			;TIME TO UPDATE
	LDY PLAYUP	;YES
	LDA AY,CILEFT
	STA J
	LDX MISIND
	LDY I,CILOOP+1
	BEGIN
	DEY	;FIND INDEX FOR XTH LIVING CITY
	LDA J
	AND AY,CIBITS
	IFNE
	DEX
	THEN
	CPX I,0
	EQEND
	JSR ERACIT		;ERASE CITY
	LDX I,3			;4 ICBM POINTS/CITY
	JSR ICMUL2		;ADDED TO TRIPLE
	LDX I,HBONPT
	LDY I,VCITBO		;X,Y COORDINATES
	LDA I,REDPAT		;RED NUMBERS
	JSR DSPNUM		;DISPLAY # POINTS SO FAR/CITIES
	LDA ICBTOL
	INC ICBTOL
	ASL
	ASL
	ASL
	ASL
	CLC
	ADC ICBTOL
	CLC
	ADC I,80
	TAX			;HORIZ POS
	LDY I,VCITBO		;VERT POS
	LDA I,BLUE+<PLACOL/10>	;COLORS
	JSR DACITY		;DRAW CITY ON BONUS LINE
	LDA I,SUNABM
	JSR SNDON		;MAKE BONUS NOISE
	LDA I,10.
	STA EXPFRA		;# FRAMES TO WAIT
	DEC MISIND
	IFEQ			;ANY MORE ?
	LDA I,CENDW5		;NO.GO TO NEXT SETUP
	STA SETUPC		;STATE
	LDA I,S.PAUS		;AFTER PAUSING
	STA STATE
	LDA I,1*PSECNS
	STA PAUST
	LDA I,S.SETU
	STA NXTSTA
	LDY PLAYUP
	JSR UPSCOR		;ADD TOTAL BONUS INTO PLAYER'S SCORE
	THEN
	THEN
	RTS
	.PAGE
	.SBTTL END OF WAVE PHASE 5
ENDWV5:
	LDA I,CNEWAV	;REQUEST NEW WAVE SETUP.
	STA SETUPC
	LDA I,S.SETU
	STA NXTSTA
	LDA I,0
	STA PAUST		;NO PAUSE (DEFAULT)
	LDA I,S.PAUS		;MUST PAUSE A LITTLE IF BONUS ABM PTS.
	STA STATE
	JSR REGEN		;REGENERATE CITIES
	LDA PLIVES
	ORA PLIVES+1
	AND ATRACT
	IFEQ			;ANY LIVES LEFT FOR EITHER PLAYER?
	LDA I,C5HI		;NO
	STA SETUPC		;END GAME
	ELSE
	LDY NUMPLA		;YES. AT LEAST 1 PLAYER STILL ALIVE
	IFNE			;2 PLAYERS?
				;YES
	LDY PLAYUP
	LDA AY,PLIVES
	IFEQ			;IS THIS PLAYER DEAD?
	LDA I,MABMPTS		;YES
	JSR DTABEL		;ERASE BONUS PTS
	LDA I,MYOUR
	JSR DTABEL
	LDA I,MGAMOV		;DISPLAY "GAME
	JSR DTABMS		;OVER"
	JSR DPLANO		;"PLAYER X"
	LDA I,1*PSECNS		;PAUSE SECOND
	STA PAUST
	THEN
	THEN
	LDA PLAYUP
	STA NEWPLA
	BEGIN
	LDY NUMPLA
	IFNE			;ONE PLAYER GAME?
	CPY NEWPLA		;NO. 2 PLAYER
	IFEQ			;WAS LAST PLAYER PLAYER 2?
	DEC NEWPLA		;YES. GO BACK TO PLAYER 1
	INC WAVENO		;AND GO TO NEXT WAVE
	ELSE
	INC NEWPLA		;NO. GO UP TO PLAYER 2
	THEN
	ELSE
	INC WAVENO		;1 PLAYER GAME. NEXT WAVE
	THEN
	LDY NEWPLA
	LDA AY,PLIVES		;DOES THIS PLAYER HAVE ANY MORE LIVES?
	NEEND			;LOOP BACK IF NOT
	THEN
	RTS
	.PAGE
	.SBTTL END GAME PART 1
ENDGM1:
	LDX I,CDLADR		;DISPLAY 5 HI
	LDA ATRACT		;ATTRACT?
	IFNE
	LDA I,CRED		;TURN EVERYTHING RED EXCEPT FLASH
	STA COL000
	STA COL001
	STA COL010
	STA COL011
	STA COL101
	STA COL110
	STA COL111
	LDA I,FLASH
	STA SCOCOL
	JSR DSPSCO		;WRITE SCORE IN FLASH
	LDA I,SENDGA		;END GAME SOUND
	JSR SNDON
	LDX I,CENDG2		;MAKE BANG
	THEN
	STX SETUPC
	    LDY I,0			;NO GAME IS OVER
	    STY A,OLDEND
	STY NUMPLA
	STY ATRACT
	    LDY I,ENDUPD
	    STY A,NEWEND		;PREP FOR FINAL BANG
	RTS
	.PAGE
	.SBTTL END OF GAME
ENDMAX	=6D			;MAXIMUM EXPLOSION RADIUS
ENDUPD	=1			;X DOTS CHANGE IN RADIUS EACH UPDATE
HENDEX	=80			;CENTER OF EXPLOSION
VENDEX	=73
ENDGM2:
	LDA A,NEWEND
	STA RADIUS
	IFNE			;DONE WITH FINAL BANG?
	CMP I,ENDMAX		;NO
	IFCS			;REACHED MAX THIS TIME?
	LDA I,ENDMAX-ENDUPD	;YES. SHRINK IT DOWN
	ELSE
	CMP A,OLDEND		;NO. SHRINKING?
	IFCC
	SEC
	SBC I,ENDUPD		;YES
	ELSE
	CLC			;NO. GROWING
	ADC I,ENDUPD
	PHA
	CMP I,62
	IFEQ
	LDA I,MTHEEND		;DISPLAY "THE END" IN EXPLOSION
	JSR DTABMS
	THEN
	DEC RADIUS
	PLA
	THEN
	THEN
	STA A,NEWEND		;NEW RADIUS
	STA RANGE
	LDY RADIUS
	STY A,OLDEND		;OLD RADIUS
	LDA I,HENDEX		;CENTER OF BANG
	STA H2
	LDA I,VENDEX
	STA V2
	JSR DSPEXP		;DISPLAY BANG
	ELSE
	LDA I,CDLADR		;ALL DONE WITH BANG
	STA SETUPC
	JSR INISOU		;ALL SOUNDS OFF
	THEN
	RTS
	.PAGE
	.SBTTL REGENERATE CITIES
;INPUT:	PLAYUP
;	CILEFT
;	PLIVES
;OUTPUT:CILEFT ADJUSTED TO MATCH PLIVES
;
REGEN:
	LDA ATRACT
	IFNE			;EXIT IF ATTRACT
	JSR CHEKBO		;CHECK FOR BONUS CITIES
	LDY PLAYUP
	LDX ZY,PLIVES
	CPX I,NCITY
	IFCS			;SET X=# OF DISPLAYABLE CITIES
	LDX I,NCITY
	THEN
	LDA AY,CILEFT
	STA J
	BEGIN			;LOOP FOR EACH POSSIBLE CITY
	ASL
	IFCS
	DEX			;DECREMENT # OF DISPLAYABLE CITIES
	THEN
	TAY			;TEST ACC
	EQEND
	TXA
	IFNE			;ANY CITIES TO REGENERATE?
	STX XLOOP		;YES. X=# TO REGENERATE
	BEGIN			;LOOP UNTIL X CITIES REGENERATED
	LDY PLAYUP
	LDA AY,CILEFT
	EOR I,0FC
	LDY I,0
	JSR RANBIT		;GET A RANDOM DEAD CITY
	LDX PLAYUP
	LDA ZX,CILEFT
	ORA AY,CIBITS		;REGENERATE IT
	STA ZX,CILEFT
	DEC XLOOP
	EQEND
	LDA I,SBONUS
	JSR SNDON		;MAKE BONUS SOUND
	LDA I,MBONUS
	JSR DTABMS		;DISPLAY BONUS MESSAGE
	LDA I,3*PSECNS		;HOLD MESSAGE UP THERE
	STA PAUST
	THEN
	THEN
	RTS
	.PAGE
	.SBTTL CLEAN UP
CLEANU:
	LDA ICBONS
	ORA CRMONS
	IFNE			;ANY ICBMS ON SCREEN?
	LDX I,IBLOOP		;YES
	STX XLOOP
	BEGIN			;LOOP FOR ALL ICBMS
	LDX XLOOP
	LDA AX,ICCPVH
	IFNE			;ACTIVE 
	TXA			;ICBM
	CLC
	ADC I,NABMS
	STA MISIND
	LDA ICBTYP
	AND AX,CIBITS
	IFEQ			;YES
	JSR ERAMIS		;ERASE MISSILE TRAIL
	ELSE
	JSR CMERAS	
	LDA I,0
	STA CRMONS
	JSR CMSNOF
	THEN
	THEN
	DEC XLOOP
	MIEND			;EXIT WHEN LAST ICBM CHECKED
	THEN
	JSR INISOU		;TURN OFF SOUNDS
	LDA I,MB1EMP		;ERASE BASE MSGS
	JMP DTABEL
	.PAGE
	.SBTTL DISPLAY EXPLOSION PICTURE
;INPUT:
;RANGE:NEW EXPLOSION RODIUS
;RADIUS:OLD EXPLOSION RADIUS
;H2&V2=CENTER OF EXPLOSION
;OUTPUT:H2,V2 RANGE PRESERVED
;	SCREEN UPDATED
;	ACC,Y,RADIUS,SAVEXX,PATERN DESTROYED
;	X PRESERVED
;
DSPEXP:	STX SAVEXX		;SAVE X
	LDA RANGE		;RADIUS OF NEW EXPLOSION
	CMP RADIUS		;RADIUS OF OLD EXPLOSION
	IFNE
	IFCC			;IS NEW EXPLOSION INSIDE OLD?
	LDA I,BCKGND
	STA PATERN
	BEGIN			;YES. CLEAR OUT CIRCLES OUTSIDE
	JSR CIRCLE
	LDA RADIUS
	DEC RADIUS
	CMP RANGE		;DOWN TO NEW ONE YET?
	EQEND			;LOOP IF NOT (NEW ONE WILL BE CLEARED TOO)
	ELSE
	LDA I,FLASH
	STA PATERN
	BEGIN			;NO. ADD CIRCLES OUTSIDE OF OLD
	JSR CIRCLE
	LDA RADIUS
	CMP RANGE		;DONE YET?
	INC RADIUS
	CSEND			;LOOP IF NOT
	THEN
	THEN
	LDX SAVEXX		;RESTORE X
	RTS
	.PAGE
	.SBTTL DRAW A CIRCLE
;INPUT:	RADIUS: CIRCLE'S RADIUS
;	H2=HORIZ COORDINATE OF CENTER OF CIRCLE
;	V2=VERT	"	"	"	"
;	PATERN=PATTERN TO OUTPUT TO SCREEN WHEN DRAWING CIRCLE
;OUTPUT:VDISP,HDISP,X,ACC,J DESTROYED
;	CIRCLE OUTPUT TO SCREEN
;	Y,RADIUS PRESERVED
;
CIRCLE:	LDX RADIUS		;START AT POINT (RADIUS,0)
	STX HDISP		;IN QUADRANT 1
	LDX I,0
	STX VDISP
	BEGIN
	JSR QUAD		;OUTPUT THIS POINT IN EACH QUADRANT
	LDX HDISP		;SWAP H & V TO GET POINT IN
	LDA VDISP		;UPPER HALF OF QUADRANT
	STX VDISP
	STA HDISP
	JSR QUAD		;OUTPUT POINTS IN EACH QUADRANT
	INC HDISP
	LDA HDISP		;RESTORE H & V
	STA VDISP
	.SBTTL CALCULATE NEXT POINT ON CIRCLE
;FUNCTION:	CALCULATE NEXT HIGHER POINT ON CIRCLE, USING RADIUS=MAX(H)+
;		3/8 MIN(V) APPROXIMATION
;INPUT:		VDISP & HDISP: H AND V COORDINATES OF LAST POINT
;		RADIUS=RADIUS OF CIRCLE
;OUTPUT:	X,Y PRESERVED
;		ACC,J DESTROYED
;		HDISP,VDISP=H & V COORDINATES OF NEW POINT
;
	LSR
	CLC
	ADC VDISP
	LSR
	LSR
	EOR I,0FF
	SEC
	ADC RADIUS		;SUBTRACT IT FROM RADIUS
	STA HDISP		;TO GET H
	CMP VDISP		;DONE WHEN H < V
	CCEND
	RTS
	.PAGE
	.SBTTL OUTPUT A POINT ON CIRCLE TO EACH QUADRANT
;FUNCTION:	GENERATE 1 POINT IN EACH QUADRANT OF A CIRCLE
;INPUT:		HDISP=HORIZONTAL DISP FROM CENTER OF POINT IN 1ST QUADRANT
;		VDISP=VERTICAL	"	"	"	"	"	"
;		PATTERN=BIT PATTERN TO OUTPUT/DOT
;		H2=HORIZ COORDINATE OF CIRCLE CENTER
;		V2=VERT	"	"	"	"
;OUTPUT:	DISPLAY UPDATED AT 4 POINTS: (X,Y),(X,-Y),(-X,Y),(-X,-Y)
;		HDISP,VDISP,H2,V2,PATERN ARE PRESERVED
;		ACC,X,HADR,J DESTROYED
QUAD:	LDX I,0
	LDA H2			;QUADRANT 1 (X,Y)
	CLC
	ADC HDISP
	STA HADR
	STA J
	LDA V2
	CLC
	ADC VDISP
	EOR I,0FF
	STA VADR
	LDA NX,HADR
	AND I,020		;SAVE WATER/LAND
	ORA PATERN		;ADD/REMOVE FLASH FLAG
	STA NX,HADR
	LDA H2			;QUADRANT 2 (-X,Y)
	SEC
	SBC HDISP
	STA HADR
	LDA NX,HADR
	AND I,020		;SAVE WATER/LAND
	ORA PATERN		;ADD/REMOVE FLASH FLAG
	STA NX,HADR
	LDA V2			;QUADRANT 3 (-X,-Y)
	SEC
	SBC VDISP
	EOR I,0FF
	STA VADR
	LDA NX,HADR
	AND I,020		;SAVE WATER/LAND
	ORA PATERN		;ADD/REMOVE FLASH FLAG
	STA NX,HADR
	LDA J			;QUADRANT 4 (X,-Y)
	STA HADR
	LDA NX,HADR
	AND I,020		;SAVE WATER/LAND
	ORA PATERN		;ADD/REMOVE FLASH FLAG
	STA NX,HADR
	RTS
	.PAGE
	.SBTTL WARNING MESSAGES FOR NEW WAVE
XPMULT	=58
YPMULT	=70
XPLANO	=9C
YPLANO	=90
WARMSG:
	LDA ATRACT
	IFNE			;ATTRACT MODE?
	JSR DPLANO		;NO. DISPLAY "PLAYER X"
	LDA I,MICBPTS		;OUTPUT "SCORE X Y"
	JSR DTABMS
	LDA SMULTI
	LDX I,REDPAT
	STX PATRN1		;COLOR
	LDX I,XPMULT		;LOCATION
	LDY I,YPMULT
	JSR NUMOUT
	LDA I,MCOPYR		;ATARI
	JSR DTABMS
	ELSE
	JSR ATRMSG
	THEN
	LDA WAVENO
	CMP I,4
	IFCC
	LDA I,MDEFEN		;DEFEND CITIES
	JSR DTABML
	THEN
	JMP DSPHI		;AND THEN THE HIGH SCORE
DPLANO:
	LDA I,MPLAYR		;"PLAYER X"
	JSR DTABMS
	LDA PLAYUP		;DISPLAY PLAYER #
	CLC
	ADC I,1
	LDX I,REDPAT		;RED #
	STX PATRN1		;COLOR
	LDX I,XPLANO		;LOC
	LDY I,YPLANO
	JMP NUMOUT
	.PAGE
	.SBTTL REFRESH ATTRACT MODE MESSAGES
REFRESH:
	LDA ATRACT
	IFEQ			;ATTRACT MODE?
	LDA STATE
	CMP I,S.PLAY
	IFNE
	CMP I,S.PAUS
	IFEQ
	LDA SETUPC
	CMP I,CPRGM1
	IFNE
	LDA NXTSTA
	CMP I,S.PLAY
	THEN
	THEN
	THEN
	IFEQ
	LDA FRAME
	LSR
	IFCC
	JSR SCROLL
	THEN
	THEN
	THEN
	RTS
	.PAGE
	.SBTTL SCROLL ATTRACT MESSAGES ACROSS SCREEN
SCROLL:	JSR PRSCRO		;BRING ON NEW CHARACTER
	LDX I,0
	BEGIN			;LOOP FOR EACH COLUMN ACROSS BOTTOM
	BEGIN			;LOOP FOR EACH DOT IN A COLUMN(8)
	TXA
	AND I,3F
	CMP I,3E
	IFEQ			;FAR RIGHT COLUMN?
	SEC			;YES. SHIFT IN LAND COLOR
	ROR AX,401
	SEC
	ROR AX,501
	ELSE
	LDA AX,403		;NO. SHIFT IN BIT FROM RIGHT
	LSR
	ROR AX,401
	LDA AX,503
	LSR
	ROR AX,501
	THEN
	TXA
	CLC
	ADC I,40
	TAX			;POINT TO NEXT LOWER DOT IN COLUMN
	CSEND			;EXIT LOOP AFTER LOWEST DOT
	INX
	INX
	CPX I,40
	CSEND			;EXIT LOOP AFTER FAR RIGHT COLUMN
	RTS
	.PAGE
CLRTRI:	LDA I,0
	STA TRIPLE
	STA TRIPLE+1
	STA TRIPLE+2
	RTS

	.SBTTL MULTIPLY ICBM SCORE BY X
ICMULT:	JSR CLRTRI		;CLEAR BUCKETS
ICMUL2:	SED
	BEGIN
	LDA ICBPTL
	CLC
	ADC TRIPLE
	STA TRIPLE
	LDA TRIPLE+1
	ADC ICBPTM
	STA TRIPLE+1
	LDA TRIPLE+2
	ADC I,0
	STA TRIPLE+2
	DEX
	MIEND
	CLD
	RTS
ABMADD:				;ADD IN POINTS FOR AN UNUSED ABM
	LDX SMULTI
	SED
	BEGIN			;ADD IN X POINTS FOR EACH SKILL LEVEL
	LDA I,5
	CLC
	ADC TRIPLE
	STA TRIPLE
	LDA I,0
	ADC TRIPLE+1
	STA TRIPLE+1
	LDA TRIPLE+2
	ADC I,0
	STA TRIPLE+2
	DEX
	EQEND
	CLD
	RTS
	.PAGE
	.SBTTL SCORE ROUTINES
CLRSCO:			;CLEAR SCORE
	LDA I,0
	LDX I,5
	BEGIN
	STA AX,LSCORL
	DEX
	MIEND
	RTS
	.SBTTL DISPLAY SCORES
DSPSCO:	LDA ATRACT
	IFEQ			;ATTRACT?
	LDA A,LSCORL+1		;YES. DISPLAY PLAYER 2 SCORE IF NON 0
	ORA A,LSCORM+1
	ORA A,LSCORH+1
	ELSE
	LDA NUMPLA		;NO. GAME MODE
	THEN
	IFNE			;2 PLAYERS?
	LDY I,1			;YES. DISPLAY RIGHT SCORE
	JSR DSPNUP
	THEN
	LDY I,0			;(LEFT SCORE)
DSPNUP:	JSR CLRTRI
	JSR UPSCOR		;UPDATE TRIPLE
	LDA AY,HSCOR		;GET COORD FOR SCORE
	TAX
	LDA I,0			;CLEAR DISPLAY SCORE REQUEST
	STA RQSCOR
	LDY I,STOPLI
	LDA SCOCOL		;SCORE COLOR
	  JMP DSPNUM		;DISPLAY IT
HSCOR:	.BYTE 1D,0B0		;HORIZ COORD FOR LEFT, RIGHT SCORE
	.PAGE
	.SBTTL ADD TO PLAYER'S SCORE
;INPUT:		Y=ID OF SCORING PLAYER
;		TRIPLE=AMOUNT TO ADD TO SCORE (TRIPLE PRECISION BCD)
;		LSCORL,M,H(2) SCORE ARRAY (BCD TRIPLE PRECISION)
;		ATRACT=ATTRACT OR GAME MODE FLAG
;OUTPUT:	LSCORL,M,H UPDATED IF NOT IN ATTRACT
;		TRIPLE,Y ARE DESTROYED
;		X IS PRESERVED
;
UPSCOR:
	LDA ATRACT
	IFEQ			;ATRACT MODE?
	JSR CLRTRI		;YES. CLEAR AMOUNT TO ADD
	THEN
	  SED			;DO IT IN DECIMAL
	LDA TRIPLE
	  CLC
	  ADC AY,LSCORL
	  STA AY,LSCORL
	  STA TRIPLE
	  LDA AY,LSCORM
	  ADC TRIPLE+1
	  STA AY,LSCORM
	  STA TRIPLE+1
	  LDA AY,LSCORH
	  ADC TRIPLE+2
	  STA AY,LSCORH
	  STA TRIPLE+2
	  CLD
	LDA I,0FF		;REQUEST SCORE UPDATE
	STA RQSCOR
	RTS

	.PAGE
	.SBTTL CHECK BONUS LEVEL

CHEKBO:
	LDA OPTIO2
	AND I,BONMSK
	CMP I,BONMSK
	IFNE			;BONUS CITIES?
	LSR			;YES. USE AS INDEX INTO BONINL
	LSR
	LSR
	TAY
	LDA I,0			;CLEAR BUCKET FOR NEW BONUS LEVEL
	STA ICBTOL
	LDX PLAYUP
	LDA AX,LSCORM
	STA J
	LDA AX,LSCORH
	STA K
	SED
	BEGIN			;DIVIDE SCORE BY BONUS INTERVAL
	LDA J
	SEC
	SBC AY,BONINL
	STA J
	LDA K
	SBC AY,BONINH
	STA K
	IFPL
	INC ICBTOL
	THEN
	MIEND
	CLD
	LDA ICBTOL		;NEW BONUS LEVEL-OLD
	SEC
	SBC ZX,BONLVL
	CLC
	ADC ZX,PLIVES
	STA ZX,PLIVES		;ADD DIFF TO # CITIES
	LDA ICBTOL		;UPDATE BONUS LEVEL
	STA ZX,BONLVL
	THEN
	RTS

BONINL:	.WORD 0100,0120,0140,0150,0180,0200,0080
BONINH	=BONINL+1
	.PAGE
	.SBTTL WAVE PARAMETERS

ICBWAV:	.BYTE 12.,15.,18.,12.,16.,14.,17.,10.,13.,16.,19.,12.,14.,16.,18.,14.,16.,18.,20.
ICBWEN:
WICSPL:	.BYTE 0D0,0E0,0C0,8,0A0,60,40,20,10,0A,6,4,2,1,0
WICSPH:	.BYTE 4,2,1,1,0,0,0,0,0,0,0,0,0,0,0
WICEND:
CRMWAV:	.BYTE 0,0,0,0,0,1,1,2,3,4,4,5,5,6,6,7,7,7,7
WSPFIR:	.BYTE 80,60,40,30,20,20,10
WSPEND:
WSPLAU:	.BYTE 0F0,0A0,080,80,60,40,20
HTARGS:
CICPH:	.BYTE CITY1H,CITY2H,CITY3H,CITY4H,CITY5H,CITY6H
MBCPH:	.BYTE MISB1H,MISB2H,MISB3H
VTARGS:
CICPV:	.BYTE CITY1V,CITY2V,CITY3V,CITY4V,CITY5V,CITY6V
MBCPV:	.BYTE MISB1V,MISB2V,MISB3V
MBCPVA:	.BYTE MISB1V+2,MISB2V+2,MISB3V+2
CIBITS:	.BYTE 80,40,20,10,8,4,2,1	;CITY EXISTENCE BITS
	.PAGE
	.SBTTL ACTIVATE A PLANE
;OUTPUT:	ACC,X DESTROYED
;	Y PRESERVED
;	PLATIM=1
;	PLCPV&H=SET UP WITH INITIAL PLANE LOC
;	HORFIR=H LOC AT WHICH ICBMS WILL BE FIRED
VPLMIN	=64
VPLMAX	=0B0
ACTPLA:	
	LDA ICBTOL
	IFNE
	LDA A,PLCPV
	IFEQ			;PLANE ACTIVE?
	LDY WAVENO		;NO WAVE OK?
	CPY I,SPUTWV
	IFCS
	LDA SPUTIM		;YES. TIME OK?
	CMP SPUTAC
	IFCS
	LDX I,0			;SET PLANE TIMER
	STX PLATIM		;FOR IMMEDIATE POSITION UPDATE
	STX HORFIR
	LDA A,RANDOM
	IFMI
	DEX
	THEN
	STX PLAVEL		;DIRECTION (+RIGHT, -LEFT)
	STX A,PLCPH		;HORIZ START POINT (LEFT OR RIGHT EDGE)
	AND I,01
	STA SOBJID		;BOMBER A SPUTNIK CODE
	LDA A,RANDOM		;YES
	LSR
	LSR
	LSR
	ADC I,VPLMIN
	CPY I,SPUTWV+4
	IFCC
	ADC I,20
	THEN
	CPY I,SPUTWV+2
	IFCC
	ADC I,10
	THEN
	STA A,PLCPV		;VERTICAL COORD
	JSR STSNON		;SOUND ON
	DEC POTENT		;DECREASE # OF POTENTIAL LAUNCHES
	THEN
	THEN
	THEN
	THEN
	RTS
	.PAGE
	.SBTTL PROCESS THE PLANE
;FUNCTION:MOVE PLANE ACROSS SCREEN AND FIRE ICBMS WHEN REQUESTED
;INPUT	PLCPH&V=PLANE'S X & Y COORDINATES
;	PLATIM:PLANE POSITION UPDATE TIMER
;	PLAVEL:HORZ MOVEMENT IN DOTS/UPDATE:=-1=LEFT,1=RIGHT
;
PROPLA:	INC SPUTIM
	IFEQ
	DEC SPUTIM		;MAX AT FF
	THEN
	LDA A,PLCPV
	IFNE			;PLANE ACTIVE?
	STA VADR		;YES
	DEC PLATIM
	IFMI
	INC HORFIR		;INC DIST MOVED
	LDY SOBJID
	LDA AY,PLARAT		;YES
	STA PLATIM		;RESET PLANE UPDATE TIMER
	LDA A,PLCPH
				;WRITE OUT NEW LEADING EDGE OF PLANE
	JSR OUTLST		;AND ERASE TRAILING EDGE
	IFEQ			;PLANE AT GOAL?
	LDA I,0			;YES. DEACTIVATE IT
	STA A,PLCPV
	STA HORFIR
	STA SPUTIM
	JSR STSNOF		;SOUND OFF
	ELSE
	STA A,PLCPH
	THEN
	THEN
	THEN
	RTS
PLARAT:	.BYTE 1,2
	.PAGE
	.SBTTL MOVE AN OBJECT 1 DOT HORIZONTAL
;INPUT:	Y=OBJECT ID (INDEX INTO LISTRT,HBAMIN,HBAMAX)
;	ACC=CURRENT HORIZ COOR OF OBJECT (TO BE UPDATED)
;	V=CURRENT VERT COORD OF OBJECT
;	PLAVEL=+OR -1: HORIZ INCREMENT
;
;OUTPUT:PSW Z=1 INDICATES OBJECT HAS FINISHED JOURNEY
;	ACC,HADR=NEW H COORDINATE OF OBJECT
;	J,K,PATERN,SAVEX,HADR,VADR
;	VADR Y INTACT
;
OUTLST:	STY SAVEX
	STY K
	STA HADR
	LDA PLAVEL		;UPDATE HORIZ. BASE ADDRESS OF OBJECT
	IFPL
	INC HADR
	ELSE
	DEC HADR
	THEN
	LDA AY,LISTRT
	STA K			;SET UP INDEX INTO LISTS FOR OBJECT
	BEGIN			;LOOP FOR EACH LIST OF POINTS FOR OBJECT
	LDX K
	LDA AX,NUMDOT
	STA J			;# OF DOTS IN THE LIST
	LDA AX,DOTCOL
	STA PATERN		;COLOR OF DOTS IN LIST
	LDY AX,OFFSTA
	BEGIN			;LOOP FOR EACH DOT IN LIST
	LDX K
	LDA AY,VOFF
	CLC
	ADC VADR
	EOR I,0FF
	STA OLDPOS+1		;CALC V LOC OF DOT
	LDA AY,HOFF		;HORIZONTAL OFFSET
	EOR PLAVEL		;FLIP IF GOING LEFT
	IFMI			;DO HORIZ COORDINATE CALC. CHECKING OVERFLOW
	CLC			;GOING LEFT.
	ADC HADR
	CMP HADR
	BCS BADH		;OVERFLOW IF RESULT > ORIGINAL
	ELSE
	CLC			;GOING RIGHT
	ADC HADR
	CMP HADR
	BCC BADH		;OVERFLOW IF RESULT < ORIGINAL
	THEN
	CMP AX,HORMIN		;NO OVERFLOW
	IFCS			;PART LEFT BOUNDARY?
	CMP AX,HORMAX		;NO  PAST RIGHT BOUNDARY?
	IFCC
	STA OLDPOS		;NO
	LDX I,0
	LDA PATERN
	STA NX,OLDPOS		;ALL OK. WRITE DOT
	THEN
	THEN
BADH:	INY			;UPDATE LIST POINTER TO NEXT DOT
	DEC J			;AND DOT COUNTER
	MIEND			;ENDLOOP AFTER ALL DOTS IN LIST ARE PROCESS
	LDY K
	DEC K			;POINT TO NEXT LIST
	LDA AY,ENDFLG
	MIEND			;ENDLOOP IF THIS WAS THE LAST LIST
	LDY SAVEX		;RESTORE OBJECT ID
	LDA HADR
	CMP AY,HBAMIN
	IFNE			;NEW HORIZ BASE AT AN EDGE?
	CMP AY,HBAMAX
	THEN
	RTS
	.PAGE
	.SBTTL DOT LIST OUTPUT TABLES
;BASE ADDRESS LIMITS AND STARTNG INDEX
HBAMIN:	.BYTE 0,0
HBAMAX:	.BYTE 0FF,0FF
LISTRT:	.BYTE 3,5
;H & V OFFSETS
OFFSTA:	.BYTE HPLEAD-HOFF,HPLTRA-HOFF,HTIPS-HOFF,HWINDO-HOFF,HBMLEA-HOFF,HBMTRA-HOFF
;# OF DOTS
NUMDOT:	.BYTE HPLTRA-HPLEAD-1,HTIPS-HPLTRA-1,HWINDO-HTIPS-1
	.BYTE HBMLEA-HWINDO-1,HBMTRA-HBMLEA-1,HOFEND-HBMTRA-1
;COLOR OF DOTS
DOTCOL:	.BYTE PLACOL,BCKGND,FLASH,BLUE,PLACOL,BCKGND
;BOUNDARIES (HORIZONTAL)
HORMIN:	.BYTE 8,8,8,8,9,9
HORMAX:	.BYTE 248.,248.,248.,248.,247.,247.
;END FLAG (-1=END OF LIST)
ENDFLG:	.BYTE -1,0,0,0,-1,0
HOFF:				;HORIZONTAL OFFSETS
HPLEAD:	.BYTE 3,3,4,4,4		;LEADING EDGE
	.BYTE 3,3,1,1
	.BYTE 5,4,4,5,-5,-4,-4,-5
	.BYTE 0,0,0,-4,-4,-4
	
HPLTRA:	.BYTE 5,4,3,3,4,5,-2,-2;TRAILING EDGE
	.BYTE -7,-6,-5,-4,-4,-5,-5
	.BYTE -5,-4,-4,-5,-6,-7
HTIPS:	.BYTE 6,6	;TIPS
	.BYTE -6,-6
HWINDO:	.BYTE 2,2,2,-2,-2,-2
HBMLEA:	.BYTE 7,5,3,-1,-2,-3
	.BYTE 0,-1,-2,-3,-4,-7,-6
HBMTRA:	.BYTE -5,-4,-4,-8,-8,-8,-9
	.BYTE -6,-5,-5,-6,-6,-7
HOFEND:	
VOFF:				;VERTICAL OFFSETS
VPLEAD:	.BYTE 3,2,1,0,-1	;LEADING EDGE
	.BYTE -2,-3,4
	.BYTE -4
	.BYTE 5,4,-4,-5,5,4,-4,-5
	.BYTE 1,0,-1,1,0,-1

VPLTRA:	.BYTE 6,5,4,-4,-5,-6,4,-4;TRAILING EDGE
	.BYTE 6,5,4,3,2,1,0
	.BYTE -1,-2,-3,-4,-5,-6
VTIPS:	.BYTE 6,-6
	.BYTE 6,-6
VWINDO:	.BYTE 1,0,-1,1,0,-1
VBMLEA:	.BYTE 0,1,2,3,4,5
	.BYTE -1,-2,-3,-4,-5,4,3
VBMTRA:	.BYTE 5,4,3,4,3,2,1
	.BYTE 0,-1,-2,-3,-4,-5
	.PAGE
	.SBTTL DISPLAY FLASH POPS
POPS:
	LDA I,0
	STA RANGE
	LDX I,EXLOOP
	BEGIN			;CLEAR OUT EXISTING POPS
	LDA AX,EXCPV
	IFNE
	STA V2
	LDA AX,EXCPH
	STA H2
	LDA AX,EXTIME
	STA RADIUS
	JSR DSPEXP
	LDA I,0
	STA AX,EXCPV
	THEN
	DEX
	MIEND
	LDA I,0FC
	STA FLSHCO
	LDX I,EXLOOP
	BEGIN			;WRITE OUT NEW POPS
	LDA A,RANDOM
	AND I,07
	ORA I,03
	STA AX,EXTIME
	STA RANGE
	LDA A,RANDOM
	STA AX,EXCPH
	STA H2
	BEGIN
	LDA A,RANDOM
	CMP I,0D0
	IFCC
	CMP I,38
	BCS GOODV
	SEC
	THEN
	CCEND
GOODV:	STA AX,EXCPV
	STA V2
	LDA I,0
	STA RADIUS
	JSR DSPEXP
	DEX
	MIEND
	RTS
	.PAGE
	.SBTTL UPDATE CM POSITION
;INPUT:	MISIND=ICBM ARRAY INDEX FOR CM
;OUTPUT:
;
CMNEWP:
	JSR ANDANG		;ANALYZE DANGER
	LDA DANGER
	IFEQ			;DANGER?
	JSR UPDPOS		;NO. CONTINUE TO TARGET
	ELSE
	CMP I,ALLBAD		;YES. SURROUNDED?
	IFEQ
	JSR UPDPOS		;YES. DRIVE IN
	ELSE
	JSR ANGLE		;NO. CALCULATE DIRECTION
	LDA DANGER
	LDY WAVENO
	CPY I,STUPID
	IFCC			;EARLY WAVE?
	ORA I,01		;YES. MAKE IT STUPID (NO UP)
	THEN
	STA DANGER		;CERTAIN AREAS OFF LIMITS
	JSR FINDBL		;NO. FIND BEST BIG OPENING
	IFEQ
	JSR CMDEVI		;FOUND IT. DEVIATE
	ELSE
	JSR FINSIN		;NONE FIND BEST SMALL OPENING
	IFEQ
	JSR CMDEVI		;FOUND IT. DEVIATE
	ELSE
	JSR UPDPOS		;NONE, DRIVE IN
	THEN
	THEN
	THEN
	THEN
	RTS
	.PAGE
	.SBTTL ANALYZER DANGER TO CM
;INPUT:	MISIND=MISSILE ARRAY INDEX (AB=0)
;OUTPUT:X PRESERVED; SAVEXX, ACC DESTROYED
;	DANGER:BITS SET/CLEARED
ANDANG:	LDA I,0
	STA DANGER		;DEFAULT: NO DANGER
	STX SAVEXX
	LDY I,HDEND-HDELT-1
	BEGIN			;LOOP FOR EACH TEST POINT
	LDX MISIND
	LDA AX,ABCPVH		;SET UP COORDINATES OF TEST POINT
	CLC
	ADC AY,VDELT
	EOR I,0FF
	STA VADR
	LDA AX,ABCPHH
	CLC
	ADC AY,HDELT
	STA HADR
	LDX I,0
	LDA NX,HADR		;GET TEST POINT PATTERN
	AND I,0C0
	CMP I,FLASH
	IFEQ			;EXPLOSION?
	LDA DANGER		;YES. SET DANGER BIT FOR TEST POINT
	ORA AY,SMAHOL
	STA DANGER
	THEN
	DEY
	MIEND			;NEXT TEST POINT
	LDX SAVEXX
	RTS
VDELT:	.BYTE 8,6
HDELT:	.BYTE 0,-6,-8,-6,0,6,8,6
HDEND:
	.PAGE
	.SBTTL DETERMINES CRUISE MISSILE ANGLE
;INPUT:	MISIND=MISSILE ARRAY INDEX (AB=0)
;OUTPUT:CMANGL=0->13=CRUISE MISSILE ANGLE
ANGLE:	LDY MISIND
	JSR ABMVEL		;SET UP VADR & HADR TO INCREMENT
	LDY HADR		;ABSOLUTE VALUES OF DELTA H & V
	LDA VADR
	IFEQ			;CALCULATE SLOPE (0->-1)
	LDA I,4			;MAX IF H=0
	ELSE
	JSR DIVIDE		;CALCULATE SLOPE
	LDY I,SLOEND-SLOPEH-1
	BEGIN			;FIND RANGE 0->4
	LDA QUOTH
	CMP AY,SLOPEH
	IFEQ
	LDA QUOTL
	CMP AY,SLOPEL
	THEN
	DEY
	CSEND
	INY
	TYA
	THEN
	STA J
	LDX MISIND
	LDA AX,ABVEHH
	EOR AX,ABVEVH
	IFMI			;H & V DIFF SIGNS?
	LDA I,4			;YES. CONVERT 0->4 TO 4->0
	SEC
	SBC J
	STA J
	THEN
	LDA AX,ABVEHH
	ROL
	LDA AX,ABVEVH
	ROL
	ROL
	AND I,3			;DETERMINE GUADRANT
	TAY
	LDA AY,ANGADD		;ADD IN QUADRANT CORRECTION
	CLC
	ADC J
	STA CMANGL
	RTS
ANGADD:	.BYTE 12.,8,0,4
SLOPEH:	.BYTE 0,0,0,1,5		;TAN FOR ANGLES 0,11,33,56,78
SLOEND:
SLOPEL:	.BYTE 0,32,0AB,7F,6
BIGHOL:	.BYTE 83		;0:701
	.BYTE 87		;1:7012
	.BYTE 07		;2:012
	.BYTE 0F		;3:0123
	.BYTE 0E		;4:123
	.BYTE 1E		;5:1234
	.BYTE 1C		;6:234
	.BYTE 3C		;7:2345
	.BYTE 38		;8:345
	.BYTE 78		;9:3456
	.BYTE 70		;10:456
	.BYTE 0F0		;11:4567
	.BYTE 0E0		;12:567
	.BYTE 0E1		;13:5670
	.BYTE 0C1		;14:670
	.BYTE 0C3		;15:6701
ENDBIG:
SMAHOL:	.BYTE 1,2,4,8,10,20,40,80
	.PAGE
	.SBTTL FIND NON BANG OPENING FOR CM
FINDBL:	LDY CMANGL		;FIND A BIG OPENING
	LDX CMANGL
	LDA I,<ENDBIG-BIGHOL>/2
	STA J
	BEGIN
	LDA DANGER
	AND AY,BIGHOL
	IFEQ
	RTS
	THEN
	LDA DANGER
	AND AX,BIGHOL
	IFEQ
	TXA
	TAY
	LDA I,0
	RTS
	THEN
	DEY
	IFMI
	LDY I,<ENDBIG-BIGHOL>-1
	THEN
	INX
	CPX I,ENDBIG-BIGHOL
	IFCS
	LDX I,0
	THEN
	DEC J
	MIEND
	RTS
	.PAGE
	.SBTTL FIND SMALL HOLE FOR CM
FINSIN:				;FIND SMALL OPENING
	LDA CMANGL
	LSR
	TAY
	TAX
	LDA I,4
	STA J
	BEGIN
	LDA DANGER
	AND AY,SMAHOL
	BEQ GOTHOL
	LDA DANGER
	AND AX,SMAHOL
	IFEQ
	TXA
	TAY
GOTHOL:	TYA
	ASL
	TAY
	LDA I,0
	RTS
	THEN
	DEY
	IFMI
	LDY I,7
	THEN
	INX
	CPX I,8
	IFCS
	LDX I,0
	THEN
	DEC J
	MIEND
	RTS
	.PAGE
	.SBTTL DEVIATE CM
;INPUT:	MISIND
;	Y=DEVIATION ANGLE
;
;OUTPUT:C BIT:AT TARGET? C=NO 5=YES
CMDEVI:	LDX MISIND
	LDA AX,ABCPHH
	CMP I,IHMAX
	IFCC			;IN BOUNDS?
	CMP I,IHMIN
	IFCS
	LDA AX,ABCPVH
	CMP I,IVMAX
	IFCC
	CMP I,IVMIN
	IFCS
	JSR UPDEVI		;YES, AVOID BANG
	LDY MISIND
	JSR ABMVEL		;RECALC INCS
	CLC			;NOT AT TARGET SIGNAL
	RTS
	THEN
	THEN
	THEN
	THEN
	JMP UPDPOS		;NO. GO TOWARD TARGET
	.PAGE
	.SBTTL CM DEVIATION
;INPUT:	Y=NEW DIRECTION (0->15)
;	MISIND
UPDEVI:
	LDX MISIND
	LDA AY,DEVIHL
	CLC
	ADC AX,ABCPHL
	STA AX,ABCPHL
	LDA AY,DEVIHH
	ADC AX,ABCPHH
	STA AX,ABCPHH
	LDA AY,DEVIVL
	CLC
	ADC AX,ABCPVL
	STA AX,ABCPVL
	LDA AY,DEVIVH
	ADC AX,ABCPVH
	STA AX,ABCPVH
	RTS
DEVIVL:	.BYTE 0,0EC,0B4,62
DEVIHL:	.BYTE 0,9E,4C,14,0,14,4C,9E	;0->7
	.BYTE 0,062,0B4,0EC,0,0EC,0B4,062	;8->15
DEVIVH:	.BYTE 1,0,0,0
DEVIHH:	.BYTE 0,0FF,0FF,0FF,-1,0FF,0FF,0FF	;0->7
	.BYTE 0,0,0,0,1,0,0,0		;8->15
	.END
                                                                                                                                                                                                                                                                                                                                                                                                                                         