	.TITLE W3SOUN-(WAS T2SOUN)
	.RADIX 16
	.INCLUDE COND65		;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	.ENABLE AMA
	.REPT 0
*****************************************
*
*POKEY SOUND SYSTEM CONTROL
*
*PROJECT #: 16703 (TUBE CHASE)
*HARDWARE: A CORECTLY INSTALLED POKEY
*
*DESCRIPTION:	THIS CONTAINS 2 ROUTINES:
*		 1) THE FIRST ROUTINE STARTS A SOUND.
*		    IT MAY BE CALLED ANYTIME, BUT CERTAIN
*		    PRIORITY RULES ON SOUNDS APPLY (SEE ROUTINE)
*		 2) THE SECOND MUST BE CALLED ONCE EVERY 16 MSEC
*		    (OR 1 FRAME). THIS ROUTINE CONTINUES A SOUND.
*		    IT ALSO SHUTS THINGS UP WHEN DONE.
*
******************************************
*
*PROGRAMMER:	RICH ADAM
*
******************************************
	.ENDR
	.PAGE
	.SBTTL GLOBLS
;ENTRY POINTS (AS SUBROUTINES)
	.GLOBL SNDON,MODSND,EXSNON,CMSNOF,STSNOF,INISOU
	.GLOBL STSNON,CMSNON,EXSNON
;RAM CELLS (DOES NOT HAVE TO BE 0 PAGE)
	.GLOBL J,K,ATRACT,RA,SLAMSN
;EXTERNAL REFERENCES (SUCH AS POKEY)
	.GLOBL SUNABM,SLOABM
	.GLOBL SABLAU,SEXPLO,SNEWAV,SENDGA,SBONUS,SOHNO
	.GLOBL CRMONS,SNSHOT
	.PAGE
	.SBTTL SOUND DESCRIPTION
;THE FOLLOWING MUST BE DEFINED SOME WHERE IN YOUR RAM ALLOCATION
;SOUND ROUTINE VARIABLES
	.BSECT BSOUN
	
SOUNDN:	.BLKB 1			;SOUND # IN PROGRESS
POINT:	.BLKB 8			;POINTER OFFSET INTO DATA TABLES(IF 0, CHANNEL NOT ACTIVE)
CURRENT:.BLKB 8			;OUTPUT VALUE
FRAMES:	.BLKB 8			;FRAMES UNTIL NEXT CHANGE
COUNT:	.BLKB 8			;COUNT OF TOTAL CHANGES
MRBILL:	.BLKB 1
MBTIME:	.BLKB 1
	.REPT 0
;*** NOTE: 'IDLEV' CAN BE REPLACED BY A 6 BYTE TABLE WITH
;          NO CHANGE TO THE CODE. USING RAM ALLOWS YOU TO 
;	   CHANGE THE OUTPUT SOUND WITHOUT USING 'STSOUND'
;	   BY SIMPLY PUTTING THE DESIRED SOUND INFORMATION
;	   INTO THE ABOVE 6 BYTE. THE SOUND ROUTINES WILL
;	   CONTINUE TO OUTPUT THIS 'FORCED' SOUND UNTIL
;	   YOU CALL 'STSOUND' OR PUT SOME OTHER VALUE INTO
;	   'IDLEV'. IF YOU USE A TABLE, THE FOLLOWING DATA
;	   IS RECOMENDED:
;	IDLEV:	.BYTE 0C0,0,1F,80,0FE,80
;*************************************************************
;
	.ENDR
;EACH TABLE ENTRY IS 4 BYTES DESCRIBING A SEQUENCE, CONSISTING OF:
STVAL	=0			;VALUE TO START SEQUENCE
FRCNT	=1			;# OF FRAMES BEFORE ANY CHANGE
CHANGE	=2			;AMOUNT OF CHANGE
NUMBER	=3			;TOTAL NUMBER OF CHANGES IN THIS SEQUENCE
AUDF1	=4000
AUDCTL	=4008
SOHNO	=2			;SAME AS EXPLOSION
SLOABM	=1
SEXPLO	=2
SABLAU	=4
SUNABM	=8
SNEWAV	=10
SENDGA	=20
SBONUS	=40
SNSHOT	=80
;EX1: 0FF,1,-1,6 DESCRIBES THE FOLLOWING SEQUENCE
;	0FF,0FE,0FD,0FC,0FB,0FA,0F9
;EX2: 0,45,0,1 WILL OUTPUT 0 FOR 46 FRAMES
;
	.PAGE
	.SBTTL OFFSET MACROS FOR SOUND ROUTINES
	.MACRO OFFSET,LABEL
	.IRPC X,<12345678>
	.IF DF,LABEL''X
	.BYTE LABEL''X-SOUND
	.IFF
	.BYTE 0
	.ENDC
	.ENDR
	.ENDM
;
;THE ABOVE MACRO GENERATES THE OFFSETS FROM THE 'SOUND' BASE ADDRESS
;FOR A CHANNEL OF DATA.
;IF LESS THAN 6 CHANNELS ARE USED, THE REMAINING POINTERS ARE SET TO 0
;A 0 VALUE POINTER INDICATES AN IDLE CHANNEL.
;
;EX: SOUND: .BYTE 0
;
;    CH1:   .BYTE 0,45,0,1
;    CH2:   .BYTE 0,45,0,2,3,7,9,1
;
;BY CALLING 'OFFSET CH' , THE FOLLOWING WILL BE PLACED IN LINE
;	    .BYTE CH1-SOUND
;	    .BYTE CH2-SOUND
;	    .BYTE 0,0,0,0
;
	.PAGE
	.SBTTL SOUND TABLES
;
;TABLES OF OFFSET POINTER FOR SOUNDS. (6 BYTES PER SOUND NUMBER)
	.CSECT T2SOUN
PNTRS:
	OFFSET LO
	OFFSET EX
	OFFSET LA
	OFFSET TK
	OFFSET WP
	OFFSET XX
	OFFSET BN
	OFFSET NS
PTLEN	=.-PNTRS
;AUDIO CONTROL CHANNEL VALUE (1 BYTE PRE SOUND NUMBER)
AUDCV	=20
IDLEV	=0
	
;SOUND TABLES
				;ALL OF THESE LABELS GO
				;HRE SO THEY HAVE AN
				;OFFSET OF 0, WHICH
				;PREVENTS THE SOUND FROM
				;AFFECTING THOSE CHANNELS
				;WHICH HAVE AN OFFSET
				;OF 0
SOUND:	.BYTE 0
	.PAGE
				;A GOOD PLACE FOR THE CHECKSUM
;DATA STRUCTUREJ:
;A CHANNEL CONSISTS OF A SERIES OF 4 BYTE SEQUENCES:
;	BYTE		FUNCTION
;	 1		 STARTING VALUE OF SEQUENCE
;	 2		 # OF FRAMES BEFORE NEXT CHANGE
;	 3		 AMOUNT OF CHANGE
;	 4		 TOTAL NUMBER OF CHANGES (# OF DIFFERENT VALUES)
;TO STOP A CHANNEL & RETURN TO ITS IDLE STATE, PUT IN AS A
;2 BYTE SEQUENCE X,0 WHERE X WILL BE USED AS THE NEW IDLE VALUE.
;NOTE: ALL SOUNDS END WHEN CHANNEL 1 GOES IDLE, SO IT SHOULD BE THE
;LONGEST
;TURN ALL SOUNDS OFF
;
;EXPLOSION SOUND
;
EX1:	.BYTE 0A0,10,4,10
	.BYTE 0,0
EX2:	.BYTE 86,40,0FE,4
	.BYTE 0,0
EX3:	.BYTE 0C0,10,4,10
	.BYTE 0,0
EX4:	.BYTE 86,40,0FE,4
	.BYTE 0,0
;LAUNCH SOUND
LA5:	.BYTE 60,10,0,1
	.BYTE 50,10,0F8,1
	.BYTE 48,10,18,1
	.BYTE 60,18,0F0,1
	.BYTE 60,10,0F8,1
	.BYTE 60,10,8,10
	.BYTE 0,0
LA6:	.BYTE 82,20,2,1
	.BYTE 84,10,0,4
	.BYTE 84,38,0FF,4
	.BYTE 0,0
;BONUS TICK
TK1:	.BYTE 10,4,0,1
	.BYTE 0,0
TK2:	.BYTE 2F,4,0F,1
	.BYTE 0,0
;BONUS CITY (DUMMIES)
BN1:	.BYTE 18,18,0,18
	.BYTE 0,0
BN2:	.BYTE 0A4,18,0,18
	.BYTE 0A0,10,0,2
	.BYTE 0,0
;WHOOP SOUND
WP1:	.BYTE 10,2,1,20
	.BYTE 10,2,1,20
	.BYTE 10,2,1,20
	.BYTE 10,2,1,20
	.BYTE 10,2,1,20
	.BYTE 10,2,1,20
	.BYTE 0,0
WP2:	.BYTE 0A4,2,0,0C0
	.BYTE 0,0
;LOW ON ABMS
LO7:	.BYTE 20,80,0,3
	.BYTE 0,0
LO8:	.BYTE 0A3,40,0FD,2
	.BYTE 0A3,40,0FD,2
	.BYTE 0A3,40,0FD,2
	.BYTE 0,0
;"THE END" EXPLOSION
XX1:	.BYTE 40,0FF,2,8
	.BYTE 0,0
XX2:	.BYTE 88,0FF,0FF,8
	.BYTE 0,0	
XX3:	.BYTE 0C0,0FF,2,8
	.BYTE 0,0
XX4:	.BYTE 88,0FF,0FF,8
	.BYTE 0,0
;CAN'T FIRE SOUND
NS7:	.BYTE 18,2,0FF,10
	.BYTE 8,20,0,1
	.BYTE 0,0
NS8:	.BYTE 0A4,10,0FF,4
	.BYTE 0,0
	.PAGE
EXSNON:	LDA I,SEXPLO
SNDON:	BIT ATRACT		;ATTRACT MODE?
	IFMI			;NO, OK TO START A SOUND
	STA RA			;SAVE A
	STA SOUNDN
	STX J
	STY K
	TAX
	IFNE
	LDX I,8			;START SOUND # SEARCH AT TOP
	BEGIN
	ASL RA			;WHICH BIT IS IT?
	DEX
	CSEND			;FOUND HIM
	THEN
	TXA
	ASL			;X8
	ASL			;X8
	ASL
	ADC I,7			;CAUSE IT COUNTS DOWN NOT UP
	TAY			;USE AS INDEX
	CPY I,PTLEN+7		;PAST TABLE?
	IFCC
	LDX I,7
	BEGIN
	LDA Y,PNTRS
	IFNE			;IF POINTER 0 DONT TOUCH THIS CHANNEL
	STA X,POINT		;IF NOT SET UP POINTER 
	LDA I,1
	STA X,FRAMES		;DUMMY START, NO SOUND
	STA X,COUNT		;TILL MODSND STORES TO POKEY
	THEN
	DEY
	DEX
	MIEND
	THEN
	LDX J			;RESTORE X & Y UPON RETURN
	LDY K
	THEN
	RTS
;MAKE SLAM SOUND-ANOTHER SPECIAL CASE-
SLMSND:	LDA I,18
	LDY I,0AF
	STA A,AUDF1
	STY A,AUDF1+1
	RTS
	.PAGE
	.SBTTL SOUND ROUTINE
;
;CONTINUES A PREVIOUSLY STARTED SOUND
;WHEN CHANNEL 1 GOES IDLE, ALL SOUND ENDS
;
MODSND:	LDA SLAMSN
	BNE SLMSND
	LDX I,7			;4 CHANNELS
10$:
	DEC X,FRAMES		;CHANGE THIS FRAME
	BNE 30$
	LDY X,POINT		;GET DATA POINTER
	BEQ 30$			;NOT ACTIVE CHANNEL
	DEC X,COUNT		;DATA CHANGES LEFT?
	BNE 20$			;NO -- NONE
	LDA Y,SOUND+STVAL	;GET CURRENT VALUE
	STA X,CURRENT		;SAVE
	LDA Y,SOUND+FRCNT	;GET FRAMES OF THIS LEVEL
	STA X,FRAMES		;UPDATE FRAME NUMBER
	BNE 17$			;IF 0, THIS CHANNEL JUST ENDED
	STA X,POINT		;SET POINTER TO 0 TO IDLE CHANNEL
	TXA			;A CHEAP WAY TO TEST IF THIS IS CH 1
	BNE 30$			;IF NOT CH 1, JUST IDLE CHANNEL
	LDA I,IDLEV		;GET IDLE VALUE
	STA X,CURRENT		;SAVE
	STA X,AUDF1		;STORE TO POKEY
	LDA I,0			;0 POINTER
	STA X,POINT
	DEX
	BPL 10$
	BMI PMRBIL
17$:	LDA Y,SOUND+NUMBER
	STA X,COUNT		;# OF CHANGES
	LDA X,POINT
	CLC
	ADC I,4			;POINT TO NEXT SEQUENCE
	STA X,POINT
	JMP 30$
20$:	LDA Y,SOUND+FRCNT-4	;FRAME RATE
				;THE -4 TO CORRECT FOR THE POINTER BEING ALREADY
				;INCREMENTED TO POINT TO THE NEXT BLOCK.
	STA X,FRAMES
	LDA X,CURRENT
	CLC
	ADC Y,SOUND+CHANGE-4	;STEP THRU SEQUENCE
	BIT SOUNDN
	IFVS
	CPX I,1
	IFNE
	LDA AUDF1+0A		;GET A RANDOM NUMBER FROM POKEY
	AND I,1E
	IFEQ
	LDA I,1E
	THEN
	THEN
	THEN
	STA X,CURRENT
30$:	LDA X,CURRENT		;MORE THAN 1 PATH HERE SO LOAD CURRENT
	STA X,AUDF1		;OUTPUT
	DEX
	BPL 10$
PMRBIL:	LDA POINT+6
	IFEQ			;ANY OTHER SOUNDS IN LAST CHANNEL?
	LDA MRBILL		;NO. SPUT A CRUISE SOUND REQUESTED?
	IFNE
	ROL			;YES
	ROL
	ROL
	AND I,3
	TAX			;CONVERT FLAGS TO INDEX 1=SPUT, 2=CM, 3=BOTH
	LDA MBTIME		;GET OLD FREQ
	CMP AX,BOTTOM-1
	IFEQ			;AT BOTTOM?
	LDA AX,TOP-1		;YES. RESET TO TOP
	ELSE
	SEC			;NO. DECREMENT
	SBC I,2
	THEN
	STA AUDF1+6		;UPDATE POKEY FREQ
	STA MBTIME		;AND FREQ BUCKET
	LDA I,0A4
	STA AUDF1+7
	STA CURRENT+7
	THEN
	THEN
	RTS
BOTTOM:	.BYTE 30,0,0		;SPUTNIK, CRUISE, BOTH
TOP:	.BYTE 70,30,30
	.PAGE
CMSNON:	LDA I,30
	STA MBTIME
	LDA MRBILL
	ORA I,80
	STA MRBILL
	RTS
STSNON:	LDA MRBILL		;CRUISE MISSILES ON
	ORA I,40
	STA MRBILL
	IFPL			;SCREEN?
	LDA I,70
	STA MBTIME
	THEN
	RTS
CMSNOF:	LDA CRMONS
	IFEQ
	LDA MRBILL
	AND I,7F
	STA MRBILL
	BIT MRBILL
	BVS STSNON
STSNOF:	LDA MRBILL
	AND I,0BF
	STA MRBILL
	LDA CRMONS
	IFEQ
	STA MRBILL
	STA AUDF1+6
	STA AUDF1+7
	THEN
	THEN
	RTS
INISOU:	LDA I,0
	STA A,AUDF1+0F
	LDA I,3
	STA A,AUDF1+0F
	LDX I,7
	LDA I,0
	BEGIN
	STA AX,AUDF1
	STA X,POINT
	STA X,CURRENT
	DEX
	MIEND
	LDA I,AUDCV
	STA AUDCTL
	RTS
	.END
                                                                                                                                                                                                                                                                                                                                                                                                                   